# üìÅ accounts/models.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å Generic FK
# üõí –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–æ—Ä–∑–∏–Ω–∞ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ò –ª–æ–¥–æ–∫
# ‚úÖ –§–ò–ö–°: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã –ø–æ–ª–µ–π –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–æ–¥–µ–ª–∏

from django.db import models
from django.contrib.auth.models import User
from django.contrib.contenttypes.models import ContentType
from django.contrib.contenttypes.fields import GenericForeignKey
from django.conf import settings
from base.models import BaseModel
import os
import uuid


class Profile(BaseModel):
    """üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = models.OneToOneField(
        User,
        on_delete=models.CASCADE,
        related_name="profile"
    )

    is_email_verified = models.BooleanField(
        default=False,
        verbose_name="Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
    )

    email_token = models.CharField(
        max_length=100,
        null=True,
        blank=True,
        verbose_name="–¢–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
    )

    profile_image = models.ImageField(
        upload_to='profile',
        null=True,
        blank=True,
        verbose_name="–§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è"
    )

    bio = models.TextField(
        null=True,
        blank=True,
        verbose_name="–û —Å–µ–±–µ"
    )

    def __str__(self):
        return self.user.username

    def get_cart_count(self):
        """üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
        return CartItem.objects.filter(
            cart__is_paid=False,
            cart__user=self.user
        ).count()

    class Meta:
        verbose_name = "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        verbose_name_plural = "–ü—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"


class Cart(BaseModel):
    """üõí –ö–æ—Ä–∑–∏–Ω–∞ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)"""
    user = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        related_name="cart",
        null=True,
        blank=True,
        verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    )

    session_id = models.CharField(
        max_length=50,
        null=True,
        blank=True,
        verbose_name="ID —Å–µ—Å—Å–∏–∏",
        help_text="–î–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    )

    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ Coupon
    coupon = models.ForeignKey(
        'products.Coupon',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="–ö—É–ø–æ–Ω"
    )

    is_paid = models.BooleanField(
        default=False,
        verbose_name="–û–ø–ª–∞—á–µ–Ω"
    )

    def get_cart_total(self):
        """üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã"""
        total_price = 0
        for cart_item in self.cart_items.all():
            total_price += cart_item.get_product_price()
        return total_price

    def get_cart_total_price_after_coupon(self):
        """üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º –∫—É–ø–æ–Ω–∞"""
        total = self.get_cart_total()

        if self.coupon and total >= self.coupon.minimum_amount:
            total -= self.coupon.discount_amount

        return total

    @classmethod
    def get_anonymous_cart(cls, request):
        """üõí –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É"""
        if not request.session.session_key:
            request.session.create()

        cart, created = cls.objects.get_or_create(
            session_id=request.session.session_key,
            is_paid=False,
            defaults={'user': None}
        )

        return cart

    def __str__(self):
        if self.user:
            return f"–ö–æ—Ä–∑–∏–Ω–∞ {self.user.username}"
        return f"–ê–Ω–æ–Ω–∏–º–Ω–∞—è –∫–æ—Ä–∑–∏–Ω–∞ {self.session_id[:8]}..."

    class Meta:
        verbose_name = "–ö–æ—Ä–∑–∏–Ω–∞"
        verbose_name_plural = "–ö–æ—Ä–∑–∏–Ω—ã"


class CartItem(BaseModel):
    """
    üì¶ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ —á–µ—Ä–µ–∑ Generic FK

    –ú–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å products.Product –ò–õ–ò boats.BoatProduct
    –ò–õ–ò –ª—é–±—ã–µ –±—É–¥—É—â–∏–µ —Ç–∏–ø—ã —Ç–æ–≤–∞—Ä–æ–≤
    """
    cart = models.ForeignKey(
        Cart,
        on_delete=models.CASCADE,
        related_name="cart_items",
        verbose_name="–ö–æ—Ä–∑–∏–Ω–∞"
    )

    # üîó Generic FK - –º–æ–∂–µ—Ç —Å—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞ –õ–Æ–ë–£–Æ –º–æ–¥–µ–ª—å —Ç–æ–≤–∞—Ä–∞
    content_type = models.ForeignKey(
        ContentType,
        on_delete=models.CASCADE,
        verbose_name="–¢–∏–ø —Ç–æ–≤–∞—Ä–∞",
        help_text="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è (–∞–≤—Ç–æ–º–æ–±–∏–ª—å/–ª–æ–¥–∫–∞)"
    )

    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: UUIDField –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å UUID primary keys
    object_id = models.UUIDField(
        verbose_name="ID —Ç–æ–≤–∞—Ä–∞",
        help_text="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è"
    )

    # üéØ –ì–ª–∞–≤–Ω–æ–µ –ø–æ–ª–µ - —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä –ª—é–±–æ–≥–æ —Ç–∏–ø–∞
    product = GenericForeignKey('content_type', 'object_id')

    # üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
    quantity = models.IntegerField(
        default=1,
        verbose_name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"
    )

    # üé® –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞
    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –º–æ–¥–µ–ª—å Color
    carpet_color = models.ForeignKey(
        'products.Color',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name="cart_items_carpet",
        verbose_name="–¶–≤–µ—Ç –∫–æ–≤—Ä–∏–∫–∞",
        limit_choices_to={'color_type': 'carpet'}
    )

    border_color = models.ForeignKey(
        'products.Color',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name="cart_items_border",
        verbose_name="–¶–≤–µ—Ç –æ–∫–∞–Ω—Ç–æ–≤–∫–∏",
        limit_choices_to={'color_type': 'border'}
    )

    # üì¶ –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π)
    kit_variant = models.ForeignKey(
        'products.KitVariant',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è",
        help_text="–ü—Ä–∏–º–µ–Ω–∏–º–æ —Ç–æ–ª—å–∫–æ –∫ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–º –∫–æ–≤—Ä–∏–∫–∞–º"
    )

    # ü¶∂ –ü–æ–¥–ø—è—Ç–Ω–∏–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π)
    has_podpyatnik = models.BooleanField(
        default=False,
        verbose_name="–° –ø–æ–¥–ø—è—Ç–Ω–∏–∫–æ–º",
        help_text="–ü—Ä–∏–º–µ–Ω–∏–º–æ —Ç–æ–ª—å–∫–æ –∫ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–º –∫–æ–≤—Ä–∏–∫–∞–º"
    )

    def get_product_name(self):
        """üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ª—é–±–æ–≥–æ —Ç–∏–ø–∞"""
        if self.product:
            return self.product.product_name
        return "–£–¥–∞–ª–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä"

    def get_product_type(self):
        """üîç –¢–∏–ø —Ç–æ–≤–∞—Ä–∞"""
        if self.content_type:
            app_label = self.content_type.app_label
            if app_label == 'products':
                return 'üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å'
            elif app_label == 'boats':
                return 'üõ•Ô∏è –õ–æ–¥–∫–∞'
        return '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

    def is_car_product(self):
        """üöó –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —ç—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä"""
        return self.content_type and self.content_type.app_label == 'products'

    def is_boat_product(self):
        """üõ•Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —ç—Ç–æ –ª–æ–¥–æ—á–Ω—ã–π —Ç–æ–≤–∞—Ä"""
        return self.content_type and self.content_type.app_label == 'boats'

    def get_product_dimensions(self):
        """üìè –†–∞–∑–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–∞ (–¥–ª—è –ª–æ–¥–æ–∫)"""
        if self.is_boat_product() and self.product:
            if hasattr(self.product, 'boat_mat_length') and hasattr(self.product, 'boat_mat_width'):
                if self.product.boat_mat_length and self.product.boat_mat_width:
                    return f"{self.product.boat_mat_length}√ó{self.product.boat_mat_width} —Å–º"
        return None

    def get_product_image(self):
        """üñºÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –ª—é–±–æ–≥–æ —Ç–∏–ø–∞"""
        if not self.product:
            return None

        if self.is_boat_product():
            # üõ•Ô∏è –î–ª—è –ª–æ–¥–æ—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º images
            if hasattr(self.product, 'images') and self.product.images.exists():
                return self.product.images.first()
            return None
        else:
            # üöó –î–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º product_images
            if hasattr(self.product, 'product_images') and self.product.product_images.exists():
                return self.product.product_images.first()
            return None

    def get_product_image_url(self):
        """üñºÔ∏è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        image = self.get_product_image()
        if image and hasattr(image, 'image') and image.image:
            return image.image.url
        return None

    def get_product_url(self):
        """üîó URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞"""
        if not self.product or not hasattr(self.product, 'slug'):
            return "#"

        if self.is_boat_product():
            # üõ•Ô∏è URL –ª–æ–¥–æ—á–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            return f"/boats/product/{self.product.slug}/"
        else:
            # üöó URL –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            return f"/products/{self.product.slug}/"

    def get_product_price(self):
        """üí∞ –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞ —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if not self.product:
            return 0

        base_price = float(self.product.price or 0)
        total_price = base_price * self.quantity

        # üöó –õ–æ–≥–∏–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        if self.is_car_product():
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏
            if self.kit_variant and hasattr(self.kit_variant, 'price_modifier'):
                kit_price = float(self.kit_variant.price_modifier or 0)
                total_price += kit_price * self.quantity

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø—è—Ç–Ω–∏–∫–∞
            if self.has_podpyatnik:
                # üîç –ò—â–µ–º –ø–æ–¥–ø—è—Ç–Ω–∏–∫ –≤ KitVariant –∫–∞–∫ –æ–ø—Ü–∏—é
                try:
                    from products.models import KitVariant
                    podpyatnik_option = KitVariant.objects.filter(
                        code='podpyatnik', is_option=True
                    ).first()
                    if podpyatnik_option:
                        podpyatnik_price = float(podpyatnik_option.price_modifier or 0)
                        total_price += podpyatnik_price * self.quantity
                except:
                    # Fallback —Ü–µ–Ω–∞ –ø–æ–¥–ø—è—Ç–Ω–∏–∫–∞
                    total_price += 500 * self.quantity

        # üõ•Ô∏è –õ–æ–≥–∏–∫–∞ –¥–ª—è –ª–æ–¥–æ–∫ (—Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞)
        elif self.is_boat_product():
            # –î–ª—è –ª–æ–¥–æ–∫ —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ * –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            pass

        return total_price

    def get_configuration_summary(self):
        """üìã –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞"""
        parts = []

        # –¶–≤–µ—Ç–∞ (–¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤)
        if self.carpet_color:
            parts.append(f"–ö–æ–≤—Ä–∏–∫: {self.carpet_color.name}")

        if self.border_color:
            parts.append(f"–û–∫–∞–Ω—Ç–æ–≤–∫–∞: {self.border_color.name}")

        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        if self.is_car_product():
            if self.kit_variant:
                parts.append(f"–ö–æ–º–ø–ª–µ–∫—Ç: {self.kit_variant.name}")

            if self.has_podpyatnik:
                parts.append("–° –ø–æ–¥–ø—è—Ç–Ω–∏–∫–æ–º")

        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –ª–æ–¥–æ–∫
        elif self.is_boat_product():
            dimensions = self.get_product_dimensions()
            if dimensions:
                parts.append(f"–†–∞–∑–º–µ—Ä: {dimensions}")

        return " | ".join(parts) if parts else "–ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"

    def __str__(self):
        product_name = self.get_product_name()
        product_type = self.get_product_type()
        config = self.get_configuration_summary()
        return f"üõí {product_type} {product_name} - {config} (√ó{self.quantity})"

    class Meta:
        verbose_name = "–¢–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ"
        verbose_name_plural = "–¢–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ"
        # ‚ö†Ô∏è –£–ë–†–ê–ù–û: unique_together –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –º–∏–≥—Ä–∞—Ü–∏—è–º–∏
        # –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤–∏–º –∏–Ω–¥–µ–∫—Å—ã –æ—Ç–¥–µ–ª—å–Ω–æ


class Order(BaseModel):
    """üìã –ó–∞–∫–∞–∑ - –ü–û–õ–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—è–º–∏"""
    user = models.ForeignKey(
        User,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name="orders",
        verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    )

    # üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
    customer_name = models.CharField(
        max_length=100,
        verbose_name="–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞"
    )
    customer_phone = models.CharField(
        max_length=20,
        verbose_name="–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω"
    )
    customer_email = models.EmailField(
        verbose_name="Email –∫–ª–∏–µ–Ω—Ç–∞"
    )
    customer_city = models.CharField(
        max_length=100,
        verbose_name="–ì–æ—Ä–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞"
    )

    # üöö –î–æ—Å—Ç–∞–≤–∫–∞
    delivery_method = models.CharField(
        max_length=20,
        choices=[
            ('pickup', '–°–∞–º–æ–≤—ã–≤–æ–∑'),
            ('europochta', '–ï–≤—Ä–æ–ø–æ—á—Ç–∞ –ø–æ –ë–µ–ª–∞—Ä—É—Å–∏'),
            ('belpochta', '–ë–µ–ª–ø–æ—á—Ç–∞ –ø–æ –ë–µ–ª–∞—Ä—É—Å–∏'),
            ('yandex', '–Ø–Ω–¥–µ–∫—Å –∫—É—Ä—å–µ—Ä –ø–æ –ú–∏–Ω—Å–∫—É'),
        ],
        default='pickup',
        verbose_name="–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏"
    )

    shipping_address = models.TextField(
        blank=True,
        null=True,
        verbose_name="–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏"
    )

    tracking_code = models.CharField(
        max_length=50,
        null=True,
        blank=True,
        verbose_name="–ö–æ–¥ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"
    )

    # üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å
    order_total_price = models.DecimalField(
        max_digits=10,
        decimal_places=2,
        verbose_name="–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤"
    )

    coupon = models.ForeignKey(
        'products.Coupon',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="–ö—É–ø–æ–Ω"
    )

    grand_total = models.DecimalField(
        max_digits=10,
        decimal_places=2,
        verbose_name="–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ"
    )

    # üîÑ –°—Ç–∞—Ç—É—Å—ã
    payment_status = models.CharField(
        max_length=20,
        choices=[
            ('pending', '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã'),
            ('paid', '–û–ø–ª–∞—á–µ–Ω'),
            ('cancelled', '–û—Ç–º–µ–Ω–µ–Ω'),
        ],
        default='pending',
        verbose_name="–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã"
    )

    payment_mode = models.CharField(
        max_length=20,
        choices=[
            ('cash', '–ù–∞–ª–∏—á–Ω—ã–µ'),
            ('card', '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞')
        ],
        default='cash',
        verbose_name="–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã"
    )

    # üìù –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    order_notes = models.TextField(
        blank=True,
        null=True,
        verbose_name="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∑–∞–∫–∞–∑—É"
    )

    order_id = models.CharField(
        max_length=20,
        unique=True,
        verbose_name="–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞"
    )

    order_date = models.DateTimeField(
        auto_now_add=True,
        verbose_name="–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞"
    )

    def save(self, *args, **kwargs):
        """üíæ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞"""
        if not self.order_id:
            import datetime
            now = datetime.datetime.now()
            self.order_id = f"ORD-{now.strftime('%Y%m%d')}-{now.strftime('%H%M%S')}"

        super().save(*args, **kwargs)

    def __str__(self):
        return f"üìã –ó–∞–∫–∞–∑ {self.order_id} - {self.customer_name}"

    class Meta:
        verbose_name = "–ó–∞–∫–∞–∑"
        verbose_name_plural = "–ó–∞–∫–∞–∑—ã"
        ordering = ['-order_date']


class OrderItem(BaseModel):
    """üì¶ –¢–æ–≤–∞—Ä –≤ –∑–∞–∫–∞–∑–µ —Å Generic FK"""
    order = models.ForeignKey(
        Order,
        on_delete=models.CASCADE,
        related_name="order_items",
        verbose_name="–ó–∞–∫–∞–∑"
    )

    # üîó Generic FK - –º–æ–∂–µ—Ç —Å—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞ –õ–Æ–ë–£–Æ –º–æ–¥–µ–ª—å —Ç–æ–≤–∞—Ä–∞
    content_type = models.ForeignKey(
        ContentType,
        on_delete=models.CASCADE,
        verbose_name="–¢–∏–ø —Ç–æ–≤–∞—Ä–∞"
    )

    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: UUIDField –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    object_id = models.UUIDField(
        verbose_name="ID —Ç–æ–≤–∞—Ä–∞"
    )

    # üéØ –ì–ª–∞–≤–Ω–æ–µ –ø–æ–ª–µ - —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä –ª—é–±–æ–≥–æ —Ç–∏–ø–∞
    product = GenericForeignKey('content_type', 'object_id')

    # üìä –î–∞–Ω–Ω—ã–µ –Ω–∞ –º–æ–º–µ–Ω—Ç –∑–∞–∫–∞–∑–∞
    quantity = models.PositiveIntegerField(
        default=1,
        verbose_name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"
    )

    product_price = models.DecimalField(
        max_digits=10,
        decimal_places=2,
        null=True,
        verbose_name="–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞",
        help_text="–¶–µ–Ω–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç –∑–∞–∫–∞–∑–∞"
    )

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –∏–∑ CartItem)
    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–æ–¥–µ–ª–∏
    carpet_color = models.ForeignKey(
        'products.Color',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name="order_items_carpet",
        verbose_name="–¶–≤–µ—Ç –∫–æ–≤—Ä–∏–∫–∞"
    )

    border_color = models.ForeignKey(
        'products.Color',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name="order_items_border",
        verbose_name="–¶–≤–µ—Ç –æ–∫–∞–Ω—Ç–æ–≤–∫–∏"
    )

    kit_variant = models.ForeignKey(
        'products.KitVariant',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è"
    )

    has_podpyatnik = models.BooleanField(
        default=False,
        verbose_name="–° –ø–æ–¥–ø—è—Ç–Ω–∏–∫–æ–º"
    )

    def get_product_name(self):
        """üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
        if self.product:
            return self.product.product_name
        return "–£–¥–∞–ª–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä"

    def get_total_price(self):
        """üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏"""
        if self.product_price:
            return float(self.product_price) * self.quantity
        return 0

    def __str__(self):
        product_name = self.get_product_name()
        return f"üì¶ {product_name} - {self.quantity} —à—Ç."

    class Meta:
        verbose_name = "–¢–æ–≤–∞—Ä –≤ –∑–∞–∫–∞–∑–µ"
        verbose_name_plural = "–¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ"