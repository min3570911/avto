# üìÅ accounts/models.py - –ü–û–õ–ù–ê–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
# üõ•Ô∏è –î–û–ë–ê–í–õ–ï–ù–û: –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –ª–æ–¥–æ–∫ –≤ –∫–æ—Ä–∑–∏–Ω–µ
# üö® –£–ë–†–ê–ù –ò–ú–ü–û–†–¢ ColorVariant –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ–ª—è

from django.db import models
from django.contrib.auth.models import User
from base.models import BaseModel
from products.models import Product, KitVariant, Coupon, Color
from django.conf import settings
import os
import uuid


class Profile(BaseModel):
    """üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name="profile")
    is_email_verified = models.BooleanField(default=False)
    email_token = models.CharField(max_length=100, null=True, blank=True)
    profile_image = models.ImageField(upload_to='profile', null=True, blank=True)
    bio = models.TextField(null=True, blank=True)

    def __str__(self):
        return self.user.username

    def get_cart_count(self):
        """üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        return CartItem.objects.filter(cart__is_paid=False, cart__user=self.user).count()

    def save(self, *args, **kwargs):
        """üíæ –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏"""
        if self.pk:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            try:
                old_profile = Profile.objects.get(pk=self.pk)
                if old_profile.profile_image and old_profile.profile_image != self.profile_image:
                    if old_profile.profile_image.path:
                        old_image_path = os.path.join(settings.MEDIA_ROOT, old_profile.profile_image.path)
                        if os.path.exists(old_image_path):
                            os.remove(old_image_path)
            except (Profile.DoesNotExist, ValueError, FileNotFoundError):
                pass

        super(Profile, self).save(*args, **kwargs)

    class Meta:
        verbose_name = "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        verbose_name_plural = "–ü—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"


class Cart(BaseModel):
    """üõí –ö–æ—Ä–∑–∏–Ω–∞ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)"""
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name="cart", null=True, blank=True)
    session_id = models.CharField(max_length=50, null=True, blank=True)  # üÜï –î–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    coupon = models.ForeignKey(Coupon, on_delete=models.SET_NULL, null=True, blank=True)
    is_paid = models.BooleanField(default=False)

    def get_cart_total(self):
        """üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã"""
        cart_items = self.cart_items.all()
        total_price = 0

        for cart_item in cart_items:
            total_price += cart_item.get_product_price()

        return total_price

    def get_cart_total_price_after_coupon(self):
        """üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º –∫—É–ø–æ–Ω–∞"""
        total = self.get_cart_total()

        if self.coupon and total >= self.coupon.minimum_amount:
            total -= self.coupon.discount_amount

        return total

    @classmethod
    def get_anonymous_cart(cls, request):
        """
        üõí –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É

        üÜï –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —Å–µ—Å—Å–∏—è–º–∏ (–±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
        """
        # üîë –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if not request.session.session_key:
            request.session.create()

        # üîç –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ —Å–µ—Å—Å–∏–∏
        cart, created = cls.objects.get_or_create(
            session_id=request.session.session_key,
            is_paid=False,
            defaults={'user': None}  # üö´ –ë–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        )

        return cart

    # üîÑ LEGACY –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    @classmethod
    def get_cart(cls, request):
        """üîÑ –£—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ get_anonymous_cart"""
        return cls.get_anonymous_cart(request)

    def __str__(self):
        if self.user:
            return f"–ö–æ—Ä–∑–∏–Ω–∞ {self.user.username}"
        return f"–ê–Ω–æ–Ω–∏–º–Ω–∞—è –∫–æ—Ä–∑–∏–Ω–∞ {self.session_id[:8]}..."

    class Meta:
        verbose_name = "–ö–æ—Ä–∑–∏–Ω–∞"
        verbose_name_plural = "–ö–æ—Ä–∑–∏–Ω—ã"


class CartItem(BaseModel):
    """üì¶ –¢–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–º–µ—Ä–æ–≤ –ª–æ–¥–æ–∫"""
    cart = models.ForeignKey(Cart, on_delete=models.CASCADE, related_name="cart_items")
    product = models.ForeignKey(Product, on_delete=models.SET_NULL, null=True, blank=True)
    kit_variant = models.ForeignKey(KitVariant, on_delete=models.SET_NULL, null=True, blank=True)
    carpet_color = models.ForeignKey(Color, on_delete=models.SET_NULL, null=True, blank=True,
                                     related_name="cart_items_carpet")
    border_color = models.ForeignKey(Color, on_delete=models.SET_NULL, null=True, blank=True,
                                     related_name="cart_items_border")
    quantity = models.IntegerField(default=1)
    has_podpyatnik = models.BooleanField(default=False)

    def get_product_price(self):
        """üí∞ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô: –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –ë–ï–ó —Ö–∞—Ä–¥–∫–æ–¥–∞ —Ü–µ–Ω"""

        if not self.product:
            return 0

        # üõ•Ô∏è –õ–û–ì–ò–ö–ê –î–õ–Ø –õ–û–î–û–ö
        if self.product.is_boat_product():
            # –î–ª—è –ª–æ–¥–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—É –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–π –∏ –ø–æ–¥–ø—è—Ç–Ω–∏–∫–∞)
            base_price = float(self.product.price or 0)

        # üöó –õ–û–ì–ò–ö–ê –î–õ–Ø –ê–í–¢–û–ú–û–ë–ò–õ–ï–ô
        else:
            # ‚úÖ –ü–æ–ª—É—á–∞–µ–º –ò–¢–û–ì–û–í–£–Æ —Ü–µ–Ω—É –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏
            if self.kit_variant:
                base_price = float(self.product.get_product_price_by_kit(self.kit_variant.code))
            else:
                # –ï—Å–ª–∏ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—É —Å–∞–ª–æ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                base_price = float(self.product.get_product_price_by_kit('salon'))

            # ü¶∂ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø—è—Ç–Ω–∏–∫–∞ –ë–ï–ó —Ö–∞—Ä–¥–∫–æ–¥–∞
            if self.has_podpyatnik:
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
                from products.models import KitVariant

                podpyatnik_option = KitVariant.objects.filter(
                    code='podpyatnik',
                    is_option=True
                ).first()

                if podpyatnik_option:
                    # ‚úÖ –¶–µ–Ω–∞ –∏–∑ –∞–¥–º–∏–Ω–∫–∏
                    base_price += float(podpyatnik_option.price_modifier)
                    print(f"‚úÖ –ü–æ–¥–ø—è—Ç–Ω–∏–∫: {podpyatnik_option.price_modifier} —Ä—É–± (–∏–∑ –∞–¥–º–∏–Ω–∫–∏)")
                else:
                    # üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ø–æ–¥–ø—è—Ç–Ω–∏–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∞–¥–º–∏–Ω–∫–µ!
                    import logging
                    logger = logging.getLogger(__name__)
                    logger.error(
                        "üö® –û–®–ò–ë–ö–ê: –û–ø—Ü–∏—è '–ø–æ–¥–ø—è—Ç–Ω–∏–∫' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∞–¥–º–∏–Ω–∫–µ! –°–æ–∑–¥–∞–π—Ç–µ KitVariant —Å code='podpyatnik' –∏ is_option=True")

                    print("‚ùå –í–ù–ò–ú–ê–ù–ò–ï: –ü–æ–¥–ø—è—Ç–Ω–∏–∫ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –∫ —Ü–µ–Ω–µ - –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∞–¥–º–∏–Ω–∫–µ!")

                    # üìß –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                    # send_admin_notification("–ü–æ–¥–ø—è—Ç–Ω–∏–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∞–¥–º–∏–Ω–∫–µ!")

        # ‚úñÔ∏è –£–º–Ω–æ–∂–∞–µ–º —Ü–µ–Ω—É –µ–¥–∏–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        total_price = base_price * self.quantity

        # üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"üßÆ –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞ '{self.product.product_name}':")
        print(f"   - –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: {base_price} —Ä—É–±")
        print(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {self.quantity}")
        print(f"   - –ò—Ç–æ–≥–æ: {total_price} —Ä—É–±")

        return total_price

    # üõ•Ô∏è –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –†–ê–ó–ú–ï–†–û–í –õ–û–î–û–ö
    def get_product_dimensions(self):
        """
        üìè –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã –∫–æ–≤—Ä–∏–∫–∞ –¥–ª—è –ª–æ–¥–æ–∫

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ –¥–ª—è –ª–æ–¥–æ—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        –∏–ª–∏ None –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        """
        if self.product and self.product.is_boat_product():
            return self.product.get_mat_dimensions()
        return None

    def get_product_description_info(self):
        """
        üìù –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ –∏ –æ–ø—Ü–∏—è–º–∏

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        """
        info_parts = []

        # üõ•Ô∏è –†–∞–∑–º–µ—Ä—ã –¥–ª—è –ª–æ–¥–æ–∫
        dimensions = self.get_product_dimensions()
        if dimensions:
            info_parts.append(f"üìè –†–∞–∑–º–µ—Ä: {dimensions}")

        # üì¶ –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        if self.kit_variant:
            info_parts.append(f"–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è: {self.kit_variant.name}")

        # üé® –¶–≤–µ—Ç–∞
        if self.carpet_color:
            info_parts.append(f"–¶–≤–µ—Ç –∫–æ–≤—Ä–∏–∫–∞: {self.carpet_color.name}")

        if self.border_color:
            info_parts.append(f"–¶–≤–µ—Ç –æ–∫–∞–Ω—Ç–æ–≤–∫–∏: {self.border_color.name}")

        # ü¶∂ –ü–æ–¥–ø—è—Ç–Ω–∏–∫
        if self.has_podpyatnik:
            info_parts.append("ü¶∂ –° –ø–æ–¥–ø—è—Ç–Ω–∏–∫–æ–º")

        return info_parts

    def get_short_description(self):
        """üìù –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏)"""
        parts = []

        # üõ•Ô∏è –†–∞–∑–º–µ—Ä—ã –¥–ª—è –ª–æ–¥–æ–∫
        dimensions = self.get_product_dimensions()
        if dimensions:
            parts.append(f"–†–∞–∑–º–µ—Ä: {dimensions}")

        # üì¶ –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è
        if self.kit_variant:
            parts.append(f"–ö–æ–º–ø–ª–µ–∫—Ç: {self.kit_variant.name}")

        # üé® –¶–≤–µ—Ç–∞
        if self.carpet_color:
            parts.append(f"–ö–æ–≤—Ä–∏–∫: {self.carpet_color.name}")
        if self.border_color:
            parts.append(f"–û–∫–∞–Ω—Ç–æ–≤–∫–∞: {self.border_color.name}")

        # ü¶∂ –ü–æ–¥–ø—è—Ç–Ω–∏–∫
        if self.has_podpyatnik:
            parts.append("–° –ø–æ–¥–ø—è—Ç–Ω–∏–∫–æ–º")

        return " | ".join(parts) if parts else "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"

    def __str__(self):
        # üõ•Ô∏è –£–õ–£–ß–®–ï–ù–ù–û–ï –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ –¥–ª—è –ª–æ–¥–æ–∫
        product_name = self.product.product_name if self.product else "–£–¥–∞–ª–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä"
        dimensions = self.get_product_dimensions()

        if dimensions:
            # –î–ª—è –ª–æ–¥–æ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
            return f"üõ•Ô∏è {product_name} ({dimensions}) x {self.quantity}"
        else:
            # –î–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –æ–±—ã—á–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            return f"üöó {product_name} x {self.quantity}"

    class Meta:
        verbose_name = "–¢–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ"
        verbose_name_plural = "–¢–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ"


class Order(BaseModel):
    """üì¶ –ó–∞–∫–∞–∑ (–∞–Ω–æ–Ω–∏–º–Ω—ã–π)"""
    # üÜï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω (–∞–Ω–æ–Ω–∏–º–Ω—ã–µ –∑–∞–∫–∞–∑—ã)
    user = models.ForeignKey(User, on_delete=models.SET_NULL, related_name="orders", null=True, blank=True)

    # üìù –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø)
    customer_name = models.CharField(max_length=100, verbose_name="–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞")
    customer_phone = models.CharField(max_length=20, verbose_name="–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω")
    customer_email = models.EmailField(verbose_name="Email –∫–ª–∏–µ–Ω—Ç–∞")
    customer_city = models.CharField(max_length=100, verbose_name="–ì–æ—Ä–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞")

    # üöö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ
    delivery_method = models.CharField(
        max_length=20,
        choices=[
            ('pickup', '–°–∞–º–æ–≤—ã–≤–æ–∑'),
            ('europochta', '–ï–≤—Ä–æ–ø–æ—á—Ç–∞'),
            ('belpost', '–ë–µ–ª–ø–æ—á—Ç–∞'),
        ],
        default='pickup',
        verbose_name="–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏"
    )
    shipping_address = models.TextField(
        blank=True,
        null=True,
        verbose_name="–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏"
    )

    # üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    order_total_price = models.DecimalField(max_digits=10, decimal_places=2, verbose_name="–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞")
    coupon = models.ForeignKey(Coupon, on_delete=models.SET_NULL, null=True, blank=True, verbose_name="–ö—É–ø–æ–Ω")
    grand_total = models.DecimalField(max_digits=10, decimal_places=2, verbose_name="–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ")

    # üîÑ –°—Ç–∞—Ç—É—Å—ã
    payment_status = models.CharField(
        max_length=20,
        choices=[
            ('pending', '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã'),
            ('paid', '–û–ø–ª–∞—á–µ–Ω'),
            ('cancelled', '–û—Ç–º–µ–Ω–µ–Ω'),
        ],
        default='pending',
        verbose_name="–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã"
    )

    # üìù –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    order_notes = models.TextField(blank=True, null=True, verbose_name="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∑–∞–∫–∞–∑—É")
    order_id = models.CharField(max_length=20, unique=True, verbose_name="–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞")
    order_date = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞")

    def save(self, *args, **kwargs):
        """üíæ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        if not self.order_id:
            import datetime
            now = datetime.datetime.now()
            self.order_id = f"ORD-{now.strftime('%Y%m%d')}-{now.strftime('%H%M%S')}"

        # üìû –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if self.user and not self.customer_phone:
            try:
                profile = self.user.profile
                if hasattr(profile, 'phone') and profile.phone:
                    self.customer_phone = profile.phone
            except:
                pass

        super().save(*args, **kwargs)

    class Meta:
        verbose_name = "–ó–∞–∫–∞–∑"
        verbose_name_plural = "–ó–∞–∫–∞–∑—ã"
        ordering = ['-order_date']


class OrderItem(BaseModel):
    """üìã –¢–æ–≤–∞—Ä –≤ –∑–∞–∫–∞–∑–µ"""
    order = models.ForeignKey(Order, on_delete=models.CASCADE, related_name="order_items")
    product = models.ForeignKey(Product, on_delete=models.SET_NULL, null=True)
    kit_variant = models.ForeignKey(KitVariant, on_delete=models.SET_NULL, null=True, blank=True)
    carpet_color = models.ForeignKey(Color, on_delete=models.SET_NULL, null=True, blank=True,
                                     related_name="order_items_carpet")
    border_color = models.ForeignKey(Color, on_delete=models.SET_NULL, null=True, blank=True,
                                     related_name="order_items_border")
    quantity = models.PositiveIntegerField(default=1)
    product_price = models.DecimalField(max_digits=10, decimal_places=2, null=True)
    has_podpyatnik = models.BooleanField(default=False)

    def __str__(self):
        return f"{self.product.product_name} - {self.quantity}"

    def get_total_price(self):
        """üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞"""
        # üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ get_product_price –∏–∑ CartItem —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –ø–æ–ª–µ–π
        cart_item = CartItem(
            product=self.product,
            kit_variant=self.kit_variant,
            carpet_color=self.carpet_color,
            border_color=self.border_color,
            quantity=self.quantity,
            has_podpyatnik=self.has_podpyatnik
        )
        return cart_item.get_product_price()

    class Meta:
        verbose_name = "–¢–æ–≤–∞—Ä –≤ –∑–∞–∫–∞–∑–µ"
        verbose_name_plural = "–¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ"

# üîß –ö–õ–Æ–ß–ï–í–´–ï –î–û–ë–ê–í–õ–ï–ù–ò–Ø –í –≠–¢–û–ú –§–ê–ô–õ–ï:
#
# üõ•Ô∏è –ù–û–í–´–ï –ú–ï–¢–û–î–´ –í CartItem:
# ‚úÖ get_product_dimensions() - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –ª–æ–¥–∫–∏ (150√ó200 —Å–º)
# ‚úÖ get_product_description_info() - –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
# ‚úÖ get_short_description() - –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
# ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π __str__() —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ –ª–æ–¥–æ–∫
#
# üìù –†–ï–ó–£–õ–¨–¢–ê–¢:
# - –í –∫–æ—Ä–∑–∏–Ω–µ –¥–ª—è –ª–æ–¥–æ–∫ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è: "üìè –†–∞–∑–º–µ—Ä: 150√ó200 —Å–º"
# - –í –∫–æ—Ä–∑–∏–Ω–µ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è, —Ü–≤–µ—Ç–∞, –ø–æ–¥–ø—è—Ç–Ω–∏–∫
# - –í –∞–¥–º–∏–Ω–∫–µ: —É–ª—É—á—à–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏
# - –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏
#
# üéØ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –í –®–ê–ë–õ–û–ù–ï:
# {{ cart_item.get_product_dimensions }} - —Ä–∞–∑–º–µ—Ä—ã –ª–æ–¥–∫–∏
# {% for info in cart_item.get_product_description_info %} - –ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
#
# ‚ö†Ô∏è –í–ê–ñ–ù–û:
# –ü–æ—Å–ª–µ –∑–∞–º–µ–Ω—ã —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω –∫–æ—Ä–∑–∏–Ω—ã
# –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –ª–æ–¥–æ–∫!