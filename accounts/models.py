# üìÅ accounts/models.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –ë–ï–ó ColorVariant
# üö® –£–ë–†–ê–ù –ò–ú–ü–û–†–¢ ColorVariant –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ–ª—è

from django.db import models
from django.contrib.auth.models import User
from base.models import BaseModel
from products.models import Product, KitVariant, Coupon, Color
from django.conf import settings
import os
import uuid


class Profile(BaseModel):
    """üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name="profile")
    is_email_verified = models.BooleanField(default=False)
    email_token = models.CharField(max_length=100, null=True, blank=True)
    profile_image = models.ImageField(upload_to='profile', null=True, blank=True)
    bio = models.TextField(null=True, blank=True)

    def __str__(self):
        return self.user.username

    def get_cart_count(self):
        """üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        return CartItem.objects.filter(cart__is_paid=False, cart__user=self.user).count()

    def save(self, *args, **kwargs):
        """üíæ –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏"""
        if self.pk:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            try:
                old_profile = Profile.objects.get(pk=self.pk)
                if old_profile.profile_image and old_profile.profile_image != self.profile_image:
                    if old_profile.profile_image.path:
                        old_image_path = os.path.join(settings.MEDIA_ROOT, old_profile.profile_image.path)
                        if os.path.exists(old_image_path):
                            os.remove(old_image_path)
            except (Profile.DoesNotExist, ValueError, FileNotFoundError):
                pass

        super(Profile, self).save(*args, **kwargs)

    class Meta:
        verbose_name = "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        verbose_name_plural = "–ü—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"


class Cart(BaseModel):
    """üõí –ö–æ—Ä–∑–∏–Ω–∞ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)"""
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name="cart", null=True, blank=True)
    session_id = models.CharField(max_length=50, null=True, blank=True)  # üÜï –î–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    coupon = models.ForeignKey(Coupon, on_delete=models.SET_NULL, null=True, blank=True)
    is_paid = models.BooleanField(default=False)

    def get_cart_total(self):
        """üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã"""
        cart_items = self.cart_items.all()
        total_price = 0

        for cart_item in cart_items:
            total_price += cart_item.get_product_price()

        return total_price

    def get_cart_total_price_after_coupon(self):
        """üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º –∫—É–ø–æ–Ω–∞"""
        total = self.get_cart_total()

        if self.coupon and total >= self.coupon.minimum_amount:
            total -= self.coupon.discount_amount

        return total

    @classmethod
    def get_anonymous_cart(cls, request):
        """
        üõí –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É

        üÜï –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —Å–µ—Å—Å–∏—è–º–∏ (–±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
        """
        # üîë –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if not request.session.session_key:
            request.session.create()

        # üîç –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ —Å–µ—Å—Å–∏–∏
        cart, created = cls.objects.get_or_create(
            session_id=request.session.session_key,
            is_paid=False,
            defaults={'user': None}  # üö´ –ë–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        )

        return cart

    # üîÑ LEGACY –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    @classmethod
    def get_cart(cls, request):
        """üîÑ –£—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ get_anonymous_cart"""
        return cls.get_anonymous_cart(request)

    def __str__(self):
        if self.user:
            return f"–ö–æ—Ä–∑–∏–Ω–∞ {self.user.username}"
        return f"–ê–Ω–æ–Ω–∏–º–Ω–∞—è –∫–æ—Ä–∑–∏–Ω–∞ {self.session_id[:8]}..."

    class Meta:
        verbose_name = "–ö–æ—Ä–∑–∏–Ω–∞"
        verbose_name_plural = "–ö–æ—Ä–∑–∏–Ω—ã"


class CartItem(BaseModel):
    """üì¶ –¢–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    cart = models.ForeignKey(Cart, on_delete=models.CASCADE, related_name="cart_items")
    product = models.ForeignKey(Product, on_delete=models.SET_NULL, null=True, blank=True)
    # üóëÔ∏è –£–î–ê–õ–ï–ù–û: color_variant –ø–æ–ª–µ (ColorVariant –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    kit_variant = models.ForeignKey(KitVariant, on_delete=models.SET_NULL, null=True, blank=True)
    carpet_color = models.ForeignKey(Color, on_delete=models.SET_NULL, null=True, blank=True,
                                     related_name="cart_items_carpet")
    border_color = models.ForeignKey(Color, on_delete=models.SET_NULL, null=True, blank=True,
                                     related_name="cart_items_border")
    quantity = models.IntegerField(default=1)
    has_podpyatnik = models.BooleanField(default=False)

    def get_product_price(self):
        """üí∞ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –æ–ø—Ü–∏–π"""
        # üéØ –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –∑–∞ –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä
        base_price = self.product.price if self.product.price else 0

        # ‚ûï –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏
        if self.kit_variant:
            base_price += float(self.kit_variant.price_modifier)

        # ü¶∂ –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø—è—Ç–Ω–∏–∫–∞ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω
        if self.has_podpyatnik:
            podpyatnik_option = KitVariant.objects.filter(code='podpyatnik', is_option=True).first()
            if podpyatnik_option:
                base_price += float(podpyatnik_option.price_modifier)
            else:
                # üîÑ –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
                base_price += 20

        # ‚úñÔ∏è –£–º–Ω–æ–∂–∞–µ–º –ø–æ–ª–Ω—É—é —Ü–µ–Ω—É –µ–¥–∏–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        return base_price * self.quantity

    def __str__(self):
        return f"{self.product.product_name} x {self.quantity}"

    class Meta:
        verbose_name = "–¢–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ"
        verbose_name_plural = "–¢–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ"


class Order(BaseModel):
    """üì¶ –ó–∞–∫–∞–∑ (–∞–Ω–æ–Ω–∏–º–Ω—ã–π)"""
    # üÜï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω (–∞–Ω–æ–Ω–∏–º–Ω—ã–µ –∑–∞–∫–∞–∑—ã)
    user = models.ForeignKey(User, on_delete=models.SET_NULL, related_name="orders", null=True, blank=True)

    # üìù –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø)
    customer_name = models.CharField(max_length=100, verbose_name="–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞")
    customer_phone = models.CharField(max_length=20, verbose_name="–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω")
    customer_email = models.EmailField(verbose_name="Email –∫–ª–∏–µ–Ω—Ç–∞")
    customer_city = models.CharField(max_length=100, verbose_name="–ì–æ—Ä–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞")

    # üöö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ
    delivery_method = models.CharField(
        max_length=20,
        choices=[
            ('pickup', '–°–∞–º–æ–≤—ã–≤–æ–∑'),
            ('europochta', '–ï–≤—Ä–æ–ø–æ—á—Ç–∞ –ø–æ –ë–µ–ª–∞—Ä—É—Å–∏'),
            ('belpochta', '–ë–µ–ª–ø–æ—á—Ç–∞ –ø–æ –ë–µ–ª–∞—Ä—É—Å–∏'),
            ('yandex', '–Ø–Ω–¥–µ–∫—Å –∫—É—Ä—å–µ—Ä –ø–æ –ú–∏–Ω—Å–∫—É')
        ],
        default='pickup',
        verbose_name="–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏"
    )
    shipping_address = models.TextField(verbose_name="–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏", blank=True, null=True)
    order_notes = models.TextField(blank=True, null=True, verbose_name="–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –∫ –∑–∞–∫–∞–∑—É")

    # üì¶ –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –∑–∞–∫–∞–∑–∞
    order_id = models.CharField(max_length=100, unique=True)
    order_date = models.DateTimeField(auto_now_add=True)
    payment_status = models.CharField(max_length=100, default="–ù–æ–≤—ã–π")
    payment_mode = models.CharField(max_length=100, default="–û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏")
    order_total_price = models.DecimalField(max_digits=10, decimal_places=2)
    coupon = models.ForeignKey(Coupon, on_delete=models.SET_NULL, null=True, blank=True)
    grand_total = models.DecimalField(max_digits=10, decimal_places=2)

    # üìç –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
    tracking_code = models.CharField(max_length=50, blank=True, null=True, verbose_name="–ö–æ–¥ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")

    def __str__(self):
        return f"–ó–∞–∫–∞–∑ #{self.order_id} –æ—Ç {self.customer_name}"

    def get_delivery_method_display_custom(self):
        """üöö –ü–æ–ª—É—á–∏—Ç—å —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
        choices_dict = {
            'pickup': '–°–∞–º–æ–≤—ã–≤–æ–∑',
            'europochta': '–ï–≤—Ä–æ–ø–æ—á—Ç–∞ –ø–æ –ë–µ–ª–∞—Ä—É—Å–∏',
            'belpochta': '–ë–µ–ª–ø–æ—á—Ç–∞ –ø–æ –ë–µ–ª–∞—Ä—É—Å–∏',
            'yandex': '–Ø–Ω–¥–µ–∫—Å –∫—É—Ä—å–µ—Ä –ø–æ –ú–∏–Ω—Å–∫—É'
        }
        return choices_dict.get(self.delivery_method, self.delivery_method)

    def save(self, *args, **kwargs):
        """üíæ –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)"""
        if self.user and not self.customer_name:
            full_name = f"{self.user.first_name} {self.user.last_name}".strip()
            self.customer_name = full_name if full_name else self.user.username

        if self.user and not self.customer_email and self.user.email:
            self.customer_email = self.user.email

        if self.user and not self.customer_phone:
            # üì± –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                profile = self.user.profile
                if hasattr(profile, 'phone') and profile.phone:
                    self.customer_phone = profile.phone
            except:
                pass

        super().save(*args, **kwargs)

    class Meta:
        verbose_name = "–ó–∞–∫–∞–∑"
        verbose_name_plural = "–ó–∞–∫–∞–∑—ã"
        ordering = ['-order_date']


class OrderItem(BaseModel):
    """üìã –¢–æ–≤–∞—Ä –≤ –∑–∞–∫–∞–∑–µ"""
    order = models.ForeignKey(Order, on_delete=models.CASCADE, related_name="order_items")
    product = models.ForeignKey(Product, on_delete=models.SET_NULL, null=True)
    kit_variant = models.ForeignKey(KitVariant, on_delete=models.SET_NULL, null=True, blank=True)
    # üóëÔ∏è –£–î–ê–õ–ï–ù–û: color_variant –ø–æ–ª–µ (ColorVariant –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    carpet_color = models.ForeignKey(Color, on_delete=models.SET_NULL, null=True, blank=True,
                                     related_name="order_items_carpet")
    border_color = models.ForeignKey(Color, on_delete=models.SET_NULL, null=True, blank=True,
                                     related_name="order_items_border")
    quantity = models.PositiveIntegerField(default=1)
    product_price = models.DecimalField(max_digits=10, decimal_places=2, null=True)
    has_podpyatnik = models.BooleanField(default=False)

    def __str__(self):
        return f"{self.product.product_name} - {self.quantity}"

    def get_total_price(self):
        """üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞"""
        # üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ get_product_price –∏–∑ CartItem —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –ø–æ–ª–µ–π
        cart_item = CartItem(
            product=self.product,
            kit_variant=self.kit_variant,
            carpet_color=self.carpet_color,
            border_color=self.border_color,
            quantity=self.quantity,
            has_podpyatnik=self.has_podpyatnik
        )
        return cart_item.get_product_price()

    class Meta:
        verbose_name = "–¢–æ–≤–∞—Ä –≤ –∑–∞–∫–∞–∑–µ"
        verbose_name_plural = "–¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ"

# üóëÔ∏è –ò–ó–ú–ï–ù–ï–ù–ò–Ø:
# ‚úÖ –£–ë–†–ê–ù –∏–º–ø–æ—Ä—Ç ColorVariant –∏–∑ products.models
# ‚úÖ –£–î–ê–õ–ï–ù–û –ø–æ–ª–µ color_variant –∏–∑ CartItem
# ‚úÖ –£–î–ê–õ–ï–ù–û –ø–æ–ª–µ color_variant –∏–∑ OrderItem
# ‚úÖ –û–ë–ù–û–í–õ–ï–ù –º–µ—Ç–æ–¥ get_product_price() –≤ CartItem (—É–±—Ä–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ color_variant)