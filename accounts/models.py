# üìÅ accounts/models.py - –ü–û–õ–ù–ê–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
# üõ•Ô∏è –î–û–ë–ê–í–õ–ï–ù–û: –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –ª–æ–¥–æ–∫ –≤ –∫–æ—Ä–∑–∏–Ω–µ
# üö® –£–ë–†–ê–ù –ò–ú–ü–û–†–¢ ColorVariant –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ–ª—è

from django.db import models
from django.contrib.auth.models import User
from base.models import BaseModel
from products.models import Product, KitVariant, Coupon
from common.models import Color
from django.conf import settings
import os
import uuid


class Profile(BaseModel):
    """üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name="profile")
    is_email_verified = models.BooleanField(default=False)
    email_token = models.CharField(max_length=100, null=True, blank=True)
    profile_image = models.ImageField(upload_to='profile', null=True, blank=True)
    bio = models.TextField(null=True, blank=True)

    def __str__(self):
        return self.user.username

    def get_cart_count(self):
        """üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        return CartItem.objects.filter(cart__is_paid=False, cart__user=self.user).count()

    def save(self, *args, **kwargs):
        """üíæ –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏"""
        if self.pk:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            try:
                old_profile = Profile.objects.get(pk=self.pk)
                if old_profile.profile_image and old_profile.profile_image != self.profile_image:
                    if old_profile.profile_image.path:
                        old_image_path = os.path.join(settings.MEDIA_ROOT, old_profile.profile_image.path)
                        if os.path.exists(old_image_path):
                            os.remove(old_image_path)
            except (Profile.DoesNotExist, ValueError, FileNotFoundError):
                pass

        super(Profile, self).save(*args, **kwargs)

    class Meta:
        verbose_name = "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        verbose_name_plural = "–ü—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"


class Cart(BaseModel):
    """üõí –ö–æ—Ä–∑–∏–Ω–∞ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)"""
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name="cart", null=True, blank=True)
    session_id = models.CharField(max_length=50, null=True, blank=True)  # üÜï –î–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    coupon = models.ForeignKey(Coupon, on_delete=models.SET_NULL, null=True, blank=True)
    is_paid = models.BooleanField(default=False)

    def get_cart_total(self):
        """üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã"""
        cart_items = self.cart_items.all()
        total_price = 0

        for cart_item in cart_items:
            total_price += cart_item.get_product_price()

        return total_price

    def get_cart_total_price_after_coupon(self):
        """üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º –∫—É–ø–æ–Ω–∞"""
        total = self.get_cart_total()

        if self.coupon and total >= self.coupon.minimum_amount:
            total -= self.coupon.discount_amount

        return total

    @classmethod
    def get_anonymous_cart(cls, request):
        """
        üõí –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É

        üÜï –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —Å–µ—Å—Å–∏—è–º–∏ (–±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
        """
        # üîë –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if not request.session.session_key:
            request.session.create()

        # üîç –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ —Å–µ—Å—Å–∏–∏
        cart, created = cls.objects.get_or_create(
            session_id=request.session.session_key,
            is_paid=False,
            defaults={'user': None}  # üö´ –ë–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        )

        return cart

    # üîÑ LEGACY –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    @classmethod
    def get_cart(cls, request):
        """üîÑ –£—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ get_anonymous_cart"""
        return cls.get_anonymous_cart(request)

    def __str__(self):
        if self.user:
            return f"–ö–æ—Ä–∑–∏–Ω–∞ {self.user.username}"
        return f"–ê–Ω–æ–Ω–∏–º–Ω–∞—è –∫–æ—Ä–∑–∏–Ω–∞ {self.session_id[:8]}..."

    class Meta:
        verbose_name = "–ö–æ—Ä–∑–∏–Ω–∞"
        verbose_name_plural = "–ö–æ—Ä–∑–∏–Ω—ã"


from django.contrib.contenttypes.fields import GenericForeignKey
from django.contrib.contenttypes.models import ContentType
from boats.models import BoatProduct

class CartItem(BaseModel):
    """üì¶ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    cart = models.ForeignKey(Cart, on_delete=models.CASCADE, related_name="cart_items")

    # Generic FK –¥–ª—è —Å–≤—è–∑–∏ —Å –ª—é–±—ã–º —Ç–æ–≤–∞—Ä–æ–º
    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)
    object_id = models.UUIDField()
    product = GenericForeignKey('content_type', 'object_id')

    # –ü–æ–ª—è –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    kit_variant = models.ForeignKey(KitVariant, on_delete=models.SET_NULL, null=True, blank=True)
    carpet_color = models.ForeignKey(Color, on_delete=models.SET_NULL, null=True, blank=True,
                                     related_name="cart_items_carpet")
    border_color = models.ForeignKey(Color, on_delete=models.SET_NULL, null=True, blank=True,
                                     related_name="cart_items_border")
    quantity = models.IntegerField(default=1)
    has_podpyatnik = models.BooleanField(default=False)

    def get_product_price(self):
        """üí∞ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
        if not self.product:
            return 0

        # üöó –î–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        if isinstance(self.product, Product):
            base_price = float(self.product.price or 0)
            if self.kit_variant:
                base_price = float(self.product.get_product_price_by_kit(self.kit_variant.code))

            if self.has_podpyatnik:
                podpyatnik_option = KitVariant.objects.filter(code='podpyatnik', is_option=True).first()
                if podpyatnik_option:
                    base_price += float(podpyatnik_option.price_modifier)

            return base_price * self.quantity

        # üõ•Ô∏è –î–ª—è –ª–æ–¥–æ—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        elif isinstance(self.product, BoatProduct):
            base_price = float(self.product.price or 0)
            return base_price * self.quantity

        return 0

    def is_boat(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–æ–≤–∞—Ä –ª–æ–¥–∫–æ–π"""
        return isinstance(self.product, BoatProduct)

    def is_car(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–æ–≤–∞—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º"""
        return isinstance(self.product, Product)

    def get_image_url(self):
        """–ü–æ–ª—É—á–∞–µ—Ç URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞"""
        if self.product and hasattr(self.product, 'get_main_image_url'):
            return self.product.get_main_image_url()
        if self.product and hasattr(self.product, 'images') and self.product.images.first():
             return self.product.images.first().image.url
        return "/static/images/placeholder.png" # –ó–∞–≥–ª—É—à–∫–∞

    def get_product_url(self):
        """–ü–æ–ª—É—á–∞–µ—Ç URL –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞"""
        if self.product and hasattr(self.product, 'get_absolute_url'):
            return self.product.get_absolute_url()
        return "#"

    def get_product_dimensions(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –ª–æ–¥–æ—á–Ω—ã—Ö –∫–æ–≤—Ä–∏–∫–æ–≤"""
        if self.is_boat() and hasattr(self.product, 'get_mat_dimensions'):
            return self.product.get_mat_dimensions()
        return None

    def __str__(self):
        if not self.product:
            return f"–£–¥–∞–ª–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä x {self.quantity}"

        prefix = "üõ•Ô∏è" if self.is_boat() else "üöó"
        return f"{prefix} {self.product.product_name} x {self.quantity}"

    class Meta:
        verbose_name = "–¢–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ"
        verbose_name_plural = "–¢–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ"


class Order(BaseModel):
    """üì¶ –ó–∞–∫–∞–∑ (–∞–Ω–æ–Ω–∏–º–Ω—ã–π)"""
    user = models.ForeignKey(User, on_delete=models.SET_NULL, related_name="orders", null=True, blank=True)
    customer_name = models.CharField(max_length=100, verbose_name="–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞")
    customer_phone = models.CharField(max_length=20, verbose_name="–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω")
    customer_email = models.EmailField(verbose_name="Email –∫–ª–∏–µ–Ω—Ç–∞")
    customer_city = models.CharField(max_length=100, verbose_name="–ì–æ—Ä–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞")
    delivery_method = models.CharField(
        max_length=20,
        choices=[('pickup', 'üè™ –°–∞–º–æ–≤—ã–≤–æ–∑'), ('europochta', 'üì¶–ï–≤—Ä–æ–ø–æ—á—Ç–∞'), ('belpochta', 'üìÆ–ë–µ–ª–ø–æ—á—Ç–∞'), ('yandex', 'üöö –Ø–Ω–¥–µ–∫—Å –∫—É—Ä—å–µ—Ä –ø–æ –ú–∏–Ω—Å–∫—É')],
        default='pickup', verbose_name="–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏"
    )
    shipping_address = models.TextField(blank=True, null=True, verbose_name="–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏")
    order_total_price = models.DecimalField(max_digits=10, decimal_places=2, verbose_name="–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞")
    coupon = models.ForeignKey(Coupon, on_delete=models.SET_NULL, null=True, blank=True, verbose_name="–ö—É–ø–æ–Ω")
    grand_total = models.DecimalField(max_digits=10, decimal_places=2, verbose_name="–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ")
    payment_status = models.CharField(
        max_length=20,
        choices=[('pending', '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã'), ('paid', '–û–ø–ª–∞—á–µ–Ω'), ('cancelled', '–û—Ç–º–µ–Ω–µ–Ω')],
        default='pending', verbose_name="–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã"
    )
    payment_mode = models.CharField(max_length=20, choices=[('cash', '–ù–∞–ª–∏—á–Ω—ã–µ'), ('card', '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞')], default='cash')
    order_notes = models.TextField(blank=True, null=True, verbose_name="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∑–∞–∫–∞–∑—É")
    order_id = models.CharField(max_length=20, unique=True, verbose_name="–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞")
    order_date = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞")

    def save(self, *args, **kwargs):
        if not self.order_id:
            import datetime
            now = datetime.datetime.now()
            self.order_id = f"ORD-{now.strftime('%Y%m%d')}-{now.strftime('%H%M%S')}"
        super().save(*args, **kwargs)

    class Meta:
        verbose_name = "–ó–∞–∫–∞–∑"
        verbose_name_plural = "–ó–∞–∫–∞–∑—ã"
        ordering = ['-order_date']


class OrderItem(BaseModel):
    """üìã –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä –≤ –∑–∞–∫–∞–∑–µ"""
    order = models.ForeignKey(Order, on_delete=models.CASCADE, related_name="order_items")

    # Generic FK
    content_type = models.ForeignKey(ContentType, on_delete=models.SET_NULL, null=True)
    object_id = models.UUIDField(null=True)
    product = GenericForeignKey('content_type', 'object_id')

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    kit_variant = models.ForeignKey(KitVariant, on_delete=models.SET_NULL, null=True, blank=True)
    carpet_color = models.ForeignKey(Color, on_delete=models.SET_NULL, null=True, blank=True, related_name="order_items_carpet")
    border_color = models.ForeignKey(Color, on_delete=models.SET_NULL, null=True, blank=True, related_name="order_items_border")
    quantity = models.PositiveIntegerField(default=1)
    product_price = models.DecimalField(max_digits=10, decimal_places=2, null=True)
    has_podpyatnik = models.BooleanField(default=False)

    def __str__(self):
        product_name = self.product.product_name if self.product else "–£–¥–∞–ª–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä"
        return f"{product_name} - {self.quantity}"

    class Meta:
        verbose_name = "–¢–æ–≤–∞—Ä –≤ –∑–∞–∫–∞–∑–µ"
        verbose_name_plural = "–¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ"

# üîß –ö–õ–Æ–ß–ï–í–´–ï –î–û–ë–ê–í–õ–ï–ù–ò–Ø –í –≠–¢–û–ú –§–ê–ô–õ–ï:
#
# üõ•Ô∏è –ù–û–í–´–ï –ú–ï–¢–û–î–´ –í CartItem:
# ‚úÖ get_product_dimensions() - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –ª–æ–¥–∫–∏ (150√ó200 —Å–º)
# ‚úÖ get_product_description_info() - –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
# ‚úÖ get_short_description() - –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
# ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π __str__() —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ –ª–æ–¥–æ–∫
#
# üìù –†–ï–ó–£–õ–¨–¢–ê–¢:
# - –í –∫–æ—Ä–∑–∏–Ω–µ –¥–ª—è –ª–æ–¥–æ–∫ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è: "üìè –†–∞–∑–º–µ—Ä: 150√ó200 —Å–º"
# - –í –∫–æ—Ä–∑–∏–Ω–µ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è, —Ü–≤–µ—Ç–∞, –ø–æ–¥–ø—è—Ç–Ω–∏–∫
# - –í –∞–¥–º–∏–Ω–∫–µ: —É–ª—É—á—à–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏
# - –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏
#
# üéØ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –í –®–ê–ë–õ–û–ù–ï:
# {{ cart_item.get_product_dimensions }} - —Ä–∞–∑–º–µ—Ä—ã –ª–æ–¥–∫–∏
# {% for info in cart_item.get_product_description_info %} - –ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
#
# ‚ö†Ô∏è –í–ê–ñ–ù–û:
# –ü–æ—Å–ª–µ –∑–∞–º–µ–Ω—ã —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω –∫–æ—Ä–∑–∏–Ω—ã
# –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –ª–æ–¥–æ–∫!