# accounts/views.py
# üõí Django views –¥–ª—è e-commerce —Å Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ (–£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
# üìù –¢–æ–ª—å–∫–æ –∫–æ—Ä–∑–∏–Ω–∞ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

import os
import json
import uuid
import requests
import logging
from products.models import *
from django.urls import reverse
from django.conf import settings
from django.contrib import messages
from django.http import JsonResponse
from django.contrib.auth.models import User
from accounts.models import Cart, CartItem, Order, OrderItem
from django.views.decorators.http import require_POST
from django.http import HttpResponseRedirect, HttpResponse
from django.shortcuts import redirect, render, get_object_or_404

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)


def cart(request):
    """üõí –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã —Å —Ñ–æ—Ä–º–æ–π –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    cart_obj = None

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/—Å–µ—Å—Å–∏–∏
        cart_obj = Cart.get_cart(request)

    except Exception as e:
        messages.warning(request, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É.")
        return redirect('/')  # üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é –≤–º–µ—Å—Ç–æ 'index'

    if request.method == 'POST':
        coupon = request.POST.get('coupon')
        coupon_obj = Coupon.objects.filter(coupon_code__exact=coupon).first()

        if not coupon_obj:
            messages.warning(request, '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∫—É–ø–æ–Ω–∞.')
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

        if cart_obj and cart_obj.coupon:
            messages.warning(request, '–ö—É–ø–æ–Ω —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω.')
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

        if coupon_obj and coupon_obj.is_expired:
            messages.warning(request, '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫—É–ø–æ–Ω–∞ –∏—Å—Ç–µ–∫.')
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

        if cart_obj and coupon_obj and cart_obj.get_cart_total() < coupon_obj.minimum_amount:
            messages.warning(
                request, f'–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ {coupon_obj.minimum_amount}')
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

        if cart_obj and coupon_obj:
            cart_obj.coupon = coupon_obj
            cart_obj.save()
            messages.success(request, '–ö—É–ø–æ–Ω —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω.')
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

    # ‚úÖ –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–Ω–æ–Ω–∏–º–Ω—ã–µ –∑–∞–∫–∞–∑—ã)
    initial_data = {}

    context = {
        'cart': cart_obj,
        'quantity_range': range(1, 11),  # –î–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤
        'initial_data': initial_data
    }
    return render(request, 'accounts/cart.html', context)


@require_POST
def update_cart_item(request):
    """üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # üì• –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        data = json.loads(request.body)
        cart_item_id = data.get("cart_item_id")
        quantity = int(data.get("quantity"))

        # ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        if quantity <= 0:
            return JsonResponse({
                "success": False,
                "error": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0"
            }, status=400)

        if quantity > 99:  # üöß –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            return JsonResponse({
                "success": False,
                "error": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - 99 —à—Ç—É–∫"
            }, status=400)

        # üõí –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/—Å–µ—Å—Å–∏–∏
        cart = Cart.get_cart(request)

        # üîç –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –∫–æ—Ä–∑–∏–Ω—ã (—É–±—Ä–∞–ª–∏ –∏–∑–±—ã—Ç–æ—á–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ cart__is_paid=False)
        try:
            cart_item = CartItem.objects.get(uid=cart_item_id, cart=cart)
        except CartItem.DoesNotExist:
            return JsonResponse({
                "success": False,
                "error": "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ"
            }, status=404)

        # üíæ –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        cart_item.quantity = quantity
        cart_item.save()

        # üí∞ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞
        item_total_price = cart_item.get_product_price()

        # üí≥ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã
        cart_total = cart.get_cart_total()
        cart_total_after_coupon = cart.get_cart_total_price_after_coupon()

        # ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ü–û–õ–ù–´–ô –æ—Ç–≤–µ—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        return JsonResponse({
            "success": True,
            "cart_item_id": str(cart_item_id),  # üÜî ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã
            "item_price": float(item_total_price),  # üí∞ –ù–æ–≤–∞—è —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞
            "cart_total": float(cart_total),  # üõí –û–±—â–∞—è —Å—É–º–º–∞ –∫–æ—Ä–∑–∏–Ω—ã
            "cart_total_after_coupon": float(cart_total_after_coupon),  # üí≥ –°—É–º–º–∞ —Å –∫—É–ø–æ–Ω–æ–º
            "quantity": quantity  # üî¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        })

    except ValueError:
        # üö® –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤ —á–∏—Å–ª–æ
        return JsonResponse({
            "success": False,
            "error": "–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"
        }, status=400)

    except json.JSONDecodeError:
        # üö® –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
        return JsonResponse({
            "success": False,
            "error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö"
        }, status=400)

    except Exception as e:
        # üö® –û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã: {str(e)}")
        return JsonResponse({
            "success": False,
            "error": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã"
        }, status=500)


def remove_cart(request, uid):
    """üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/—Å–µ—Å—Å–∏–∏
        cart = Cart.get_cart(request)

        # –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∫–æ—Ä–∑–∏–Ω—ã
        cart_item = CartItem.objects.get(uid=uid, cart=cart)
        cart_item.delete()

        messages.success(request, '–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.')

    except Exception as e:
        print(e)
        messages.warning(request, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.')

    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))


def remove_coupon(request, cart_id):
    """üé´ –£–¥–∞–ª–µ–Ω–∏–µ –∫—É–ø–æ–Ω–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ—Ä–∑–∏–Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é/—Å–µ—Å—Å–∏–∏
    cart = Cart.get_cart(request)

    if str(cart.uid) != cart_id:
        messages.warning(request, '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ—Ä–∑–∏–Ω–µ.')
        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

    cart.coupon = None
    cart.save()

    messages.success(request, '–ö—É–ø–æ–Ω —É–¥–∞–ª–µ–Ω.')
    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))


def send_telegram_notification(order):
    """ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ –≤ Telegram"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ Django settings
        telegram_token = settings.TELEGRAM_BOT_TOKEN
        telegram_chat_id = settings.TELEGRAM_CHAT_ID

        # ‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if not telegram_token or not telegram_chat_id:
            logger.warning("‚ö†Ô∏è Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –î–æ–±–∞–≤—å—Ç–µ TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID –≤ .env")
            return

        # URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        url = f"https://api.telegram.org/bot{telegram_token}/sendMessage"

        # üìù –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        items_text = ""
        total_items = 0

        for item in OrderItem.objects.filter(order=order):
            total_items += item.quantity

            # üè∑Ô∏è –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å —ç–º–æ–¥–∑–∏
            product_name = item.product.product_name
            items_text += f"üöò <b>{product_name}</b>\n"

            # üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏
            if item.kit_variant:
                items_text += f"   üì¶ –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è: {item.kit_variant.name}\n"

            # üé® –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–≤–µ—Ç–∞—Ö
            if item.carpet_color:
                carpet_emoji = getattr(item.carpet_color, 'emoji', 'üé®')
                items_text += f"   {carpet_emoji} –ö–æ–≤—Ä–∏–∫: {item.carpet_color.name}\n"

            if item.border_color:
                border_emoji = getattr(item.border_color, 'emoji', 'üé®')
                items_text += f"   {border_emoji} –û–∫–∞–Ω—Ç–æ–≤–∫–∞: {item.border_color.name}\n"

            if item.has_podpyatnik:
                items_text += f"   üëû –° –ø–æ–¥–ø—è—Ç–Ω–∏–∫–æ–º\n"

            # üî¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —Ä–∞—Å—á–µ—Ç —Ü–µ–Ω—ã –∑–∞ –µ–¥–∏–Ω–∏—Ü—É –∏ –æ–±—â–µ–π —Å—É–º–º—ã
            total_item_price = float(item.product_price)  # –û–±—â–∞—è —Ü–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏–∏
            unit_price = total_item_price / item.quantity  # –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É

            items_text += f"   üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{item.quantity} —à—Ç. √ó {unit_price:.2f} BYN</b>\n"
            items_text += f"   üíµ –°—É–º–º–∞: <b>{total_item_price:.2f} BYN</b>\n\n"

        # üöö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ
        delivery_info = ""
        if hasattr(order, 'delivery_method') and order.delivery_method:
            delivery_methods = {
                'europochta': 'üì¶ –ï–≤—Ä–æ–ø–æ—á—Ç–∞ –ø–æ –ë–µ–ª–∞—Ä—É—Å–∏',
                'belpochta': 'üìÆ –ë–µ–ª–ø–æ—á—Ç–∞ –ø–æ –ë–µ–ª–∞—Ä—É—Å–∏',
                'yandex': ' üöï –Ø–Ω–¥–µ–∫—Å –∫—É—Ä—å–µ—Ä –ø–æ –ú–∏–Ω—Å–∫—É',
                'pickup': 'üè™ –°–∞–º–æ–≤—ã–≤–æ–∑'
            }
            delivery_info = delivery_methods.get(order.delivery_method, order.delivery_method)
        # üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
        address_info = "üè™ –°–∞–º–æ–≤—ã–≤–æ–∑"
        if order.shipping_address:
            address_info = f"üìç {order.shipping_address}"

        # üîÑ –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        html_message = f"""<b>üõçÔ∏è –ù–û–í–´–ô –ó–ê–ö–ê–ó #{order.order_id}</b>

<b>üë§ –ö–ª–∏–µ–Ω—Ç:</b> {order.customer_name}
<b>üì± –¢–µ–ª–µ—Ñ–æ–Ω:</b> {order.customer_phone}

{f"<b>üöö –î–æ—Å—Ç–∞–≤–∫–∞:</b> {delivery_info}" if delivery_info else ""}
<b>{address_info}</b>

<b>üì¶ –¢–û–í–ê–†–´ ({total_items} —à—Ç.):</b>
{items_text}<b>üí∞ –ò–¢–û–ì–û: {order.grand_total} BYN</b>

{f"<b>üí¨ –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> {order.order_notes}" if order.order_notes else ""}

<b>‚è∞ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω:</b> {order.order_date.strftime('%d.%m.%Y –≤ %H:%M')}
"""

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        params = {
            "chat_id": telegram_chat_id,
            "text": html_message,
            "parse_mode": "HTML"
        }

        # üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
        response = requests.post(url, params=params, timeout=15)

        logger.info(f"üì° Telegram API –æ—Ç–≤–µ—Ç: —Å—Ç–∞—Ç—É—Å {response.status_code}")

        if response.status_code == 200:
            response_data = response.json()
            if response_data.get("ok"):
                message_id = response_data.get("result", {}).get("message_id")
                logger.info(f"‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (ID —Å–æ–æ–±—â–µ–Ω–∏—è: {message_id})")
            else:
                error_desc = response_data.get("description", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API")
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {error_desc}")
                raise Exception(f"Telegram API: {error_desc}")
        else:
            logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code} - {response.text}")
            raise Exception(f"HTTP {response.status_code}: {response.text}")

    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {str(e)}")
        # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π


def send_order_notification(order):
    """ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ –¢–û–õ–¨–ö–û –≤ Telegram"""
    try:
        send_telegram_notification(order)
        logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ #{order.order_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ #{order.order_id}: {str(e)}")


def place_order(request):
    """üõí –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

    print("üîç –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–∫–∞–∑–∞...")

    if request.method != 'POST':
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞")
        return redirect('cart')

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–µ—Å—Å–∏–∏
        cart = Cart.get_cart(request)
        print(f"üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—É—á–µ–Ω–∞: {cart.uid}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
        if not cart.cart_items.exists():
            print("‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
            messages.warning(request, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞.")
            return redirect('/')

        # üìù –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
        customer_name = request.POST.get('customer_name', '').strip()
        customer_phone = request.POST.get('customer_phone', '').strip()
        customer_city = request.POST.get('customer_city', '').strip()
        need_delivery = request.POST.get('need_delivery') == 'on'
        terms_agree = request.POST.get('terms_agree') == 'on'
        order_notes = request.POST.get('order_notes', '').strip()

        # üöö –ü–æ–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏
        delivery_method = 'pickup'
        shipping_address = ''

        if need_delivery:
            delivery_method = request.POST.get('delivery_method', 'europochta')
            shipping_address = request.POST.get('shipping_address', '').strip()

        # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        missing_fields = []
        if not customer_name:
            missing_fields.append('–ò–º—è')
        if not customer_phone:
            missing_fields.append('–¢–µ–ª–µ—Ñ–æ–Ω')
        if not customer_city:
            missing_fields.append('–ì–æ—Ä–æ–¥')
        if not terms_agree:
            missing_fields.append('–°–æ–≥–ª–∞—Å–∏–µ —Å —É—Å–ª–æ–≤–∏—è–º–∏')

        if need_delivery and not shipping_address:
            missing_fields.append('–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏')

        if missing_fields:
            error_msg = f"–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {', '.join(missing_fields)}"
            print(f"‚ùå {error_msg}")
            messages.error(request, error_msg)
            return redirect('cart')

        # üí∞ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
        order_total = cart.get_cart_total()
        grand_total = cart.get_cart_total_price_after_coupon()

        # üÜî –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ë–õ–û–ö: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
        from datetime import datetime

        # üìä –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º count() –≤–º–µ—Å—Ç–æ Max('id')
        existing_orders_count = Order.objects.count()
        next_number = existing_orders_count + 1

        # üìÖ –î–∞—Ç–∞ –î–î–ú–ú
        today = datetime.now()
        date_part = today.strftime("%d%m%y")

        # üèôÔ∏è –ì–æ—Ä–æ–¥ (–≤—Å–µ–≥–¥–∞ –∏–∑ –ø–æ–ª—è)
        city_part = customer_city.strip().title() if customer_city else "–ì–æ—Ä–æ–¥"

        # üî¢ –°–æ–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä: 001-2007-–ú–∏–Ω—Å–∫
        order_id = f"{next_number:03d}-{date_part}-{city_part}"

        print(f"üÜî –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_id}")

        # üì¶ –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        order = Order.objects.create(
            user=None,
            customer_name=customer_name,
            customer_phone=customer_phone,
            customer_email="",
            customer_city=customer_city,
            delivery_method=delivery_method,
            shipping_address=shipping_address,
            order_notes=order_notes,
            order_id=order_id,  # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
            payment_status="–ù–æ–≤—ã–π",
            order_total_price=order_total,
            coupon=cart.coupon,
            grand_total=grand_total
        )

        print(f"‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω –≤ –ë–î: {order.pk}")

        # üìã –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–∫–∞–∑–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        cart_items = cart.cart_items.all()
        created_items = 0

        for cart_item in cart_items:
            OrderItem.objects.create(
                order=order,
                product=cart_item.product,
                kit_variant=cart_item.kit_variant,
                carpet_color=cart_item.carpet_color,
                border_color=cart_item.border_color,
                has_podpyatnik=cart_item.has_podpyatnik,
                quantity=cart_item.quantity,
                product_price=cart_item.get_product_price(),
            )
            created_items += 1

        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞–∫–∞–∑–∞: {created_items}")

        # üîí –û—Ç–º–µ—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—É—é
        cart.is_paid = True
        cart.save()

        # üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        try:
            send_order_notification(order)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

        # ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        delivery_text = "—Å –¥–æ—Å—Ç–∞–≤–∫–æ–π" if need_delivery else "—Å–∞–º–æ–≤—ã–≤–æ–∑"
        success_msg = f"üéâ –ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω ({delivery_text})! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        messages.success(request, success_msg)

        # üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
        return redirect('success', order_id=order_id)

    except Exception as e:
        # üö® –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        error_msg = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {str(e)}"
        print(f"‚ùå –û–®–ò–ë–ö–ê: {error_msg}")
        messages.error(request,
                       "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
        return redirect('cart')


def success(request, order_id=None):
    """üì¶ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    # –ï—Å–ª–∏ order_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not order_id:
        context = {
            'order': None,
            'order_id': None
        }
        return render(request, 'payment_success/payment_success.html', context)

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ (–º–æ–∂–µ—Ç –±—ã—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–º)
    order = get_object_or_404(Order, order_id=order_id)

    context = {
        'order': order,
        'order_id': order_id
    }
    return render(request, 'payment_success/payment_success.html', context)


def check_cart_item(request, product_id):
    """‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ (AJAX)"""
    if request.method == 'GET':
        try:
            cart = Cart.get_cart(request)
            product = get_object_or_404(Product, uid=product_id)
            in_cart = CartItem.objects.filter(cart=cart, product=product).exists()

            return JsonResponse({'in_cart': in_cart})
        except Exception as e:
            return JsonResponse({'error': str(e)}, status=400)

    return JsonResponse({'error': 'Invalid request method'}, status=405)