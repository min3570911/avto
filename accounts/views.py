# accounts/views.py
# üõí Django views –¥–ª—è e-commerce —Å Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ (–ë–ï–ó EMAIL)

import os
import json
import uuid
import requests
import logging
from products.models import *
from django.urls import reverse
from django.conf import settings
from django.contrib import messages
from django.http import JsonResponse
from home.models import ShippingAddress
from django.contrib.auth.models import User
from django.template.loader import get_template
from accounts.models import Profile, Cart, CartItem, Order, OrderItem
from base.emails import send_account_activation_email
from django.views.decorators.http import require_POST
from django.contrib.auth import update_session_auth_hash
from django.contrib.auth.decorators import login_required
from django.http import HttpResponseRedirect, HttpResponse
from django.contrib.auth import authenticate, login, logout
from django.utils.http import url_has_allowed_host_and_scheme
from django.shortcuts import redirect, render, get_object_or_404
from accounts.forms import UserUpdateForm, UserProfileForm, ShippingAddressForm, CustomPasswordChangeForm

# –ò–º–ø–æ—Ä—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF
try:
    from xhtml2pdf import pisa

    PDF_ENABLED = True
except ImportError:
    PDF_ENABLED = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)


def login_page(request):
    next_url = request.GET.get('next')  # Get the next URL from the query parameter
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        user_obj = User.objects.filter(username=username)

        if not user_obj.exists():
            messages.warning(request, '–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!')
            return HttpResponseRedirect(request.path_info)

        if not user_obj[0].profile.is_email_verified:
            messages.error(request, '–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!')
            return HttpResponseRedirect(request.path_info)

        user_obj = authenticate(username=username, password=password)
        if user_obj:
            login(request, user_obj)
            messages.success(request, '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥.')

            # Check if the next URL is safe
            if url_has_allowed_host_and_scheme(url=next_url, allowed_hosts=request.get_host()):
                return redirect(next_url)
            else:
                return redirect('index')

        messages.warning(request, '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.')
        return HttpResponseRedirect(request.path_info)

    return render(request, 'accounts/login.html')


def register_page(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        first_name = request.POST.get('first_name')
        last_name = request.POST.get('last_name')
        email = request.POST.get('email')
        password = request.POST.get('password')

        user_obj = User.objects.filter(username=username, email=email)

        if user_obj.exists():
            messages.info(request, '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç!')
            return HttpResponseRedirect(request.path_info)

        user_obj = User.objects.create(
            username=username, first_name=first_name, last_name=last_name, email=email)
        user_obj.set_password(password)
        user_obj.save()

        profile = Profile.objects.get(user=user_obj)
        profile.email_token = str(uuid.uuid4())
        profile.save()

        send_account_activation_email(email, profile.email_token)
        messages.success(request, "–ù–∞ –≤–∞—à email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∏—Å—å–º–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        return HttpResponseRedirect(request.path_info)

    return render(request, 'accounts/register.html')


@login_required
def user_logout(request):
    logout(request)
    messages.warning(request, "–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    return redirect('index')


def activate_email_account(request, email_token):
    try:
        user = Profile.objects.get(email_token=email_token)
        user.is_email_verified = True
        user.save()
        messages.success(request, '–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω.')
        return redirect('login')
    except Exception as e:
        return HttpResponse('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω email.')


def cart(request):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã —Å —Ñ–æ—Ä–º–æ–π –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    cart_obj = None

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/—Å–µ—Å—Å–∏–∏
        cart_obj = Cart.get_cart(request)

    except Exception as e:
        messages.warning(request, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É.")
        return redirect(reverse('index'))

    if request.method == 'POST':
        coupon = request.POST.get('coupon')
        coupon_obj = Coupon.objects.filter(coupon_code__exact=coupon).first()

        if not coupon_obj:
            messages.warning(request, '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∫—É–ø–æ–Ω–∞.')
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

        if cart_obj and cart_obj.coupon:
            messages.warning(request, '–ö—É–ø–æ–Ω —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω.')
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

        if coupon_obj and coupon_obj.is_expired:
            messages.warning(request, '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫—É–ø–æ–Ω–∞ –∏—Å—Ç–µ–∫.')
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

        if cart_obj and coupon_obj and cart_obj.get_cart_total() < coupon_obj.minimum_amount:
            messages.warning(
                request, f'–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ {coupon_obj.minimum_amount}')
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

        if cart_obj and coupon_obj:
            cart_obj.coupon = coupon_obj
            cart_obj.save()
            messages.success(request, '–ö—É–ø–æ–Ω —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω.')
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

    # –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    initial_data = {}
    if request.user.is_authenticated:
        initial_data = {
            'customer_name': f"{request.user.first_name} {request.user.last_name}".strip(),
            'customer_email': request.user.email
        }

    context = {
        'cart': cart_obj,
        'quantity_range': range(1, 11),  # –î–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤
        'initial_data': initial_data
    }
    return render(request, 'accounts/cart.html', context)


@require_POST
def update_cart_item(request):
    try:
        data = json.loads(request.body)
        cart_item_id = data.get("cart_item_id")
        quantity = int(data.get("quantity"))

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/—Å–µ—Å—Å–∏–∏
        cart = Cart.get_cart(request)

        # –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –∫–æ—Ä–∑–∏–Ω—ã
        cart_item = CartItem.objects.get(uid=cart_item_id, cart=cart, cart__is_paid=False)
        cart_item.quantity = quantity
        cart_item.save()

        return JsonResponse({"success": True})
    except Exception as e:
        return JsonResponse({"success": False, "error": str(e)})


def remove_cart(request, uid):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/—Å–µ—Å—Å–∏–∏
        cart = Cart.get_cart(request)

        # –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∫–æ—Ä–∑–∏–Ω—ã
        cart_item = CartItem.objects.get(uid=uid, cart=cart)
        cart_item.delete()

        messages.success(request, '–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.')

    except Exception as e:
        print(e)
        messages.warning(request, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.')

    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))


def remove_coupon(request, cart_id):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ—Ä–∑–∏–Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é/—Å–µ—Å—Å–∏–∏
    cart = Cart.get_cart(request)

    if str(cart.uid) != cart_id:
        messages.warning(request, '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ—Ä–∑–∏–Ω–µ.')
        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

    cart.coupon = None
    cart.save()

    messages.success(request, '–ö—É–ø–æ–Ω —É–¥–∞–ª–µ–Ω.')
    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))


def send_telegram_notification(order):
    """
    ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ –≤ Telegram
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ Django settings
        telegram_token = settings.TELEGRAM_BOT_TOKEN
        telegram_chat_id = settings.TELEGRAM_CHAT_ID

        # ‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if not telegram_token or not telegram_chat_id:
            logger.warning("‚ö†Ô∏è Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –î–æ–±–∞–≤—å—Ç–µ TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID –≤ .env")
            return

        # URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        url = f"https://api.telegram.org/bot{telegram_token}/sendMessage"

        # üìù –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö
        items_text = ""
        total_items = 0

        for item in OrderItem.objects.filter(order=order):
            total_items += item.quantity

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏ —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            kit_info = f" ({item.kit_variant.name.replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace('`', '\\`')})" if item.kit_variant else ""

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–≤–µ—Ç–∞—Ö —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            color_info = ""
            if item.carpet_color:
                carpet_name = item.carpet_color.name.replace('_', '\\_').replace('*', '\\*').replace('[',
                                                                                                     '\\[').replace('`',
                                                                                                                    '\\`')
                color_info += f", –∫–æ–≤—Ä–∏–∫: {carpet_name}"
            if item.border_color:
                border_name = item.border_color.name.replace('_', '\\_').replace('*', '\\*').replace('[',
                                                                                                     '\\[').replace('`',
                                                                                                                    '\\`')
                color_info += f", –æ–∫–∞–Ω—Ç–æ–≤–∫–∞: {border_name}"
            if item.has_podpyatnik:
                color_info += ", —Å –ø–æ–¥–ø—è—Ç–Ω–∏–∫–æ–º"

            # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
            product_name = item.product.product_name.replace('_', '\\_').replace('*', '\\*').replace('[',
                                                                                                     '\\[').replace('`',
                                                                                                                    '\\`')

            items_text += f"‚Ä¢ {product_name}{kit_info}{color_info}\n"
            items_text += f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.quantity} —à—Ç. √ó {item.product_price} BYN\n\n"

        # üöö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ
        delivery_info = ""
        if hasattr(order, 'delivery_method') and order.delivery_method:
            delivery_methods = {
                'europochta': 'üì¶ –ï–≤—Ä–æ–ø–æ—á—Ç–∞ –ø–æ –ë–µ–ª–∞—Ä—É—Å–∏',
                'belpochta': 'üìÆ –ë–µ–ª–ø–æ—á—Ç–∞ –ø–æ –ë–µ–ª–∞—Ä—É—Å–∏',
                'yandex': 'üöö –Ø–Ω–¥–µ–∫—Å –∫—É—Ä—å–µ—Ä –ø–æ –ú–∏–Ω—Å–∫—É',
                'pickup': 'üè™ –°–∞–º–æ–≤—ã–≤–æ–∑'
            }
            delivery_info = delivery_methods.get(order.delivery_method, order.delivery_method)

        # üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (—Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
        address_info = "–°–∞–º–æ–≤—ã–≤–æ–∑"
        if order.shipping_address:
            address_info = order.shipping_address.replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace(
                '`', '\\`')

        # üìù –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –∏ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π
        customer_name = order.customer_name.replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace('`',
                                                                                                                '\\`') if order.customer_name else ""
        customer_email = order.customer_email.replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace('`',
                                                                                                                  '\\`') if order.customer_email else ""
        customer_phone = order.customer_phone.replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace('`',
                                                                                                                  '\\`') if order.customer_phone else ""
        order_notes = order.order_notes.replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace('`',
                                                                                                            '\\`') if order.order_notes else ""

        # üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–º–µ—Å—Ç–æ Markdown
        # –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ Markdown
        html_message = f"""<b>üõçÔ∏è –ù–û–í–´–ô –ó–ê–ö–ê–ó #{order.order_id}</b>

<b>üë§ –ö–ª–∏–µ–Ω—Ç:</b> {order.customer_name}
<b>üì± –¢–µ–ª–µ—Ñ–æ–Ω:</b> {order.customer_phone}
<b>üìß Email:</b> {order.customer_email}

{f"<b>üöö –î–æ—Å—Ç–∞–≤–∫–∞:</b> {delivery_info}" if delivery_info else ""}
<b>üìç –ê–¥—Ä–µ—Å:</b> {address_info}

<b>üì¶ –¢–æ–≤–∞—Ä—ã ({total_items} —à—Ç.):</b>
{items_text}<b>üí∞ –ò–¢–û–ì–û:</b> {order.grand_total} BYN

{f"<b>üí¨ –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> {order.order_notes}" if order.order_notes else ""}

<b>‚è∞ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω:</b> {order.order_date.strftime('%d.%m.%Y –≤ %H:%M')}
"""

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º HTML –≤–º–µ—Å—Ç–æ Markdown)
        params = {
            "chat_id": telegram_chat_id,
            "text": html_message,
            "parse_mode": "HTML"  # –ú–µ–Ω—è–µ–º —Ä–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ HTML
        }

        # üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
        response = requests.post(url, params=params, timeout=15)

        logger.info(f"üì° Telegram API –æ—Ç–≤–µ—Ç: —Å—Ç–∞—Ç—É—Å {response.status_code}")

        if response.status_code == 200:
            response_data = response.json()
            if response_data.get("ok"):
                message_id = response_data.get("result", {}).get("message_id")
                logger.info(f"‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (ID —Å–æ–æ–±—â–µ–Ω–∏—è: {message_id})")

                # üéâ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                send_telegram_buttons(order, telegram_token, telegram_chat_id)

            else:
                error_desc = response_data.get("description", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API")
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {error_desc}")
                raise Exception(f"Telegram API: {error_desc}")
        else:
            logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code} - {response.text}")
            raise Exception(f"HTTP {response.status_code}: {response.text}")

    except requests.exceptions.Timeout:
        logger.error("‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram")
        raise Exception("–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram")

    except requests.exceptions.RequestException as e:
        logger.error(f"üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {str(e)}")
        raise Exception(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}")

    except Exception as e:
        logger.error(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {str(e)}")
        raise


def send_telegram_buttons(order, bot_token, chat_id):
    """
    üîò –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    """
    try:
        url = f"https://api.telegram.org/bot{bot_token}/sendMessage"

        # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏
        keyboard = {
            "inline_keyboard": [
                [
                    {"text": "‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑", "callback_data": f"accept_{order.order_id}"},
                    {"text": "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", "callback_data": f"decline_{order.order_id}"}
                ],
                [
                    {"text": "üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å", "url": f"tel:{order.customer_phone.replace('+', '').replace(' ', '')}"},
                    {"text": "üí¨ WhatsApp",
                     "url": f"https://wa.me/{order.customer_phone.replace('+', '').replace(' ', '')}"}
                ]
            ]
        }

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –≤–º–µ—Å—Ç–æ Markdown –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        params = {
            "chat_id": chat_id,
            "text": f"<b>üéØ –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order.order_id}:</b>",
            "parse_mode": "HTML",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –≤–º–µ—Å—Ç–æ Markdown
            "reply_markup": json.dumps(keyboard)
        }

        response = requests.post(url, params=params, timeout=10)

        if response.status_code == 200 and response.json().get("ok"):
            logger.info(f"‚úÖ –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order.order_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏: {response.text}")

    except Exception as e:
        # –û—à–∏–±–∫–∞ –∫–Ω–æ–ø–æ–∫ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order.order_id}: {e}")


def send_order_notification(order):
    """ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ –¢–û–õ–¨–ö–û –≤ Telegram"""
    try:
        send_telegram_notification(order)
        logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ #{order.order_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ #{order.order_id}: {str(e)}")


def place_order(request):
    """üõí –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–û –ø–æ–¥ —Ç–µ–∫—É—â—É—é —Ñ–æ—Ä–º—É"""

    print("üîç –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–∫–∞–∑–∞...")  # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

    if request.method != 'POST':
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞")
        return redirect('cart')

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–µ—Å—Å–∏–∏
        cart = Cart.get_cart(request)
        print(f"üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—É—á–µ–Ω–∞: {cart.uid}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
        if not cart.cart_items.exists():
            print("‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
            messages.warning(request, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞.")
            return redirect('index')

        # üìù –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã (–ò–°–ü–†–ê–í–õ–ï–ù–û –ø–æ–¥ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É)
        customer_name = request.POST.get('customer_name', '').strip()
        customer_phone = request.POST.get('customer_phone', '').strip()
        customer_city = request.POST.get('customer_city', '').strip()  # üÜï –ù–û–í–û–ï –ü–û–õ–ï
        need_delivery = request.POST.get('need_delivery') == 'on'  # üÜï –ß–ï–ö–ë–û–ö–°
        terms_agree = request.POST.get('terms_agree') == 'on'  # üÜï –ß–ï–ö–ë–û–ö–°
        order_notes = request.POST.get('order_notes', '').strip()

        print(f"üìù –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:")
        print(f"  - customer_name: '{customer_name}'")
        print(f"  - customer_phone: '{customer_phone}'")
        print(f"  - customer_city: '{customer_city}'")
        print(f"  - need_delivery: {need_delivery}")
        print(f"  - terms_agree: {terms_agree}")

        # üöö –ü–æ–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞)
        delivery_method = 'pickup'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∞–º–æ–≤—ã–≤–æ–∑
        shipping_address = ''

        if need_delivery:
            delivery_method = request.POST.get('delivery_method', 'europochta')
            shipping_address = request.POST.get('shipping_address', '').strip()
            print(f"  - delivery_method: '{delivery_method}'")
            print(f"  - shipping_address: '{shipping_address}'")

        # üìß –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º email (—Ç–∞–∫ –∫–∞–∫ –≤ —Ñ–æ—Ä–º–µ –µ–≥–æ –Ω–µ—Ç)
        if request.user.is_authenticated and request.user.email:
            customer_email = request.user.email
        else:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π email –∏–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            phone_clean = customer_phone.replace('+', '').replace(' ', '').replace('-', '').replace('(', '').replace(
                ')', '')
            customer_email = f"order_{phone_clean}@temp.local"

        print(f"  - customer_email (—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω): '{customer_email}'")

        # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        missing_fields = []
        if not customer_name:
            missing_fields.append('–ò–º—è')
        if not customer_phone:
            missing_fields.append('–¢–µ–ª–µ—Ñ–æ–Ω')
        if not customer_city:
            missing_fields.append('–ì–æ—Ä–æ–¥')
        if not terms_agree:
            missing_fields.append('–°–æ–≥–ª–∞—Å–∏–µ —Å —É—Å–ª–æ–≤–∏—è–º–∏')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∞ –Ω—É–∂–Ω–∞
        if need_delivery and not shipping_address:
            missing_fields.append('–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏')

        if missing_fields:
            error_msg = f"–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {', '.join(missing_fields)}"
            print(f"‚ùå {error_msg}")
            messages.error(request, error_msg)
            return redirect('cart')

        # üí∞ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
        order_total = cart.get_cart_total()
        grand_total = cart.get_cart_total_price_after_coupon()
        print(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {order_total}, –∏—Ç–æ–≥–æ: {grand_total}")

        # üÜî –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞
        order_id = f"ORD-{uuid.uuid4().hex[:10].upper()}"
        print(f"üÜî ID –∑–∞–∫–∞–∑–∞: {order_id}")

        # üì¶ –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        order = Order.objects.create(
            user=request.user if request.user.is_authenticated else None,
            customer_name=customer_name,
            customer_phone=customer_phone,
            customer_email=customer_email,
            delivery_method=delivery_method,
            shipping_address=shipping_address,
            order_notes=order_notes,
            order_id=order_id,
            payment_status="–ù–æ–≤—ã–π",
            order_total_price=order_total,
            coupon=cart.coupon,
            grand_total=grand_total
        )

        print(f"‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω –≤ –ë–î: {order.pk}")

        # üìã –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–∫–∞–∑–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        cart_items = cart.cart_items.all()
        created_items = 0

        for cart_item in cart_items:
            OrderItem.objects.create(
                order=order,
                product=cart_item.product,
                kit_variant=cart_item.kit_variant,
                color_variant=cart_item.color_variant,
                carpet_color=cart_item.carpet_color,
                border_color=cart_item.border_color,
                has_podpyatnik=cart_item.has_podpyatnik,
                quantity=cart_item.quantity,
                product_price=cart_item.get_product_price(),
            )
            created_items += 1
            print(f"üì¶ –°–æ–∑–¥–∞–Ω —ç–ª–µ–º–µ–Ω—Ç –∑–∞–∫–∞–∑–∞: {cart_item.product.product_name}")

        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞–∫–∞–∑–∞: {created_items}")

        # üîí –û—Ç–º–µ—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—É—é
        cart.is_paid = True
        cart.save()
        print(f"üîí –ö–æ—Ä–∑–∏–Ω–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω–∞—è")

        # üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã)
        try:
            send_order_notification(order)
            print(f"üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

        # ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        delivery_text = "—Å –¥–æ—Å—Ç–∞–≤–∫–æ–π" if need_delivery else "—Å–∞–º–æ–≤—ã–≤–æ–∑"
        success_msg = f"üéâ –ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω ({delivery_text})! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        messages.success(request, success_msg)
        print(f"üéâ {success_msg}")

        # üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
        return redirect('success', order_id=order_id)

    except Exception as e:
        # üö® –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        error_msg = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {str(e)}"
        print(f"‚ùå –û–®–ò–ë–ö–ê: {error_msg}")
        print(f"‚ùå –¢—Ä–µ–π—Å–±–µ–∫: {e}")
        messages.error(request,
                       "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
        return redirect('cart')


def success(request, order_id=None):
    """üì¶ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    # –ï—Å–ª–∏ order_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not order_id:
        if request.user.is_authenticated:
            latest_order = Order.objects.filter(user=request.user).order_by('-created_at').first()
        else:
            # –î–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–∞
            session_id = request.session.session_key
            cart = Cart.objects.filter(session_id=session_id, is_paid=True).order_by('-created_at').first()
            latest_order = Order.objects.filter(cart=cart).first() if cart else None

        if latest_order:
            order_id = latest_order.order_id
        else:
            messages.warning(request, "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return redirect('index')

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
    order = get_object_or_404(Order, order_id=order_id)

    context = {
        'order': order,
        'order_id': order_id
    }
    return render(request, 'payment_success/payment_success.html', context)


@login_required
def profile_view(request, username):
    user_name = get_object_or_404(User, username=username)
    user = request.user
    profile = user.profile

    user_form = UserUpdateForm(instance=user)
    profile_form = UserProfileForm(instance=profile)

    if request.method == 'POST':
        user_form = UserUpdateForm(request.POST, instance=user)
        profile_form = UserProfileForm(request.POST, request.FILES, instance=profile)
        if user_form.is_valid() and profile_form.is_valid():
            user_form.save()
            profile_form.save()
            messages.success(request, '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!')
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

    context = {
        'user_name': user_name,
        'user_form': user_form,
        'profile_form': profile_form
    }

    return render(request, 'accounts/profile.html', context)


@login_required
def change_password(request):
    if request.method == 'POST':
        form = CustomPasswordChangeForm(request.user, request.POST)
        if form.is_valid():
            user = form.save()
            update_session_auth_hash(request, user)  # Important!
            messages.success(request, '–í–∞—à –ø–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!')
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
        else:
            messages.warning(request, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –Ω–∏–∂–µ.')
    else:
        form = CustomPasswordChangeForm(request.user)
        return render(request, 'accounts/change_password.html', {'form': form})


@login_required
def update_shipping_address(request):
    shipping_address = ShippingAddress.objects.filter(
        user=request.user, current_address=True).first()

    if request.method == 'POST':
        form = ShippingAddressForm(request.POST, instance=shipping_address)
        if form.is_valid():
            shipping_address = form.save(commit=False)
            shipping_address.user = request.user
            shipping_address.current_address = True
            shipping_address.save()

            messages.success(request, "–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω!")

            form = ShippingAddressForm()
        else:
            form = ShippingAddressForm(request.POST, instance=shipping_address)
    else:
        form = ShippingAddressForm(instance=shipping_address)

    return render(request, 'accounts/shipping_address_form.html', {'form': form})


# Order history view
@login_required
def order_history(request):
    orders = Order.objects.filter(user=request.user).order_by('-order_date')
    return render(request, 'accounts/order_history.html', {'orders': orders})


# Order Details view
@login_required
def order_details(request, order_id):
    order = get_object_or_404(Order, order_id=order_id, user=request.user)
    order_items = OrderItem.objects.filter(order=order)
    context = {
        'order': order,
        'order_items': order_items,
        'order_total_price': order.order_total_price,
        'coupon_discount': order.coupon.discount_amount if order.coupon else 0,
        'grand_total': order.grand_total
    }
    return render(request, 'accounts/order_details.html', context)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF
def render_to_pdf(template_src, context_dict={}):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF –∏–∑ HTML —à–∞–±–ª–æ–Ω–∞"""
    if not PDF_ENABLED:
        return HttpResponse("PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ xhtml2pdf.", status=400)

    template = get_template(template_src)
    html = template.render(context_dict)
    response = HttpResponse(content_type='application/pdf')
    response[
        'Content-Disposition'] = f'attachment; filename="invoice_{context_dict.get("order", {}).get("order_id", "order")}.pdf"'

    # –°–æ–∑–¥–∞–µ–º PDF
    pisa_status = pisa.CreatePDF(html, dest=response)

    # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    if pisa_status.err:
        return HttpResponse('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF', status=400)
    return response


# Download invoice view
@login_required
def download_invoice(request, order_id):
    order = Order.objects.filter(order_id=order_id).first()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø - —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –∞–¥–º–∏–Ω
    if request.user.is_authenticated:
        if not (order.user == request.user or request.user.is_staff):
            messages.error(request, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É.")
            return redirect('index')
    else:
        # –î–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –Ω—É–∂–µ–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω/—Ö—ç—à (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ)
        messages.error(request, "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫–∞–∑—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.")
        return redirect('login')

    order_items = order.order_items.all()

    context = {
        'order': order,
        'order_items': order_items,
    }

    return render_to_pdf('accounts/order_pdf_generate.html', context)


# Delete account feature
@login_required
def delete_account(request):
    if request.method == 'POST':
        user = request.user
        logout(request)
        user.delete()
        messages.success(request, "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
        return redirect('index')


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ (AJAX)
def check_cart_item(request, product_id):
    if request.method == 'GET':
        try:
            cart = Cart.get_cart(request)
            product = get_object_or_404(Product, uid=product_id)
            in_cart = CartItem.objects.filter(cart=cart, product=product).exists()

            return JsonResponse({'in_cart': in_cart})
        except Exception as e:
            return JsonResponse({'error': str(e)}, status=400)

    return JsonResponse({'error': 'Invalid request method'}, status=405)