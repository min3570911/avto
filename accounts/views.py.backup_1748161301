# üìÅ accounts/views.py - –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–ß–ò–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
# üõçÔ∏è –ü—Ä–æ—Å—Ç—ã–µ views –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ —Å –∞–Ω–æ–Ω–∏–º–Ω—ã–º–∏ –ø–æ–∫—É–ø–∫–∞–º–∏ –∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏

import json
import uuid
import requests
import logging
from products.models import *
from django.urls import reverse
from django.conf import settings
from django.contrib import messages
from django.http import JsonResponse
from accounts.models import Cart, CartItem, Order, OrderItem
from django.views.decorators.http import require_POST
from django.http import HttpResponseRedirect
from django.shortcuts import redirect, render, get_object_or_404

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)


# üóëÔ∏è –£–î–ê–õ–ï–ù–û: –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—Ö–æ–¥–∞/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# ‚ÑπÔ∏è –î–ª—è –∞–¥–º–∏–Ω–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Django –≤—Ö–æ–¥ –ø–æ –∞–¥—Ä–µ—Å—É /admin/


def cart(request):
    """üõí –ö–æ—Ä–∑–∏–Ω–∞ –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π"""
    cart_obj = None

    try:
        # üÜï –ü–æ–ª—É—á–∞–µ–º –∞–Ω–æ–Ω–∏–º–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É
        cart_obj = Cart.get_anonymous_cart(request)
    except Exception as e:
        messages.warning(request, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É.")
        return redirect(reverse('index'))

    if request.method == 'POST':
        # üé´ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—É–ø–æ–Ω–æ–≤
        coupon = request.POST.get('coupon')
        coupon_obj = Coupon.objects.filter(coupon_code__exact=coupon).first()

        if not coupon_obj:
            messages.warning(request, '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∫—É–ø–æ–Ω–∞.')
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

        if cart_obj and cart_obj.coupon:
            messages.warning(request, '–ö—É–ø–æ–Ω —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω.')
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

        if coupon_obj and coupon_obj.is_expired:
            messages.warning(request, '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫—É–ø–æ–Ω–∞ –∏—Å—Ç–µ–∫.')
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

        if cart_obj and coupon_obj and cart_obj.get_cart_total() < coupon_obj.minimum_amount:
            messages.warning(request, f'–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ {coupon_obj.minimum_amount}')
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

        if cart_obj and coupon_obj:
            cart_obj.coupon = coupon_obj
            cart_obj.save()
            messages.success(request, '–ö—É–ø–æ–Ω —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω.')
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

    context = {
        'cart': cart_obj,
        'quantity_range': range(1, 11),
    }
    return render(request, 'accounts/cart.html', context)


@require_POST
def update_cart_item(request):
    """üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    try:
        data = json.loads(request.body)
        cart_item_id = data.get("cart_item_id")
        quantity = int(data.get("quantity"))

        # üõí –ü–æ–ª—É—á–∞–µ–º –∞–Ω–æ–Ω–∏–º–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É
        cart = Cart.get_anonymous_cart(request)
        cart_item = CartItem.objects.get(uid=cart_item_id, cart=cart, cart__is_paid=False)
        cart_item.quantity = quantity
        cart_item.save()

        return JsonResponse({"success": True})
    except Exception as e:
        return JsonResponse({"success": False, "error": str(e)})


def remove_cart(request, uid):
    """üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
    try:
        cart = Cart.get_anonymous_cart(request)
        cart_item = CartItem.objects.get(uid=uid, cart=cart)
        cart_item.delete()
        messages.success(request, '–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.')
    except Exception as e:
        print(e)
        messages.warning(request, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.')

    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))


def remove_coupon(request, cart_id):
    """üé´ –£–¥–∞–ª–µ–Ω–∏–µ –∫—É–ø–æ–Ω–∞"""
    cart = Cart.get_anonymous_cart(request)

    if str(cart.uid) != cart_id:
        messages.warning(request, '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ—Ä–∑–∏–Ω–µ.')
        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

    cart.coupon = None
    cart.save()

    messages.success(request, '–ö—É–ø–æ–Ω —É–¥–∞–ª–µ–Ω.')
    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))


def send_telegram_notification(order):
    """
    ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ –≤ Telegram

    ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –∑–∞–∫–∞–∑–∞—Ö!
    """
    try:
        # üîß –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞
        telegram_token = getattr(settings, 'TELEGRAM_BOT_TOKEN', None)
        telegram_chat_id = getattr(settings, 'TELEGRAM_CHAT_ID', None)

        if not telegram_token or not telegram_chat_id:
            logger.error("‚ùå TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ settings.py!")
            return

        # üîó URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        url = f"https://api.telegram.org/bot{telegram_token}/sendMessage"

        # üìù –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        items_text = ""
        for item in OrderItem.objects.filter(order=order):
            # üé® –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
            variant_info = ""
            if item.kit_variant:
                variant_info += f", {item.kit_variant.name}"
            if item.carpet_color:
                variant_info += f", –∫–æ–≤—Ä–∏–∫: {item.carpet_color.name}"
            if item.border_color:
                variant_info += f", –æ–∫–∞–Ω—Ç–æ–≤–∫–∞: {item.border_color.name}"
            if item.has_podpyatnik:
                variant_info += f", —Å –ø–æ–¥–ø—è—Ç–Ω–∏–∫–æ–º"

            items_text += f"‚Ä¢ {item.product.product_name}{variant_info} x {item.quantity} = {item.product_price} BYN\n"

        # üöö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ
        delivery_info = ""
        if order.shipping_address:
            delivery_info = f"üöö *–î–æ—Å—Ç–∞–≤–∫–∞:* {order.get_delivery_method_display_custom()}\nüìç *–ê–¥—Ä–µ—Å:* {order.shipping_address}\n"
        else:
            delivery_info = f"üè™ *–°–∞–º–æ–≤—ã–≤–æ–∑*\n"

        # üí∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–∏–¥–∫–µ
        discount_info = ""
        if order.coupon:
            discount_info = f"üé´ *–ö—É–ø–æ–Ω:* {order.coupon.coupon_code} (-{order.coupon.discount_amount} BYN)\n"

        # üì± –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"""
üõçÔ∏è *–ù–û–í–´–ô –ó–ê–ö–ê–ó #{order.order_id}*

üë§ *–ö–ª–∏–µ–Ω—Ç:* {order.customer_name}
üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* {order.customer_phone}
üìß *Email:* {order.customer_email}
üèôÔ∏è *–ì–æ—Ä–æ–¥:* {order.customer_city}

{delivery_info}üìù *–¢–æ–≤–∞—Ä—ã:*
{items_text}
üí∞ *–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞:* {order.order_total_price} BYN
{discount_info}üíµ *–ò–¢–û–ì–û –ö –û–ü–õ–ê–¢–ï:* {order.grand_total} BYN

üóíÔ∏è *–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:* {order.order_notes or "–ù–µ—Ç"}

‚è∞ *–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞:* {order.order_date.strftime('%d.%m.%Y %H:%M')}

üîó *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:* /admin/accounts/order/{order.id}/change/
        """

        # üì§ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –∫ Telegram API
        params = {
            "chat_id": telegram_chat_id,
            "text": message,
            "parse_mode": "Markdown",
            "disable_web_page_preview": True
        }

        # üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        response = requests.post(url, params=params, timeout=10)

        # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if response.status_code == 200:
            response_data = response.json()
            if response_data.get("ok"):
                logger.info(f"‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ #{order.order_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.error(f"‚ùå Telegram API –æ—à–∏–±–∫–∞: {response_data}")
        else:
            logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {response.status_code} - {response.text}")

    except requests.exceptions.Timeout:
        logger.error(f"‚è∞ Timeout –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ #{order.order_id}")
    except requests.exceptions.ConnectionError:
        logger.error(f"üåê –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ #{order.order_id}")
    except requests.exceptions.RequestException as e:
        logger.error(f"üîó –û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞ –≤ Telegram: {str(e)}")
    except Exception as e:
        logger.error(f"üö® –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")


def place_order(request):
    """üì¶ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º"""

    if request.method != 'POST':
        return redirect('cart')

    try:
        # üõí –ü–æ–ª—É—á–∞–µ–º –∞–Ω–æ–Ω–∏–º–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É
        cart = Cart.get_anonymous_cart(request)

        # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
        if not cart.cart_items.exists():
            messages.warning(request, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞.")
            return redirect('index')

        # üìù –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
        customer_name = request.POST.get('customer_name', '').strip()
        customer_phone = request.POST.get('customer_phone', '').strip()
        customer_city = request.POST.get('customer_city', '').strip()
        need_delivery = request.POST.get('need_delivery') == 'on'
        terms_agree = request.POST.get('terms_agree') == 'on'
        order_notes = request.POST.get('order_notes', '').strip()

        # üöö –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏
        delivery_method = 'pickup'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∞–º–æ–≤—ã–≤–æ–∑
        shipping_address = ''

        if need_delivery:
            delivery_method = request.POST.get('delivery_method', 'europochta')
            shipping_address = request.POST.get('shipping_address', '').strip()

        # üìß –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º email –∏–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –Ω—É–∂–¥)
        phone_clean = customer_phone.replace('+', '').replace(' ', '').replace('-', '').replace('(', '').replace(')',
                                                                                                                 '')
        customer_email = f"order_{phone_clean}@temp.local"

        # ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        missing_fields = []
        if not customer_name:
            missing_fields.append('–ò–º—è')
        if not customer_phone:
            missing_fields.append('–¢–µ–ª–µ—Ñ–æ–Ω')
        if not customer_city:
            missing_fields.append('–ì–æ—Ä–æ–¥')
        if not terms_agree:
            missing_fields.append('–°–æ–≥–ª–∞—Å–∏–µ —Å —É—Å–ª–æ–≤–∏—è–º–∏')

        # üöö –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏
        if need_delivery and not shipping_address:
            missing_fields.append('–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏')

        if missing_fields:
            error_msg = f"–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {', '.join(missing_fields)}"
            messages.error(request, error_msg)
            return redirect('cart')

        # üí∞ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
        order_total = cart.get_cart_total()
        grand_total = cart.get_cart_total_price_after_coupon()

        # üÜî –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞
        order_id = f"ORD-{uuid.uuid4().hex[:10].upper()}"

        # üì¶ –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        order = Order.objects.create(
            user=None,  # üÜï –ê–Ω–æ–Ω–∏–º–Ω—ã–π –∑–∞–∫–∞–∑
            customer_name=customer_name,
            customer_phone=customer_phone,
            customer_email=customer_email,
            customer_city=customer_city,
            delivery_method=delivery_method,
            shipping_address=shipping_address,
            order_notes=order_notes,
            order_id=order_id,
            payment_status="–ù–æ–≤—ã–π",
            order_total_price=order_total,
            coupon=cart.coupon,
            grand_total=grand_total
        )

        # üìã –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–∫–∞–∑–∞
        for cart_item in cart.cart_items.all():
            OrderItem.objects.create(
                order=order,
                product=cart_item.product,
                kit_variant=cart_item.kit_variant,
                color_variant=cart_item.color_variant,
                carpet_color=cart_item.carpet_color,
                border_color=cart_item.border_color,
                has_podpyatnik=cart_item.has_podpyatnik,
                quantity=cart_item.quantity,
                product_price=cart_item.get_product_price(),
            )

        # üîí –û—Ç–º–µ—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—É—é
        cart.is_paid = True
        cart.save()

        # ü§ñ –û–¢–ü–†–ê–í–õ–Ø–ï–ú TELEGRAM –£–í–ï–î–û–ú–õ–ï–ù–ò–ï (–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û!)
        try:
            send_telegram_notification(order)
            logger.info(f"ü§ñ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ #{order_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
        except Exception as e:
            # ‚ö†Ô∏è –ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å Telegram
            logger.error(f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ #{order_id}: {str(e)}")

        # ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        delivery_text = "—Å –¥–æ—Å—Ç–∞–≤–∫–æ–π" if need_delivery else "—Å–∞–º–æ–≤—ã–≤–æ–∑"
        success_msg = f"üéâ –ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω ({delivery_text})! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        messages.success(request, success_msg)

        # üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —É—Å–ø–µ—Ö–∞
        return redirect('success', order_id=order_id)

    except Exception as e:
        # üö® –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
        error_msg = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {str(e)}"
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        messages.error(request,
                       "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
        return redirect('cart')


def success(request, order_id=None):
    """üì¶ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    if not order_id:
        messages.warning(request, "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return redirect('index')

    order = get_object_or_404(Order, order_id=order_id)

    context = {
        'order': order,
        'order_id': order_id
    }
    return render(request, 'payment_success/payment_success.html', context)


def check_cart_item(request, product_id):
    """üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ (AJAX)"""
    if request.method == 'GET':
        try:
            cart = Cart.get_anonymous_cart(request)
            product = get_object_or_404(Product, uid=product_id)
            in_cart = CartItem.objects.filter(cart=cart, product=product).exists()

            return JsonResponse({'in_cart': in_cart})
        except Exception as e:
            return JsonResponse({'error': str(e)}, status=400)

    return JsonResponse({'error': 'Invalid request method'}, status=405)

# üóëÔ∏è –ü–û–õ–ù–û–°–¢–¨–Æ –£–î–ê–õ–ï–ù–û:
# - login_page() - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é Django –∞–¥–º–∏–Ω–∫—É /admin/
# - register_page() - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞
# - user_logout() - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Django logout
# - activate_email_account() - –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è email –Ω–µ –Ω—É–∂–Ω–∞
# - profile_view() - –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω—É–∂–Ω—ã
# - change_password() - —Å–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –∞–¥–º–∏–Ω–∫–µ
# - update_shipping_address() - –∞–¥—Ä–µ—Å–∞ –≤ –∞–¥–º–∏–Ω–∫–µ
# - order_history() - –∏—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ –≤ –∞–¥–º–∏–Ω–∫–µ
# - order_details() - –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–æ–≤ –≤ –∞–¥–º–∏–Ω–∫–µ
# - download_invoice() - PDF –Ω–µ –Ω—É–∂–Ω—ã
# - delete_account() - —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –∞–¥–º–∏–Ω–∫–µ

# ‚úÖ –°–û–•–†–ê–ù–ï–ù–û:
# - –ê–Ω–æ–Ω–∏–º–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã –∏ –∑–∞–∫–∞–∑—ã
# - Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!)
# - –í—Å—è –ª–æ–≥–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞ –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π