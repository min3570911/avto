# üìÅ boats/admin.py - –ü–û–õ–ù–ê–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
# üõ•Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–¥–º–∏–Ω–∫–∞ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏
# ‚úÖ –£–ù–ò–§–ò–ö–ê–¶–ò–Ø: –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ ProductAdmin –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è BoatProduct

import os
import logging
from django import forms
from django.contrib import admin
from django.http import HttpResponseRedirect, HttpResponse
from django.shortcuts import render
from django.contrib import messages
from django.urls import path
from django.utils.html import format_html
from django.utils.safestring import mark_safe
from django.core.exceptions import ValidationError

from .models import BoatCategory, BoatProduct, BoatProductImage, BoatCatalogDescription

logger = logging.getLogger(__name__)


class BoatExcelImportForm(forms.Form):
    """üìä –§–æ—Ä–º–∞ –∏–º–ø–æ—Ä—Ç–∞ Excel –¥–ª—è –ª–æ–¥–æ–∫"""
    excel_file = forms.FileField(
        label="üìä Excel —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –ª–æ–¥–æ–∫",
        help_text="–§–æ—Ä–º–∞—Ç: .xlsx, .xls. –ö–æ–ª–æ–Ω–∫–∏: A-–ö–∞—Ç–µ–≥–æ—Ä–∏—è, B-–ù–∞–∑–≤–∞–Ω–∏–µ, C-–î–ª–∏–Ω–∞(—Å–º), D-–®–∏—Ä–∏–Ω–∞(—Å–º), E-–¶–µ–Ω–∞",
        widget=forms.FileInput(attrs={'accept': '.xlsx,.xls', 'class': 'form-control-file'})
    )
    images_zip = forms.FileField(
        label="üñºÔ∏è ZIP –∞—Ä—Ö–∏–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏",
        required=False,
        help_text="–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ. ZIP —Ñ–∞–π–ª —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –ª–æ–¥–æ–∫",
        widget=forms.FileInput(attrs={'accept': '.zip', 'class': 'form-control-file'})
    )


class BoatCategoryAdminForm(forms.ModelForm):
    """üìã –§–æ—Ä–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª–æ–¥–æ–∫ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""

    class Meta:
        model = BoatCategory
        fields = '__all__'

    def clean(self):
        """üîß –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        cleaned_data = super().clean()
        category_name = cleaned_data.get('category_name')

        if category_name and len(category_name) < 3:
            raise ValidationError("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞")

        return cleaned_data


class BoatProductImageInline(admin.TabularInline):
    """üñºÔ∏è –ò–Ω–ª–∞–π–Ω –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ª–æ–¥–æ—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π"""
    model = BoatProductImage
    extra = 1
    max_num = 10
    fields = ['image', 'alt_text', 'is_main', 'display_order', 'get_image_preview']
    readonly_fields = ['get_image_preview', 'created_at']

    def get_image_preview(self, obj):
        """üñºÔ∏è –ü—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∏–Ω–ª–∞–π–Ω–µ"""
        if obj.image:
            return format_html(
                '<img src="{}" style="width: 60px; height: 60px; object-fit: cover; border-radius: 5px;" />',
                obj.image.url
            )
        return "–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

    get_image_preview.short_description = "–ü—Ä–µ–≤—å—é"


@admin.register(BoatCategory)
class BoatCategoryAdmin(admin.ModelAdmin):
    """üõ•Ô∏è –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–¥–º–∏–Ω–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ª–æ–¥–æ–∫"""

    form = BoatCategoryAdminForm

    list_display = [
        'get_category_preview',
        'category_name',
        'get_products_count',
        'display_order',
        'created_at',
        'get_seo_status'
    ]

    list_display_links = ['get_category_preview', 'category_name']
    list_filter = ['created_at']
    search_fields = ['category_name', 'description', 'page_title', 'meta_title']
    list_editable = ['display_order']
    list_per_page = 25

    prepopulated_fields = {'slug': ('category_name',)}

    readonly_fields = [
        'created_at', 'updated_at', 'get_image_preview', 'get_meta_title_length',
        'get_meta_description_length', 'get_google_preview'
    ]

    fieldsets = (
        ('üõ•Ô∏è –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('category_name', 'slug', 'category_image', 'get_image_preview', 'display_order'),
            'description': 'üè∑Ô∏è –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª–æ–¥–æ–∫'
        }),
        ('üìù –ö–æ–Ω—Ç–µ–Ω—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', {
            'fields': ('description', 'additional_content'),
            'classes': ('wide',),
            'description': '‚úçÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (YouTube –≤–∏–¥–µ–æ)'
        }),
        ('üîç SEO-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏', {
            'fields': (
                'page_title',
                ('meta_title', 'get_meta_title_length'),
                ('meta_description', 'get_meta_description_length'),
                'get_google_preview'
            ),
            'description': 'üéØ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º'
        }),
        ('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è', {
            'fields': ('is_active',),
            'classes': ('collapse',),
            'description': 'üîß –í–∏–¥–∏–º–æ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
        }),
        ('üìÖ –°–ª—É–∂–µ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        })
    )

    actions = ['activate_categories', 'deactivate_categories', 'optimize_seo']

    def get_category_preview(self, obj):
        """üñºÔ∏è –ü—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        if obj.category_image:
            return format_html(
                '<img src="{}" style="width: 50px; height: 50px; object-fit: cover; border-radius: 5px; border: 2px solid #f39c12;" title="{}">',
                obj.category_image.url,
                obj.category_name
            )
        return "üì∑"

    get_category_preview.short_description = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"

    def get_products_count(self, obj):
        """üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        count = obj.get_products_count()
        if count > 0:
            return format_html(
                '<span style="color: green; font-weight: bold;">üì¶ {}</span>',
                count
            )
        return format_html('<span style="color: gray;">–ø—É—Å—Ç–æ</span>')

    get_products_count.short_description = "–¢–æ–≤–∞—Ä–æ–≤"

    def get_seo_status(self, obj):
        """üîç –°—Ç–∞—Ç—É—Å SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        seo_fields = [obj.page_title, obj.meta_title, obj.meta_description]
        filled_fields = sum(1 for field in seo_fields if field)

        if filled_fields >= 2:
            return format_html('<span style="color: green;">‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ</span>')
        elif filled_fields == 1:
            return format_html('<span style="color: orange;">‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ</span>')
        return format_html('<span style="color: red;">‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ</span>')

    get_seo_status.short_description = "SEO"

    def get_image_preview(self, obj):
        """üñºÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        if obj.category_image:
            return format_html(
                '<img src="{}" style="max-width: 200px; max-height: 150px; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);" />',
                obj.category_image.url
            )
        return "‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ"

    get_image_preview.short_description = "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

    def get_meta_title_length(self, obj):
        """üìè –î–ª–∏–Ω–∞ –º–µ—Ç–∞-–∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        if obj.meta_title:
            length = len(obj.meta_title)
            color = "green" if length <= 60 else "red"
            return format_html('<span style="color: {}; font-weight: bold;">{}/60</span>', color, length)
        return format_html('<span style="color: gray;">0/60</span>')

    get_meta_title_length.short_description = "–î–ª–∏–Ω–∞"

    def get_meta_description_length(self, obj):
        """üìè –î–ª–∏–Ω–∞ –º–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏—è"""
        if obj.meta_description:
            length = len(obj.meta_description)
            color = "green" if length <= 160 else "red"
            return format_html('<span style="color: {}; font-weight: bold;">{}/160</span>', color, length)
        return format_html('<span style="color: gray;">0/160</span>')

    get_meta_description_length.short_description = "–î–ª–∏–Ω–∞"

    def get_google_preview(self, obj):
        """üîç –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤ —Å—Ç–∏–ª–µ Google"""
        title = obj.meta_title or obj.page_title or obj.category_name
        description = obj.meta_description or "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ"

        return format_html(
            '<div style="border: 1px solid #dadce0; border-radius: 8px; padding: 12px; max-width: 500px; font-family: Arial, sans-serif; margin: 10px 0;">'
            '<div style="color: #1a0dab; font-size: 18px; line-height: 1.3; margin-bottom: 4px;">{}</div>'
            '<div style="color: #006621; font-size: 14px; margin-bottom: 4px;">https://–∞–≤—Ç–æ–∫–æ–≤—Ä–∏–∫.–±–∞–π/boats/{}/</div>'
            '<div style="color: #545454; font-size: 14px; line-height: 1.4;">{}</div>'
            '</div>',
            title,
            obj.slug or 'category-slug',
            description
        )

    get_google_preview.short_description = "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä Google"

    def activate_categories(self, request, queryset):
        """‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        updated = queryset.update(is_active=True)
        self.message_user(request, f"‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {updated}")

    def deactivate_categories(self, request, queryset):
        """‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        updated = queryset.update(is_active=False)
        self.message_user(request, f"‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {updated}")

    def optimize_seo(self, request, queryset):
        """üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"""
        optimized = 0
        for category in queryset:
            changed = False
            if not category.page_title:
                category.page_title = category.category_name
                changed = True
            if not category.meta_title:
                category.meta_title = f"–≠–í–ê –∫–æ–≤—Ä–∏–∫–∏ –¥–ª—è –ª–æ–¥–æ–∫ {category.category_name}"[:60]
                changed = True
            if not category.meta_description:
                category.meta_description = f"–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≠–í–ê –∫–æ–≤—Ä–∏–∫–∏ –¥–ª—è –ª–æ–¥–æ–∫ {category.category_name.lower()}. –ó–∞—â–∏—Ç–∞ –¥–Ω–∞ –ª–æ–¥–∫–∏, –≤—ã–±–æ—Ä —Ü–≤–µ—Ç–∞, –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ë–µ–ª–∞—Ä—É—Å–∏."[:160]
                changed = True
            if changed:
                category.save()
                optimized += 1
        self.message_user(request, f"üîç SEO –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è {optimized} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")

    activate_categories.short_description = "‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    deactivate_categories.short_description = "‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    optimize_seo.short_description = "üîç –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å SEO"


@admin.register(BoatProduct)
class BoatProductAdmin(admin.ModelAdmin):
    """üõ•Ô∏è –ü–û–õ–ù–ê–Ø –î–ï–¢–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –∞–¥–º–∏–Ω–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ª–æ–¥–æ–∫"""

    # üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    inlines = [BoatProductImageInline]

    list_display = [
        'get_main_image_preview',
        'product_name',
        'product_sku',
        'category',
        'get_price_display',
        'get_dimensions_badge',
        'has_main_image_status',
        'newest_product',
        'created_at'
    ]

    list_display_links = ['get_main_image_preview', 'product_name']

    list_filter = [
        'category',
        'newest_product',
        'created_at',
        'boat_mat_length',
        'boat_mat_width'
    ]

    search_fields = [
        'product_name',
        'product_sku',
        'product_desription',
        'boat_mat_length',
        'boat_mat_width'
    ]

    list_editable = ['newest_product']
    list_per_page = 25

    prepopulated_fields = {'slug': ('product_name',)}

    readonly_fields = [
        'product_sku',  # –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è
        'created_at',
        'updated_at',
        'get_main_image_large'
    ]

    # üìù –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ fieldsets
    fieldsets = (
        ('üõçÔ∏è –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('product_sku', 'product_name', 'slug', 'category', 'price')
        }),
        ('üõ•Ô∏è –†–∞–∑–º–µ—Ä—ã –ª–æ–¥–æ—á–Ω–æ–≥–æ –∫–æ–≤—Ä–∏–∫–∞', {
            'fields': ('boat_mat_length', 'boat_mat_width'),
            'description': 'üìè –†–∞–∑–º–µ—Ä—ã –∫–æ–≤—Ä–∏–∫–∞ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö –¥–ª—è –ª–æ–¥–∫–∏.',
        }),
        ('üìù –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', {
            'fields': ('product_desription',),
            'classes': ('wide',)
        }),
        ('üîç SEO-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏', {
            'fields': ('page_title', 'meta_description'),
            'classes': ('collapse',),
            'description': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º'
        }),
        ('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è', {
            'fields': ('newest_product',)
        }),
        ('üñºÔ∏è –ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', {
            'fields': ('get_main_image_large',),
            'classes': ('collapse',)
        }),
        ('üìä –°–ª—É–∂–µ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )

    # üéØ –ú–∞—Å—Å–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    actions = [
        'mark_as_new',
        'mark_as_regular',
        'set_first_image_as_main',
        'generate_missing_slugs',
        'optimize_boat_seo',
        'export_boats_excel'
    ]

    def get_main_image_preview(self, obj):
        """üñºÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        main_image = obj.images.filter(is_main=True).first()
        if main_image and main_image.image:
            return format_html(
                '<img src="{}" style="width: 60px; height: 60px; object-fit: cover; border-radius: 5px; border: 2px solid #f39c12;" title="{}">',
                main_image.image.url,
                obj.product_name
            )

        # –ï—Å–ª–∏ –Ω–µ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ
        first_image = obj.images.first()
        if first_image and first_image.image:
            return format_html(
                '<img src="{}" style="width: 60px; height: 60px; object-fit: cover; border-radius: 5px; border: 1px solid #ddd;" title="{}">',
                first_image.image.url,
                obj.product_name
            )

        return "üì∑"

    get_main_image_preview.short_description = "–§–æ—Ç–æ"

    def get_main_image_large(self, obj):
        """üñºÔ∏è –ë–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        main_image = obj.get_main_image()
        if main_image and main_image.image:
            return format_html(
                '<img src="{}" style="max-width: 300px; max-height: 300px; border-radius: 10px;" />',
                main_image.image.url
            )
        return "–ù–µ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

    get_main_image_large.short_description = "–ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"

    def get_price_display(self, obj):
        """üí∞ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        if obj.price:
            return format_html(
                '<span style="color: green; font-weight: bold;">üí∞ {} —Ä—É–±.</span>',
                f"{obj.price:,}".replace(',', ' ')
            )
        return format_html('<span style="color: gray;">–ù–µ —É–∫–∞–∑–∞–Ω–∞</span>')

    get_price_display.short_description = "–¶–µ–Ω–∞"
    get_price_display.admin_order_field = "price"

    def get_dimensions_badge(self, obj):
        """üìè –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –∫–æ–≤—Ä–∏–∫–∞"""
        if obj.boat_mat_length and obj.boat_mat_width:
            area = round(obj.boat_mat_length * obj.boat_mat_width / 10000, 2)
            return format_html(
                '<span style="background: #e3f2fd; padding: 2px 6px; border-radius: 3px; font-size: 12px;" title="–ü–ª–æ—â–∞–¥—å: {} –º¬≤">'
                'üìè {}√ó{}—Å–º'
                '</span>',
                area,
                obj.boat_mat_length,
                obj.boat_mat_width
            )
        elif obj.boat_mat_length:
            return format_html(
                '<span style="background: #fff3e0; padding: 2px 6px; border-radius: 3px; font-size: 12px;">'
                'üìè {}—Å–º (–¥–ª–∏–Ω–∞)'
                '</span>',
                obj.boat_mat_length
            )
        elif obj.boat_mat_width:
            return format_html(
                '<span style="background: #fff3e0; padding: 2px 6px; border-radius: 3px; font-size: 12px;">'
                'üìè {}—Å–º (—à–∏—Ä–∏–Ω–∞)'
                '</span>',
                obj.boat_mat_width
            )
        else:
            return format_html('<span style="color: orange;">‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω—ã</span>')

    get_dimensions_badge.short_description = "–†–∞–∑–º–µ—Ä—ã –∫–æ–≤—Ä–∏–∫–∞"
    get_dimensions_badge.admin_order_field = "boat_mat_length"

    def has_main_image_status(self, obj):
        """üñºÔ∏è –°—Ç–∞—Ç—É—Å –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if obj.images.filter(is_main=True).exists():
            return format_html('<span style="color: green;">‚úÖ –ï—Å—Ç—å</span>')
        elif obj.images.exists():
            return format_html('<span style="color: orange;">‚ö†Ô∏è –ù–µ –≤—ã–±—Ä–∞–Ω–æ</span>')
        return format_html('<span style="color: red;">‚ùå –ù–µ—Ç —Ñ–æ—Ç–æ</span>')

    has_main_image_status.short_description = "–ì–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ"

    # üéØ –ú–ê–°–°–û–í–´–ï –î–ï–ô–°–¢–í–ò–Ø

    def mark_as_new(self, request, queryset):
        """üÜï –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã"""
        updated = queryset.update(newest_product=True)
        self.message_user(request, f"üÜï –û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –Ω–æ–≤—ã–µ: {updated} —Ç–æ–≤–∞—Ä–æ–≤")

    def mark_as_regular(self, request, queryset):
        """üì¶ –£–±—Ä–∞—Ç—å –æ—Ç–º–µ—Ç–∫—É '–Ω–æ–≤—ã–π'"""
        updated = queryset.update(newest_product=False)
        self.message_user(request, f"üì¶ –£–±—Ä–∞–Ω–∞ –æ—Ç–º–µ—Ç–∫–∞ '–Ω–æ–≤—ã–π': {updated} —Ç–æ–≤–∞—Ä–æ–≤")

    def set_first_image_as_main(self, request, queryset):
        """üñºÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –∫–∞–∫ –≥–ª–∞–≤–Ω–æ–µ"""
        updated = 0
        for product in queryset:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –≥–ª–∞–≤–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            product.images.update(is_main=False)
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –∫–∞–∫ –≥–ª–∞–≤–Ω–æ–µ
            first_image = product.images.first()
            if first_image:
                first_image.is_main = True
                first_image.save()
                updated += 1

        self.message_user(request, f"üñºÔ∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ –¥–ª—è {updated} —Ç–æ–≤–∞—Ä–æ–≤")

    def generate_missing_slugs(self, request, queryset):
        """üîó –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ slug"""
        from django.utils.text import slugify
        updated = 0
        for product in queryset.filter(slug__isnull=True):
            product.slug = slugify(product.product_name, allow_unicode=True)
            product.save()
            updated += 1

        self.message_user(request, f"üîó –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ slug –¥–ª—è {updated} —Ç–æ–≤–∞—Ä–æ–≤")

    def optimize_boat_seo(self, request, queryset):
        """üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –ª–æ–¥–æ–∫"""
        optimized = 0
        for product in queryset:
            changed = False
            if not product.page_title:
                dimensions = f" {product.get_mat_dimensions()}" if product.boat_mat_length else ""
                product.page_title = f"üõ•Ô∏è {product.product_name}{dimensions} - –ö—É–ø–∏—Ç—å –ª–æ–¥–æ—á–Ω—ã–π –∫–æ–≤—Ä–∏–∫"
                changed = True

            if not product.meta_description:
                category_name = product.category.category_name
                dimensions_text = f" —Ä–∞–∑–º–µ—Ä–æ–º {product.get_mat_dimensions()}" if product.boat_mat_length else ""
                product.meta_description = f"–õ–æ–¥–æ—á–Ω—ã–π –∫–æ–≤—Ä–∏–∫ {product.product_name} –¥–ª—è {category_name}{dimensions_text}. EVA –º–∞—Ç–µ—Ä–∏–∞–ª, —Ç–æ—á–Ω—ã–µ –ª–µ–∫–∞–ª–∞. –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ë–µ–ª–∞—Ä—É—Å–∏."[
                                           :160]
                changed = True

            if changed:
                product.save()
                optimized += 1

        self.message_user(request, f"üîç SEO –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è {optimized} —Ç–æ–≤–∞—Ä–æ–≤")

    def export_boats_excel(self, request, queryset):
        """üìä –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–¥–æ–∫ –≤ Excel"""
        try:
            import openpyxl
            from django.http import HttpResponse
            from datetime import datetime

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–∏–≥—É Excel
            wb = openpyxl.Workbook()
            ws = wb.active
            ws.title = "–õ–æ–¥–æ—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã"

            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            headers = [
                '–ê—Ä—Ç–∏–∫—É–ª', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–¶–µ–Ω–∞',
                '–î–ª–∏–Ω–∞ (—Å–º)', '–®–∏—Ä–∏–Ω–∞ (—Å–º)', '–ü–ª–æ—â–∞–¥—å (–º¬≤)',
                '–ù–æ–≤–∏–Ω–∫–∞', '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', 'URL'
            ]

            for col, header in enumerate(headers, 1):
                ws.cell(row=1, column=col, value=header)

            # –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤
            for row, product in enumerate(queryset, 2):
                area = ""
                if product.boat_mat_length and product.boat_mat_width:
                    area = round(product.boat_mat_length * product.boat_mat_width / 10000, 2)

                ws.cell(row=row, column=1, value=product.product_sku or "")
                ws.cell(row=row, column=2, value=product.product_name)
                ws.cell(row=row, column=3, value=product.category.category_name)
                ws.cell(row=row, column=4, value=product.price or 0)
                ws.cell(row=row, column=5, value=product.boat_mat_length or "")
                ws.cell(row=row, column=6, value=product.boat_mat_width or "")
                ws.cell(row=row, column=7, value=area)
                ws.cell(row=row, column=8, value="–î–∞" if product.newest_product else "–ù–µ—Ç")
                ws.cell(row=row, column=9, value=product.created_at.strftime("%d.%m.%Y"))
                ws.cell(row=row, column=10, value=f"/boats/{product.slug}/")

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–≤–µ—Ç–∞
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"boats_export_{timestamp}.xlsx"

            response = HttpResponse(
                content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
            )
            response['Content-Disposition'] = f'attachment; filename="{filename}"'

            wb.save(response)
            return response

        except ImportError:
            self.message_user(request, "‚ùå –î–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å openpyxl: pip install openpyxl",
                              level=messages.ERROR)
        except Exception as e:
            self.message_user(request, f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}", level=messages.ERROR)

    # –ü–æ–¥–ø–∏—Å–∏ –¥–ª—è actions
    mark_as_new.short_description = "üÜï –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã"
    mark_as_regular.short_description = "üì¶ –£–±—Ä–∞—Ç—å –æ—Ç–º–µ—Ç–∫—É '–Ω–æ–≤—ã–π'"
    set_first_image_as_main.short_description = "üñºÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –∫–∞–∫ –≥–ª–∞–≤–Ω–æ–µ"
    generate_missing_slugs.short_description = "üîó –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ slug"
    optimize_boat_seo.short_description = "üîç –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å SEO"
    export_boats_excel.short_description = "üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel"

    # üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ URL –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
    def get_urls(self):
        urls = super().get_urls()
        custom_urls = [
            path(
                'import-boats/',
                self.admin_site.admin_view(self.import_boats_view),
                name='boats_boatproduct_import'
            ),
        ]
        return custom_urls + urls

    def import_boats_view(self, request):
        """üìä –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–º–ø–æ—Ä—Ç–∞ Excel –¥–ª—è –ª–æ–¥–æ–∫"""
        if request.method == 'POST':
            form = BoatExcelImportForm(request.POST, request.FILES)
            if form.is_valid():
                return self._process_boats_import(request, form)
        else:
            form = BoatExcelImportForm()

        context = {
            'form': form,
            'title': 'üìä –ò–º–ø–æ—Ä—Ç –ª–æ–¥–æ–∫ –∏–∑ Excel',
            'subtitle': '–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Ç–æ–≤–∞—Ä–æ–≤ –ª–æ–¥–æ–∫',
            'opts': self.model._meta,
            'app_label': self.model._meta.app_label,
            'has_change_permission': True,
            'has_view_permission': True,
        }

        return render(request, 'admin/boats/import_boats.html', context)

    def _process_boats_import(self, request, form):
        """üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ Excel —Ñ–∞–π–ª–∞"""
        try:
            excel_file = request.FILES['excel_file']
            result = self._process_boats_excel(excel_file)

            if result['success']:
                success_msg = f"‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {result['count']} —Ç–æ–≤–∞—Ä–æ–≤"
                messages.success(request, success_msg)

                for detail in result.get('details', []):
                    messages.info(request, detail)

                for warning in result.get('warnings', []):
                    messages.warning(request, warning)
            else:
                messages.error(request, f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {result['error']}")

        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –ª–æ–¥–æ–∫")
            messages.error(request, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")

        return HttpResponseRedirect("../")

    def _process_boats_excel(self, excel_file):
        """üìä –ü–∞—Ä—Å–∏–Ω–≥ Excel —Ñ–∞–π–ª–∞ —Å –ª–æ–¥–∫–∞–º–∏"""
        try:
            import openpyxl

            workbook = openpyxl.load_workbook(excel_file)
            sheet = workbook.active

            count = 0
            details = []
            warnings = []

            for row_num, row in enumerate(sheet.iter_rows(min_row=2, values_only=True), 2):
                if not any(row):
                    continue

                try:
                    category_name = str(row[0]).strip() if row[0] else ""
                    product_name = str(row[1]).strip() if row[1] else ""
                    length = int(row[2]) if row[2] and str(row[2]).isdigit() else None
                    width = int(row[3]) if row[3] and str(row[3]).isdigit() else None
                    price = int(float(str(row[4]))) if row[4] else 0

                    if not category_name or not product_name:
                        warnings.append(f"–°—Ç—Ä–æ–∫–∞ {row_num}: –ü—Ä–æ–ø—É—â–µ–Ω–∞ - –Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è")
                        continue

                    # –°–æ–∑–¥–∞–µ–º/–ø–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                    category, created = BoatCategory.objects.get_or_create(
                        category_name=category_name,
                        defaults={'is_active': True}
                    )

                    # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
                    boat_product = BoatProduct.objects.create(
                        product_name=product_name,
                        category=category,
                        price=price,
                        boat_mat_length=length,
                        boat_mat_width=width,
                        product_desription=f"–õ–æ–¥–æ—á–Ω—ã–π –∫–æ–≤—Ä–∏–∫ {product_name}",
                        newest_product=False
                    )

                    count += 1
                    dimensions = f" ({length}√ó{width}—Å–º)" if length and width else ""
                    details.append(f"‚úÖ {product_name}{dimensions}")

                except Exception as e:
                    warnings.append(f"–°—Ç—Ä–æ–∫–∞ {row_num}: {str(e)}")
                    continue

            return {
                'success': True,
                'count': count,
                'details': details,
                'warnings': warnings
            }

        except Exception as e:
            return {'success': False, 'error': str(e)}


# üõ•Ô∏è –ù–û–í–ê–Ø –ê–î–ú–ò–ù–ö–ê: BoatCatalogDescription (—Å–∏–Ω–≥–ª—Ç–æ–Ω)
@admin.register(BoatCatalogDescription)
class BoatCatalogDescriptionAdmin(admin.ModelAdmin):
    """üìù –ê–¥–º–∏–Ω–∫–∞ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –ª–æ–¥–æ—á–Ω—ã—Ö –∫–æ–≤—Ä–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä)"""

    # üö´ –°–∏–Ω–≥–ª—Ç–æ–Ω –ª–æ–≥–∏–∫–∞ –≤ –∞–¥–º–∏–Ω–∫–µ
    def has_add_permission(self, request):
        """üö´ –ó–∞–ø—Ä–µ—Ç–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"""
        return not BoatCatalogDescription.objects.exists()

    def has_delete_permission(self, request, obj=None):
        """‚ö†Ô∏è –†–∞–∑—Ä–µ—à–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ (—á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)"""
        return True

    def changelist_view(self, request, extra_context=None):
        """üìù –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–∏, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ"""
        if not BoatCatalogDescription.objects.exists():
            return self.add_view(request)
        return super().changelist_view(request, extra_context)

    # üé® –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ–ª–µ–π –≤ –∞–¥–º–∏–Ω–∫–µ
    fieldsets = (
        ('üõ•Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –ª–æ–¥–æ—á–Ω—ã—Ö –∫–æ–≤—Ä–∏–∫–æ–≤', {
            'fields': ('title', 'description'),
            'description': '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –ª–æ–¥–æ—á–Ω—ã—Ö –∫–æ–≤—Ä–∏–∫–æ–≤'
        }),
        ('üé¨ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç', {
            'fields': ('additional_content',),
            'classes': ('collapse',),
            'description': 'YouTube –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π HTML –∫–æ–Ω—Ç–µ–Ω—Ç'
        }),
        ('üîç SEO', {
            'fields': ('meta_description',),
            'classes': ('collapse',),
            'description': '–ú–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º'
        }),
    )


# üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∞–¥–º–∏–Ω–∫–∏ –ª–æ–¥–æ–∫
admin.site.site_header = "üõ•Ô∏èüöó –ê–≤—Ç–æ–∫–æ–≤—Ä–∏–∫–∏ - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (–ê–≤—Ç–æ + –õ–æ–¥–∫–∏)"
admin.site.site_title = "–ê–≤—Ç–æ–∫–æ–≤—Ä–∏–∫–∏"
admin.site.index_title = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–æ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö –∏ –ª–æ–¥–æ—á–Ω—ã—Ö –∫–æ–≤—Ä–∏–∫–æ–≤"