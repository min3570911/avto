# üìÅ boats/admin.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ê–î–ú–ò–ù–ö–ê –î–õ–Ø –õ–û–î–û–ö
# üõ•Ô∏è –ê–¥–º–∏–Ω–∫–∞ —Å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º —Å–ø–∏—Å–∫–æ–º —Ç–æ–≤–∞—Ä–æ–≤ + –∫–Ω–æ–ø–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –≤ —É–≥–ª—É
# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω change_list_template, –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –∏–º–ø–æ—Ä—Ç–∞

import os
import logging
from django import forms
from django.contrib import admin
from django.http import HttpResponseRedirect
from django.shortcuts import render
from django.contrib import messages
from django.urls import path
from django.utils.html import format_html
from django.utils.safestring import mark_safe

from .models import BoatCategory, BoatProduct, BoatProductImage

logger = logging.getLogger(__name__)


class BoatExcelImportForm(forms.Form):
    """üìä –§–æ—Ä–º–∞ –∏–º–ø–æ—Ä—Ç–∞ Excel –¥–ª—è –ª–æ–¥–æ–∫"""

    excel_file = forms.FileField(
        label="üìä Excel —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –ª–æ–¥–æ–∫",
        help_text="–§–æ—Ä–º–∞—Ç: .xlsx, .xls. –ö–æ–ª–æ–Ω–∫–∏: A-–ö–∞—Ç–µ–≥–æ—Ä–∏—è/SKU, B-–ù–∞–∑–≤–∞–Ω–∏–µ, C-–î–ª–∏–Ω–∞(—Å–º), D-–®–∏—Ä–∏–Ω–∞(—Å–º), E-–¶–µ–Ω–∞",
        widget=forms.FileInput(attrs={
            'accept': '.xlsx,.xls',
            'class': 'form-control-file'
        })
    )

    images_zip = forms.FileField(
        label="üñºÔ∏è ZIP –∞—Ä—Ö–∏–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏",
        required=False,
        help_text="–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ. ZIP —Ñ–∞–π–ª —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –ª–æ–¥–æ–∫",
        widget=forms.FileInput(attrs={
            'accept': '.zip',
            'class': 'form-control-file'
        })
    )


class BoatProductImageInline(admin.TabularInline):
    """üñºÔ∏è Inline –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –ª–æ–¥–æ—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
    model = BoatProductImage
    extra = 1
    fields = ['image', 'alt_text', 'is_main', 'display_order']
    readonly_fields = ['created_at']


@admin.register(BoatCategory)
class BoatCategoryAdmin(admin.ModelAdmin):
    """üõ•Ô∏è –ê–¥–º–∏–Ω–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ª–æ–¥–æ–∫"""

    list_display = [
        'category_name',
        'get_products_count',
        'is_active',
        'display_order',
        'created_at'
    ]

    list_filter = [
        'is_active',
        'created_at'
    ]

    search_fields = [
        'category_name',
        'description',
        'meta_title'
    ]

    prepopulated_fields = {
        'slug': ('category_name',)
    }

    fieldsets = (
        ('üè∑Ô∏è –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('category_name', 'slug', 'category_image')
        }),
        ('üìù –û–ø–∏—Å–∞–Ω–∏—è (–∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä)', {
            'fields': ('description',),
            'classes': ('wide',)
        }),
        ('üîç SEO –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', {
            'fields': ('meta_title', 'meta_description'),
            'classes': ('collapse',)
        }),
        ('‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', {
            'fields': ('is_active', 'display_order'),
            'classes': ('collapse',)
        })
    )

    def get_products_count(self, obj):
        """üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        count = obj.get_products_count()
        if count > 0:
            return format_html(
                '<span style="color: green; font-weight: bold;">üì¶ {}</span>',
                count
            )
        return format_html('<span style="color: gray;">–ø—É—Å—Ç–æ</span>')

    get_products_count.short_description = "–¢–æ–≤–∞—Ä–æ–≤"


@admin.register(BoatProduct)
class BoatProductAdmin(admin.ModelAdmin):
    """üõ•Ô∏è –ê–¥–º–∏–Ω–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ª–æ–¥–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π –∏–º–ø–æ—Ä—Ç–∞"""

    # üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    inlines = [BoatProductImageInline]

    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π change_list —Å –∫–Ω–æ–ø–∫–æ–π –∏–º–ø–æ—Ä—Ç–∞
    change_list_template = "admin/boats/boatproduct/change_list.html"

    list_display = [
        'product_name',
        'category',
        'get_dimensions_badge',
        'get_price_display',
        'is_active',
        'newest_product',
        'stock_quantity',
        'created_at'
    ]

    list_filter = [
        'category',
        'is_active',
        'newest_product',
        'is_featured',
        'created_at'
    ]

    search_fields = [
        'product_name',
        'sku',
        'description',
        'short_description'
    ]

    prepopulated_fields = {
        'slug': ('product_name',)
    }

    readonly_fields = [
        'sku',  # –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è
        'created_at',
        'updated_at'
    ]

    fieldsets = (
        ('üè∑Ô∏è –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': (
                'product_name',
                'slug',
                'category',
                'sku',
                'price'
            )
        }),
        ('üìê –†–∞–∑–º–µ—Ä—ã –ª–æ–¥–æ—á–Ω–æ–≥–æ –∫–æ–≤—Ä–∏–∫–∞', {
            'fields': ('boat_mat_length', 'boat_mat_width'),
            'description': 'üõ•Ô∏è –£–ù–ò–ö–ê–õ–¨–ù–´–ï –ü–û–õ–Ø –î–õ–Ø –õ–û–î–û–ö: –£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã –∫–æ–≤—Ä–∏–∫–∞ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö'
        }),
        ('üìù –û–ø–∏—Å–∞–Ω–∏—è (–∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä)', {
            'fields': ('short_description', 'description'),
            'classes': ('wide',)
        }),
        ('üîç SEO –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', {
            'fields': ('meta_title', 'meta_description'),
            'classes': ('collapse',)
        }),
        ('üì¶ –°–∫–ª–∞–¥—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ', {
            'fields': ('stock_quantity', 'weight'),
            'classes': ('collapse',)
        }),
        ('‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–º', {
            'fields': (
                'is_active',
                'is_featured',
                'newest_product'
            ),
            'classes': ('collapse',)
        })
    )

    def get_dimensions_badge(self, obj):
        """üìê –ö—Ä–∞—Å–∏–≤—ã–π –∑–Ω–∞—á–æ–∫ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏"""
        dimensions = obj.get_mat_dimensions()
        if '–†–∞–∑–º–µ—Ä—ã —É—Ç–æ—á–Ω—è–π—Ç–µ' in dimensions:
            return format_html(
                '<span style="color: orange;">‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω—ã</span>'
            )
        return format_html(
            '<span style="background: #e3f2fd; padding: 2px 6px; border-radius: 3px; font-weight: bold;">üìè {}</span>',
            dimensions
        )

    get_dimensions_badge.short_description = "–†–∞–∑–º–µ—Ä—ã –∫–æ–≤—Ä–∏–∫–∞"

    def get_price_display(self, obj):
        """üí∞ –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞"""
        if obj.price > 0:
            return format_html(
                '<span style="color: green; font-weight: bold;">üí∞ {} —Ä—É–±.</span>',
                obj.get_display_price()
            )
        return format_html('<span style="color: gray;">–ù–µ —É–∫–∞–∑–∞–Ω–∞</span>')

    get_price_display.short_description = "–¶–µ–Ω–∞"

    # üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ URL –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
    def get_urls(self):
        urls = super().get_urls()
        custom_urls = [
            path(
                'import-boats/',
                self.admin_site.admin_view(self.import_boats_view),
                name='boats_boatproduct_import'
            ),
        ]
        return custom_urls + urls

    def import_boats_view(self, request):
        """üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Excel –¥–ª—è –ª–æ–¥–æ–∫"""
        if request.method == 'POST':
            form = BoatExcelImportForm(request.POST, request.FILES)
            if form.is_valid():
                return self._process_boats_import(request, form)
        else:
            form = BoatExcelImportForm()

        context = {
            'form': form,
            'title': 'üìä –ò–º–ø–æ—Ä—Ç –ª–æ–¥–æ–∫ –∏–∑ Excel',
            'subtitle': '–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Ç–æ–≤–∞—Ä–æ–≤ –ª–æ–¥–æ–∫',
            'opts': self.model._meta,  # –î–ª—è breadcrumbs
            'app_label': self.model._meta.app_label,  # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º app_label
            'has_change_permission': True,
            'has_view_permission': True,
        }

        return render(request, 'admin/boats/import_boats.html', context)

    def _process_boats_import(self, request, form):
        """üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ Excel —Ñ–∞–π–ª–∞ —Å –ª–æ–¥–∫–∞–º–∏"""
        try:
            excel_file = request.FILES['excel_file']
            images_zip = request.FILES.get('images_zip')

            # üìä –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ Excel (–±–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)
            result = self._process_boats_excel(excel_file)

            if result['success']:
                success_msg = f"‚úÖ –ò–º–ø–æ—Ä—Ç –ª–æ–¥–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω! –°–æ–∑–¥–∞–Ω–æ: {result['categories']} –∫–∞—Ç–µ–≥–æ—Ä–∏–π, {result['products']} —Ç–æ–≤–∞—Ä–æ–≤"
                messages.success(request, success_msg)
            else:
                messages.error(request, f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {result['error']}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ª–æ–¥–æ–∫: {e}")
            messages.error(request, f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {str(e)}")

        return HttpResponseRedirect('../')

    def _process_boats_excel(self, excel_file):
        """üìä –ë–∞–∑–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ Excel —Ñ–∞–π–ª–∞ –¥–ª—è –ª–æ–¥–æ–∫"""
        import openpyxl

        result = {
            'success': False,
            'categories': 0,
            'products': 0,
            'error': ''
        }

        try:
            # üìñ –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
            workbook = openpyxl.load_workbook(excel_file)
            worksheet = workbook.active

            current_category = None

            for row in worksheet.iter_rows(min_row=2, values_only=True):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                if not any(row):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                    continue

                identifier = str(row[0]).strip() if row[0] else ""
                name = str(row[1]).strip() if row[1] else ""
                length = row[2] if row[2] else None  # –î–ª–∏–Ω–∞ –∫–æ–≤—Ä–∏–∫–∞
                width = row[3] if row[3] else None  # –®–∏—Ä–∏–Ω–∞ –∫–æ–≤—Ä–∏–∫–∞
                price = row[4] if row[4] else 0
                description = str(row[5]).strip() if row[5] else ""

                # üìÇ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Ç—Ä–æ–∫–∏ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏–ª–∏ —Ç–æ–≤–∞—Ä)
                if '.' in identifier and not identifier.replace('.', '').isdigit():
                    # –ö–ê–¢–ï–ì–û–†–ò–Ø: —Ñ–æ—Ä–º–∞—Ç "1.Yamaha"
                    category_name = name

                    category, created = BoatCategory.objects.get_or_create(
                        category_name=category_name,
                        defaults={
                            'description': description,
                            'is_active': True,
                            'display_order': 0
                        }
                    )

                    current_category = category
                    if created:
                        result['categories'] += 1

                else:
                    # –¢–û–í–ê–† –õ–û–î–ö–ò
                    if not current_category:
                        continue

                    # üõ•Ô∏è –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä –ª–æ–¥–∫–∏ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏
                    product, created = BoatProduct.objects.get_or_create(
                        product_name=name,
                        category=current_category,
                        defaults={
                            'price': float(price) if price else 0,
                            'boat_mat_length': int(length) if length else None,
                            'boat_mat_width': int(width) if width else None,
                            'description': description,
                            'is_active': True
                        }
                    )

                    if created:
                        result['products'] += 1

            result['success'] = True

        except Exception as e:
            result['error'] = str(e)

        return result


@admin.register(BoatProductImage)
class BoatProductImageAdmin(admin.ModelAdmin):
    """üñºÔ∏è –ê–¥–º–∏–Ω–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ª–æ–¥–æ—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""

    list_display = [
        'get_image_preview',
        'product',
        'alt_text',
        'is_main',
        'display_order',
        'created_at'
    ]

    list_filter = [
        'is_main',
        'product__category',
        'created_at'
    ]

    search_fields = [
        'product__product_name',
        'alt_text'
    ]

    list_editable = [
        'is_main',
        'display_order'
    ]

    def get_image_preview(self, obj):
        """üñºÔ∏è –ü—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ"""
        if obj.image:
            return format_html(
                '<img src="{}" width="50" height="50" style="object-fit: cover; border-radius: 4px;" />',
                obj.image.url
            )
        return "–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

    get_image_preview.short_description = "–ü—Ä–µ–≤—å—é"

# üìù –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò:
#
# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê:
# ‚Ä¢ change_list_template —Ç–µ–ø–µ—Ä—å —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω
# ‚Ä¢ –®–∞–±–ª–æ–Ω –Ω–∞—Å–ª–µ–¥—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –∏–º–ø–æ—Ä—Ç–∞
# ‚Ä¢ –ü—Ä–∏ –∑–∞—Ö–æ–¥–µ –≤ "–¢–æ–≤–∞—Ä—ã –ª–æ–¥–æ–∫" –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
# ‚Ä¢ –ö–Ω–æ–ø–∫–∞ "–ò–º–ø–æ—Ä—Ç" –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É
#
# üõ•Ô∏è –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨:
# ‚Ä¢ –û–±—ã—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ª–æ–¥–æ–∫
# ‚Ä¢ –ö–Ω–æ–ø–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –≤ header
# ‚Ä¢ Excel –∏–º–ø–æ—Ä—Ç —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ –ª–æ–¥–æ–∫
# ‚Ä¢ Inline —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
#
# üéØ –°–õ–ï–î–£–Æ–©–ò–ô –®–ê–ì:
# –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω templates/admin/boats/boatproduct/change_list.html