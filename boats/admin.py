# üìÅ boats/admin.py - –ü–û–õ–ù–ê–Ø –ê–î–ú–ò–ù–ö–ê –° EXCEL –ò–ú–ü–û–†–¢–û–ú –î–õ–Ø –õ–û–î–û–ö
# üõ•Ô∏è –ê–¥–º–∏–Ω–∫–∞ —Å Excel –∏–º–ø–æ—Ä—Ç–æ–º –ø–æ –æ–±—Ä–∞–∑—É –∏ –ø–æ–¥–æ–±–∏—é products
# ‚úÖ –ê–î–ê–ü–¢–ò–†–û–í–ê–ù–û: –ò–º–ø–æ—Ä—Ç —Ä–∞–∑–º–µ—Ä–æ–≤ boat_mat_length, boat_mat_width

import os
import logging
from django import forms
from django.contrib import admin
from django.http import HttpResponseRedirect
from django.shortcuts import render
from django.contrib import messages
from django.urls import path
from django.utils.html import format_html
from django.utils.safestring import mark_safe

from .models import BoatCategory, BoatProduct, BoatProductImage

logger = logging.getLogger(__name__)


class BoatExcelImportForm(forms.Form):
    """
    üìä –§–æ—Ä–º–∞ –∏–º–ø–æ—Ä—Ç–∞ Excel –¥–ª—è –ª–æ–¥–æ–∫ (–ø–æ –æ–±—Ä–∞–∑—É products)

    –§–û–†–ú–ê–¢ –î–õ–Ø –õ–û–î–û–ö (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π):
    A - –ö–∞—Ç–µ–≥–æ—Ä–∏—è (1.Yamaha) –∏–ª–∏ SKU —Ç–æ–≤–∞—Ä–∞ (BOAT001)
    B - –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞/–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    C - –î–ª–∏–Ω–∞ –∫–æ–≤—Ä–∏–∫–∞ (—Å–º) - –¢–û–õ–¨–ö–û –î–õ–Ø –õ–û–î–û–ö
    D - –®–∏—Ä–∏–Ω–∞ –∫–æ–≤—Ä–∏–∫–∞ (—Å–º) - –¢–û–õ–¨–ö–û –î–õ–Ø –õ–û–î–û–ö
    E - –¶–µ–Ω–∞
    F - –û–ø–∏—Å–∞–Ω–∏–µ
    G - Meta-–æ–ø–∏—Å–∞–Ω–∏–µ
    H - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    """

    excel_file = forms.FileField(
        label="üìä Excel —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –ª–æ–¥–æ–∫",
        help_text="–§–æ—Ä–º–∞—Ç: .xlsx, .xls. –ü–æ –æ–±—Ä–∞–∑—É –∏–º–ø–æ—Ä—Ç–∞ products, –Ω–æ –¥–ª—è –ª–æ–¥–æ–∫ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏",
        widget=forms.FileInput(attrs={
            'accept': '.xlsx,.xls',
            'class': 'form-control-file'
        })
    )

    images_zip = forms.FileField(
        label="üñºÔ∏è ZIP –∞—Ä—Ö–∏–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏",
        required=False,
        help_text="–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ. ZIP —Ñ–∞–π–ª —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –ª–æ–¥–æ–∫ (PNG, JPG, WEBP)",
        widget=forms.FileInput(attrs={
            'accept': '.zip',
            'class': 'form-control-file'
        })
    )


class BoatProductImageInline(admin.TabularInline):
    """üñºÔ∏è Inline –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –ª–æ–¥–æ—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
    model = BoatProductImage
    extra = 1
    fields = ['image', 'alt_text', 'is_main', 'display_order']
    readonly_fields = ['created_at']

    def get_extra(self, request, obj=None, **kwargs):
        """–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—É—Å—Ç—É—é —Ñ–æ—Ä–º—É —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
        return 1 if obj is None else 0


@admin.register(BoatCategory)
class BoatCategoryAdmin(admin.ModelAdmin):
    """üõ•Ô∏è –ê–¥–º–∏–Ω–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ª–æ–¥–æ–∫"""

    list_display = [
        'category_name',
        'get_products_count',
        'is_active',
        'display_order',
        'created_at'
    ]

    list_filter = [
        'is_active',
        'created_at'
    ]

    search_fields = [
        'category_name',
        'description',
        'meta_title'
    ]

    prepopulated_fields = {
        'slug': ('category_name',)
    }

    fieldsets = (
        ('üè∑Ô∏è –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('category_name', 'slug', 'category_image')
        }),
        ('üìù –û–ø–∏—Å–∞–Ω–∏—è (–∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä)', {
            'fields': ('description',),
            'classes': ('wide',)
        }),
        ('üîç SEO –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', {
            'fields': ('meta_title', 'meta_description'),
            'classes': ('collapse',)
        }),
        ('‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', {
            'fields': ('is_active', 'display_order'),
            'classes': ('collapse',)
        })
    )

    # üé® –ö–∞—Å—Ç–æ–º–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    def get_products_count(self, obj):
        """üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        count = obj.get_products_count()
        if count > 0:
            return format_html(
                '<span style="color: green; font-weight: bold;">üì¶ {}</span>',
                count
            )
        return format_html('<span style="color: gray;">–ø—É—Å—Ç–æ</span>')

    get_products_count.short_description = "–¢–æ–≤–∞—Ä–æ–≤"


@admin.register(BoatProduct)
class BoatProductAdmin(admin.ModelAdmin):
    """üõ•Ô∏è –ê–¥–º–∏–Ω–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ª–æ–¥–æ–∫ —Å Excel –∏–º–ø–æ—Ä—Ç–æ–º (–ø–æ –æ–±—Ä–∞–∑—É products)"""

    # üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    inlines = [BoatProductImageInline]

    # üìä –®–∞–±–ª–æ–Ω —Å –∫–Ω–æ–ø–∫–æ–π –∏–º–ø–æ—Ä—Ç–∞
    change_list_template = "admin/boats/import_boats.html"

    list_display = [
        'product_name',
        'category',
        'get_dimensions_badge',
        'get_price_display',
        'is_active',
        'newest_product',
        'stock_quantity',
        'created_at'
    ]

    list_filter = [
        'category',
        'is_active',
        'newest_product',
        'is_featured',
        'created_at'
    ]

    search_fields = [
        'product_name',
        'sku',
        'description',
        'short_description'
    ]

    prepopulated_fields = {
        'slug': ('product_name',)
    }

    readonly_fields = [
        'sku',  # –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è
        'created_at',
        'updated_at'
    ]

    fieldsets = (
        ('üè∑Ô∏è –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': (
                'product_name',
                'slug',
                'category',
                'sku',
                'price'
            )
        }),
        ('üìê –†–∞–∑–º–µ—Ä—ã –ª–æ–¥–æ—á–Ω–æ–≥–æ –∫–æ–≤—Ä–∏–∫–∞', {
            'fields': ('boat_mat_length', 'boat_mat_width'),
            'description': 'üõ•Ô∏è –£–ù–ò–ö–ê–õ–¨–ù–´–ï –ü–û–õ–Ø –î–õ–Ø –õ–û–î–û–ö: –£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã –∫–æ–≤—Ä–∏–∫–∞ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö'
        }),
        ('üìù –û–ø–∏—Å–∞–Ω–∏—è (–∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä)', {
            'fields': ('short_description', 'description'),
            'classes': ('wide',)
        }),
        ('üîç SEO –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', {
            'fields': ('meta_title', 'meta_description'),
            'classes': ('collapse',)
        }),
        ('üì¶ –°–∫–ª–∞–¥—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ', {
            'fields': ('stock_quantity', 'weight'),
            'classes': ('collapse',)
        }),
        ('‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–º', {
            'fields': (
                'is_active',
                'is_featured',
                'newest_product'
            ),
            'classes': ('collapse',)
        })
    )

    # üé® –ö–∞—Å—Ç–æ–º–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    def get_dimensions_badge(self, obj):
        """üìê –ö—Ä–∞—Å–∏–≤—ã–π –∑–Ω–∞—á–æ–∫ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏"""
        dimensions = obj.get_mat_dimensions()
        if '–†–∞–∑–º–µ—Ä—ã —É—Ç–æ—á–Ω—è–π—Ç–µ' in dimensions:
            return format_html(
                '<span style="color: orange;">‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω—ã</span>'
            )
        return format_html(
            '<span style="background: #e3f2fd; padding: 2px 6px; border-radius: 3px; font-weight: bold;">üìè {}</span>',
            dimensions
        )

    get_dimensions_badge.short_description = "–†–∞–∑–º–µ—Ä—ã –∫–æ–≤—Ä–∏–∫–∞"

    def get_price_display(self, obj):
        """üí∞ –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞"""
        if obj.price > 0:
            return format_html(
                '<span style="color: green; font-weight: bold;">üí∞ {} —Ä—É–±.</span>',
                obj.get_display_price()
            )
        return format_html('<span style="color: gray;">–ù–µ —É–∫–∞–∑–∞–Ω–∞</span>')

    get_price_display.short_description = "–¶–µ–Ω–∞"

    # üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ URL –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
    def get_urls(self):
        urls = super().get_urls()
        custom_urls = [
            path(
                'import-boats/',
                self.admin_site.admin_view(self.import_boats_view),
                name='boats_boatproduct_import'
            ),
        ]
        return custom_urls + urls

    def import_boats_view(self, request):
        """üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Excel –¥–ª—è –ª–æ–¥–æ–∫ (–ø–æ –æ–±—Ä–∞–∑—É products)"""
        if request.method == 'POST':
            form = BoatExcelImportForm(request.POST, request.FILES)
            if form.is_valid():
                return self._process_boats_import(request, form)
        else:
            form = BoatExcelImportForm()

        context = {
            'form': form,
            'title': 'üìä –ò–º–ø–æ—Ä—Ç –ª–æ–¥–æ–∫ –∏–∑ Excel',
            'subtitle': '–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Ç–æ–≤–∞—Ä–æ–≤ –ª–æ–¥–æ–∫ –ø–æ –æ–±—Ä–∞–∑—É products',
            'import_help': self._get_boats_import_help(),
            'opts': self.model._meta,  # –î–ª—è breadcrumbs
        }

        return render(request, 'admin/boats/import_boats.html', context)

    def _process_boats_import(self, request, form):
        """üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ Excel —Ñ–∞–π–ª–∞ —Å –ª–æ–¥–∫–∞–º–∏"""
        try:
            excel_file = request.FILES['excel_file']
            images_zip = request.FILES.get('images_zip')

            # üìä –ü—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥ Excel —Ñ–∞–π–ª–∞ –¥–ª—è –ª–æ–¥–æ–∫
            result = self._process_boats_excel(excel_file)

            if result['success']:
                success_msg = f"‚úÖ –ò–º–ø–æ—Ä—Ç –ª–æ–¥–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω! –°–æ–∑–¥–∞–Ω–æ: {result['categories']} –∫–∞—Ç–µ–≥–æ—Ä–∏–π, {result['products']} —Ç–æ–≤–∞—Ä–æ–≤"
                messages.success(request, success_msg)

                if result['errors']:
                    error_msg = f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {len(result['errors'])} —Å—Ç—Ä–æ–∫ —Å –æ—à–∏–±–∫–∞–º–∏"
                    messages.warning(request, error_msg)
            else:
                messages.error(request, f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {result['error']}")

            # üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–µ—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã)
            if images_zip:
                img_result = self._process_boats_images(images_zip)
                if img_result['success']:
                    messages.info(request, f"üì∑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {img_result['processed']}")
                else:
                    messages.warning(request, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {img_result['error']}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ª–æ–¥–æ–∫: {e}")
            messages.error(request, f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {str(e)}")

        return HttpResponseRedirect('../')

    def _process_boats_excel(self, excel_file):
        """üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ Excel —Ñ–∞–π–ª–∞ –¥–ª—è –ª–æ–¥–æ–∫ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å products)"""
        import openpyxl

        result = {
            'success': False,
            'categories': 0,
            'products': 0,
            'errors': []
        }

        try:
            # üìñ –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
            workbook = openpyxl.load_workbook(excel_file)
            worksheet = workbook.active

            current_category = None
            row_num = 1

            for row in worksheet.iter_rows(min_row=2, values_only=True):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                row_num += 1

                if not any(row):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                    continue

                try:
                    identifier = str(row[0]).strip() if row[0] else ""
                    name = str(row[1]).strip() if row[1] else ""
                    length = row[2] if row[2] else None  # –î–ª–∏–Ω–∞ –∫–æ–≤—Ä–∏–∫–∞
                    width = row[3] if row[3] else None  # –®–∏—Ä–∏–Ω–∞ –∫–æ–≤—Ä–∏–∫–∞
                    price = row[4] if row[4] else 0
                    description = str(row[5]).strip() if row[5] else ""
                    meta_description = str(row[6]).strip() if row[6] else ""
                    image_name = str(row[7]).strip() if row[7] else ""

                    # üìÇ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Ç—Ä–æ–∫–∏ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏–ª–∏ —Ç–æ–≤–∞—Ä)
                    if '.' in identifier and not identifier.replace('.', '').isdigit():
                        # –ö–ê–¢–ï–ì–û–†–ò–Ø: —Ñ–æ—Ä–º–∞—Ç "1.Yamaha"
                        category_name = name

                        category, created = BoatCategory.objects.get_or_create(
                            category_name=category_name,
                            defaults={
                                'description': description,
                                'meta_title': name,
                                'meta_description': meta_description,
                                'is_active': True,
                                'display_order': 0
                            }
                        )

                        current_category = category
                        if created:
                            result['categories'] += 1
                            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ª–æ–¥–æ–∫: {category_name}")

                    else:
                        # –¢–û–í–ê–† –õ–û–î–ö–ò
                        if not current_category:
                            result['errors'].append(f"–°—Ç—Ä–æ–∫–∞ {row_num}: –¢–æ–≤–∞—Ä –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
                            continue

                        # üõ•Ô∏è –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä –ª–æ–¥–∫–∏ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏
                        product, created = BoatProduct.objects.get_or_create(
                            product_name=name,
                            category=current_category,
                            defaults={
                                'price': float(price) if price else 0,
                                'boat_mat_length': int(length) if length else None,  # üÜï –î–ª–∏–Ω–∞
                                'boat_mat_width': int(width) if width else None,  # üÜï –®–∏—Ä–∏–Ω–∞
                                'description': description,
                                'meta_title': name,
                                'meta_description': meta_description,
                                'is_active': True,
                                'newest_product': False
                            }
                        )

                        if created:
                            result['products'] += 1
                            dimensions = product.get_mat_dimensions()
                            logger.info(f"–°–æ–∑–¥–∞–Ω —Ç–æ–≤–∞—Ä –ª–æ–¥–∫–∏: {name} ({dimensions})")

                except Exception as e:
                    error_msg = f"–°—Ç—Ä–æ–∫–∞ {row_num}: {str(e)}"
                    result['errors'].append(error_msg)
                    logger.error(error_msg)

            result['success'] = True

        except Exception as e:
            result['error'] = str(e)
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel –¥–ª—è –ª–æ–¥–æ–∫: {e}")

        return result

    def _process_boats_images(self, images_zip):
        """üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ ZIP –∞—Ä—Ö–∏–≤–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –ª–æ–¥–æ–∫"""
        import zipfile
        import os
        from django.conf import settings

        result = {'success': False, 'processed': 0, 'error': ''}

        try:
            with zipfile.ZipFile(images_zip, 'r') as zip_ref:
                for filename in zip_ref.namelist():
                    if filename.lower().endswith(('.png', '.jpg', '.jpeg', '.webp')):
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–∞–ø–∫—É boat_products
                        target_path = os.path.join(settings.MEDIA_ROOT, 'boat_products', os.path.basename(filename))

                        os.makedirs(os.path.dirname(target_path), exist_ok=True)

                        with zip_ref.open(filename) as source, open(target_path, 'wb') as target:
                            target.write(source.read())

                        result['processed'] += 1

            result['success'] = True

        except Exception as e:
            result['error'] = str(e)
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ª–æ–¥–æ–∫: {e}")

        return result

    def _get_boats_import_help(self):
        """üìã –°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É –∏–º–ø–æ—Ä—Ç–∞ –ª–æ–¥–æ–∫"""
        return {
            'columns': [
                ('A', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è/SKU', '1.Yamaha –∏–ª–∏ BOAT001'),
                ('B', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–ö–æ–≤—Ä–∏–∫ EVA Yamaha F150'),
                ('C', '–î–ª–∏–Ω–∞ (—Å–º)', '120'),
                ('D', '–®–∏—Ä–∏–Ω–∞ (—Å–º)', '80'),
                ('E', '–¶–µ–Ω–∞', '4500.00'),
                ('F', '–û–ø–∏—Å–∞–Ω–∏–µ', '–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'),
                ('G', 'Meta-–æ–ø–∏—Å–∞–Ω–∏–µ', 'SEO –æ–ø–∏—Å–∞–Ω–∏–µ'),
                ('H', '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', 'yamaha_f150.jpg')
            ],
            'examples': [
                ('1.Yamaha', '–õ–æ–¥–æ—á–Ω—ã–µ –º–æ—Ç–æ—Ä—ã Yamaha', '', '', '', '–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', 'SEO –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', 'yamaha.jpg'),
                ('BOAT001', '–ö–æ–≤—Ä–∏–∫ EVA Yamaha F150', '120', '80', '4500', '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–≤—Ä–∏–∫...', 'SEO —Ç–æ–≤–∞—Ä–∞',
                 'yamaha_f150.jpg')
            ]
        }


@admin.register(BoatProductImage)
class BoatProductImageAdmin(admin.ModelAdmin):
    """üñºÔ∏è –ê–¥–º–∏–Ω–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ª–æ–¥–æ—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""

    list_display = [
        'get_image_preview',
        'product',
        'alt_text',
        'is_main',
        'display_order',
        'created_at'
    ]

    list_filter = [
        'is_main',
        'product__category',
        'created_at'
    ]

    search_fields = [
        'product__product_name',
        'alt_text'
    ]

    list_editable = [
        'is_main',
        'display_order'
    ]

    def get_image_preview(self, obj):
        """üñºÔ∏è –ü—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ"""
        if obj.image:
            return format_html(
                '<img src="{}" width="50" height="50" style="object-fit: cover; border-radius: 4px;" />',
                obj.image.url
            )
        return "–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

    get_image_preview.short_description = "–ü—Ä–µ–≤—å—é"


# üîß –ù–ê–°–¢–†–û–ô–ö–ò –ê–î–ú–ò–ù–ö–ò
admin.site.site_header = "üõ•Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –ª–æ–¥–æ—á–Ω—ã—Ö –∫–æ–≤—Ä–∏–∫–æ–≤"
admin.site.site_title = "Boats Admin"
admin.site.index_title = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–¥–æ—á–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏"

# üìù –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò:
#
# ‚úÖ –°–û–ó–î–ê–ù–ê –ü–û–õ–ù–ê–Ø –ê–î–ú–ò–ù–ö–ê –ü–û –û–ë–†–ê–ó–£ PRODUCTS:
# 1. BoatCategoryAdmin - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –ª–æ–¥–æ–∫
# 2. BoatProductAdmin - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏ –ª–æ–¥–æ–∫ + Excel –∏–º–ø–æ—Ä—Ç
# 3. BoatProductImageAdmin - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
#
# üõ•Ô∏è –ê–î–ê–ü–¢–ò–†–û–í–ê–ù–û –î–õ–Ø –õ–û–î–û–ö:
# ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ boat_mat_length, boat_mat_width
# ‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Excel –∏–º–ø–æ—Ä—Ç–∞ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏
# ‚Ä¢ –ö—Ä–∞—Å–∏–≤—ã–µ –∑–Ω–∞—á–∫–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤
# ‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CKEditor5 –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏–π
# ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ ZIP –∞—Ä—Ö–∏–≤–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
#
# üìä –§–û–†–ú–ê–¢ EXCEL –î–õ–Ø –õ–û–î–û–ö:
# A - –ö–∞—Ç–µ–≥–æ—Ä–∏—è (1.Yamaha) –∏–ª–∏ SKU (BOAT001)
# B - –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞/–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
# C - –î–ª–∏–Ω–∞ –∫–æ–≤—Ä–∏–∫–∞ (—Å–º) - –ù–û–í–û–ï –ü–û–õ–ï
# D - –®–∏—Ä–∏–Ω–∞ –∫–æ–≤—Ä–∏–∫–∞ (—Å–º) - –ù–û–í–û–ï –ü–û–õ–ï
# E - –¶–µ–Ω–∞
# F - –û–ø–∏—Å–∞–Ω–∏–µ
# G - Meta-–æ–ø–∏—Å–∞–Ω–∏–µ
# H - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
#
# üéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:
# 1. –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω admin/boats/import_boats.html
# 2. –°–æ–∑–¥–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ boats
# 3. –û–±–Ω–æ–≤–∏—Ç—å boats/views.py –ø–æ–¥ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏
# 4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å Excel –∏–º–ø–æ—Ä—Ç