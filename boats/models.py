# üìÅ boats/models.py - –§–ò–ù–ê–õ–¨–ù–´–ï –û–¢–î–ï–õ–¨–ù–´–ï –ú–û–î–ï–õ–ò –î–õ–Ø –õ–û–î–û–ö
# üõ•Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü boats (–ù–ï proxy-–º–æ–¥–µ–ª–∏)
# ‚úÖ –ü–õ–û–°–ö–ê–Ø –°–¢–†–£–ö–¢–£–†–ê: –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ—Ä–Ω–µ–≤—ã–µ (Yamaha, Mercury, Suzuki...)
# ‚úÖ –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –ü–û–õ–Ø: boat_mat_length, boat_mat_width, –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ CKEditor

import uuid
from django.db import models
from django.utils.text import slugify
from django.urls import reverse
from django_ckeditor_5.fields import CKEditor5Field
from base.models import BaseModel

# üÜï –ö–∞—Å—Ç–æ–º–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏–∑ products
from products.storage import OverwriteStorage


class BoatCategory(BaseModel):
    """
    üõ•Ô∏è –û—Ç–¥–µ–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ª–æ–¥–æ–∫ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è –æ—Ç products)

    –ü–õ–û–°–ö–ê–Ø –°–¢–†–£–ö–¢–£–†–ê:
    ‚îú‚îÄ Yamaha (parent=null)
    ‚îú‚îÄ Mercury (parent=null)
    ‚îú‚îÄ Suzuki (parent=null)
    ‚îî‚îÄ Honda (parent=null)
    """

    # üè∑Ô∏è –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
    category_name = models.CharField(
        max_length=200,
        verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª–æ–¥–æ–∫",
        help_text="–ù–∞–ø—Ä–∏–º–µ—Ä: Yamaha, Mercury, Suzuki"
    )

    slug = models.SlugField(
        unique=True,
        max_length=255,
        verbose_name="URL-–∞–¥—Ä–µ—Å",
        help_text="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    )

    # üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ª–æ–≥–æ—Ç–∏–ø –±—Ä–µ–Ω–¥–∞)
    category_image = models.ImageField(
        upload_to="boat_categories",
        storage=OverwriteStorage(),
        null=True,
        blank=True,
        verbose_name="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
        help_text="–õ–æ–≥–æ—Ç–∏–ø –±—Ä–µ–Ω–¥–∞ –ª–æ–¥–∫–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: 400x300px"
    )

    # üìù –û–ø–∏—Å–∞–Ω–∏—è (–∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É)
    description = CKEditor5Field(
        blank=True,
        null=True,
        verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
        help_text="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª–æ–¥–æ–∫ (—á–µ—Ä–µ–∑ –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä)",
        config_name='default'
    )

    # üìä SEO –ø–æ–ª—è
    meta_title = models.CharField(
        max_length=255,
        blank=True,
        verbose_name="Meta title",
        help_text="SEO –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º"
    )

    meta_description = models.TextField(
        max_length=300,
        blank=True,
        verbose_name="Meta description",
        help_text="SEO –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º (–¥–æ 300 —Å–∏–º–≤–æ–ª–æ–≤)"
    )

    # ‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
    is_active = models.BooleanField(
        default=True,
        verbose_name="–ê–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
        help_text="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ —Å–∞–π—Ç–µ"
    )

    display_order = models.IntegerField(
        default=0,
        verbose_name="–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
        help_text="–ß–µ–º –º–µ–Ω—å—à–µ —á–∏—Å–ª–æ, —Ç–µ–º –≤—ã—à–µ –≤ —Å–ø–∏—Å–∫–µ"
    )

    def save(self, *args, **kwargs):
        """üîß –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è slug –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏"""
        if not self.slug:
            self.slug = slugify(self.category_name, allow_unicode=True)
        super().save(*args, **kwargs)

    def get_absolute_url(self):
        """üåê URL –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª–æ–¥–æ–∫"""
        return reverse('boats:product_list_by_category', kwargs={'slug': self.slug})

    def get_products_count(self):
        """üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        return self.products.filter(is_active=True).count()

    def __str__(self):
        """üõ•Ô∏è –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω–∫–µ —Å –∏–∫–æ–Ω–∫–æ–π –ª–æ–¥–∫–∏"""
        status = "" if self.is_active else " (–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞)"
        return f"üõ•Ô∏è {self.category_name}{status}"

    class Meta:
        verbose_name = "üõ•Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ª–æ–¥–æ–∫"
        verbose_name_plural = "üõ•Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª–æ–¥–æ–∫"
        ordering = ['display_order', 'category_name']


class BoatProduct(BaseModel):
    """
    üõ•Ô∏è –û—Ç–¥–µ–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å —Ç–æ–≤–∞—Ä–æ–≤ –ª–æ–¥–æ–∫ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è –æ—Ç products)

    –ö–õ–Æ–ß–ï–í–´–ï –û–°–û–ë–ï–ù–ù–û–°–¢–ò:
    - boat_mat_length, boat_mat_width (—Ä–∞–∑–º–µ—Ä—ã –∫–æ–≤—Ä–∏–∫–∞)
    - description —á–µ—Ä–µ–∑ CKEditor5 (–∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –∞–¥–º–∏–Ω–∫–µ)
    - –ë–ï–ó –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–π (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ vs –∞–≤—Ç–æ–º–æ–±–∏–ª–∏)
    - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ü–≤–µ—Ç–∞ –∏–∑ products.models.Color (–æ–±—â–∏–µ)
    """

    # üè∑Ô∏è –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    product_name = models.CharField(
        max_length=200,
        verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
        help_text="–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–æ–≤—Ä–∏–∫ EVA Yamaha F150"
    )

    slug = models.SlugField(
        unique=True,
        max_length=255,
        verbose_name="URL-–∞–¥—Ä–µ—Å",
        help_text="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    )

    # üìÇ –°–≤—è–∑—å —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –ª–æ–¥–æ–∫
    category = models.ForeignKey(
        BoatCategory,
        on_delete=models.CASCADE,
        related_name="products",
        verbose_name="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ª–æ–¥–∫–∏",
        help_text="–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ –ª–æ–¥–∫–∏"
    )

    # üí∞ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞
    price = models.DecimalField(
        max_digits=10,
        decimal_places=2,
        default=0.00,
        verbose_name="–¶–µ–Ω–∞ (—Ä—É–±.)",
        help_text="–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –ª–æ–¥–æ—á–Ω–æ–≥–æ –∫–æ–≤—Ä–∏–∫–∞"
    )

    # üìê –£–ù–ò–ö–ê–õ–¨–ù–´–ï –ü–û–õ–Ø –î–õ–Ø –õ–û–î–û–ö: –†–∞–∑–º–µ—Ä—ã –∫–æ–≤—Ä–∏–∫–∞
    boat_mat_length = models.PositiveIntegerField(
        verbose_name="–î–ª–∏–Ω–∞ –∫–æ–≤—Ä–∏–∫–∞ (—Å–º)",
        help_text="–î–ª–∏–Ω–∞ –ª–æ–¥–æ—á–Ω–æ–≥–æ –∫–æ–≤—Ä–∏–∫–∞ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö",
        null=True,
        blank=True
    )

    boat_mat_width = models.PositiveIntegerField(
        verbose_name="–®–∏—Ä–∏–Ω–∞ –∫–æ–≤—Ä–∏–∫–∞ (—Å–º)",
        help_text="–®–∏—Ä–∏–Ω–∞ –ª–æ–¥–æ—á–Ω–æ–≥–æ –∫–æ–≤—Ä–∏–∫–∞ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö",
        null=True,
        blank=True
    )

    # üìù –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É)
    description = CKEditor5Field(
        blank=True,
        null=True,
        verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
        help_text="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ª–æ–¥–æ—á–Ω–æ–≥–æ –∫–æ–≤—Ä–∏–∫–∞ (—á–µ—Ä–µ–∑ –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä)",
        config_name='default'
    )

    # üè∑Ô∏è –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
    short_description = models.TextField(
        max_length=500,
        blank=True,
        verbose_name="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
        help_text="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–∞—Ç–∞–ª–æ–≥–µ (–¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤)"
    )

    # üìä SEO –ø–æ–ª—è
    meta_title = models.CharField(
        max_length=255,
        blank=True,
        verbose_name="Meta title",
        help_text="SEO –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º"
    )

    meta_description = models.TextField(
        max_length=300,
        blank=True,
        verbose_name="Meta description",
        help_text="SEO –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º"
    )

    # ‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–º
    is_active = models.BooleanField(
        default=True,
        verbose_name="–¢–æ–≤–∞—Ä –∞–∫—Ç–∏–≤–µ–Ω",
        help_text="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–∞—Ç–∞–ª–æ–≥–µ"
    )

    is_featured = models.BooleanField(
        default=False,
        verbose_name="–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ç–æ–≤–∞—Ä",
        help_text="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö"
    )

    newest_product = models.BooleanField(
        default=False,
        verbose_name="–ù–æ–≤–∏–Ω–∫–∞",
        help_text="–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –Ω–æ–≤–∏–Ω–∫—É"
    )

    # üì¶ –°–∫–ª–∞–¥—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    stock_quantity = models.PositiveIntegerField(
        default=0,
        verbose_name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ",
        help_text="–û—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ"
    )

    # üè∑Ô∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    sku = models.CharField(
        max_length=50,
        unique=True,
        blank=True,
        verbose_name="–ê—Ä—Ç–∏–∫—É–ª (SKU)",
        help_text="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ —Ç–æ–≤–∞—Ä–∞"
    )

    weight = models.DecimalField(
        max_digits=6,
        decimal_places=2,
        null=True,
        blank=True,
        verbose_name="–í–µ—Å (–∫–≥)",
        help_text="–í–µ—Å —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"
    )

    def save(self, *args, **kwargs):
        """üîß –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è slug –∏ SKU –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏"""
        if not self.slug:
            self.slug = slugify(self.product_name, allow_unicode=True)

        if not self.sku:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SKU: BOAT-{category_name}-{random}
            category_code = self.category.category_name[:4].upper()
            self.sku = f"BOAT-{category_code}-{uuid.uuid4().hex[:6].upper()}"

        super().save(*args, **kwargs)

    def get_absolute_url(self):
        """üåê URL —Ç–æ–≤–∞—Ä–∞ –ª–æ–¥–∫–∏"""
        return reverse('boats:product_detail', kwargs={'slug': self.slug})

    def get_main_image(self):
        """üñºÔ∏è –ü–æ–ª—É—á–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
        main_image = self.images.filter(is_main=True).first()
        if main_image:
            return main_image
        # –ï—Å–ª–∏ –Ω–µ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ
        return self.images.first()

    def get_mat_dimensions(self):
        """üìê –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã –∫–æ–≤—Ä–∏–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "120√ó80 —Å–º" """
        if self.boat_mat_length and self.boat_mat_width:
            return f"{self.boat_mat_length}√ó{self.boat_mat_width} —Å–º"
        elif self.boat_mat_length:
            return f"–î–ª–∏–Ω–∞: {self.boat_mat_length} —Å–º"
        elif self.boat_mat_width:
            return f"–®–∏—Ä–∏–Ω–∞: {self.boat_mat_width} —Å–º"
        return "–†–∞–∑–º–µ—Ä—ã —É—Ç–æ—á–Ω—è–π—Ç–µ"

    def get_display_price(self):
        """üí∞ –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        return f"{self.price:,.0f}".replace(',', ' ')

    def get_similar_products(self, limit=4):
        """üîÑ –ü–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        return BoatProduct.objects.filter(
            category=self.category,
            is_active=True
        ).exclude(id=self.id)[:limit]

    def is_in_stock(self):
        """üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–∞ —Å–∫–ª–∞–¥–µ"""
        return self.stock_quantity > 0

    def get_dimensions_display(self):
        """üìè –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤"""
        if self.boat_mat_length and self.boat_mat_width:
            return {
                'length': self.boat_mat_length,
                'width': self.boat_mat_width,
                'formatted': f"{self.boat_mat_length}√ó{self.boat_mat_width} —Å–º",
                'area': round(self.boat_mat_length * self.boat_mat_width / 10000, 2)  # –º¬≤
            }
        return None

    def __str__(self):
        """üõ•Ô∏è –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω–∫–µ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏"""
        dimensions = ""
        if self.boat_mat_length and self.boat_mat_width:
            dimensions = f" ({self.boat_mat_length}√ó{self.boat_mat_width}—Å–º)"

        status = "" if self.is_active else " (–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω)"
        return f"üõ•Ô∏è {self.product_name}{dimensions}{status}"

    class Meta:
        verbose_name = "üõ•Ô∏è –¢–æ–≤–∞—Ä (–ª–æ–¥–∫–∞)"
        verbose_name_plural = "üõ•Ô∏è –¢–æ–≤–∞—Ä—ã (–ª–æ–¥–∫–∏)"
        ordering = ['-created_at', 'product_name']
        indexes = [
            models.Index(fields=['category', 'is_active']),
            models.Index(fields=['slug']),
            models.Index(fields=['sku']),
        ]


class BoatProductImage(BaseModel):
    """
    üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–¥–æ—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–æ—Ç–¥–µ–ª—å–Ω–∞—è –æ—Ç products)
    –ù–µ–∑–∞–≤–∏—Å–∏–º–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–∞–ª–µ—Ä–µ–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ª–æ–¥–æ–∫
    """

    product = models.ForeignKey(
        BoatProduct,
        on_delete=models.CASCADE,
        related_name="images",
        verbose_name="–¢–æ–≤–∞—Ä –ª–æ–¥–∫–∏"
    )

    image = models.ImageField(
        upload_to="boat_products",
        storage=OverwriteStorage(),
        verbose_name="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
        help_text="–§–æ—Ç–æ –ª–æ–¥–æ—á–Ω–æ–≥–æ –∫–æ–≤—Ä–∏–∫–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: 800x600px"
    )

    alt_text = models.CharField(
        max_length=255,
        blank=True,
        verbose_name="Alt —Ç–µ–∫—Å—Ç",
        help_text="–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è SEO –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"
    )

    is_main = models.BooleanField(
        default=False,
        verbose_name="–ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
        help_text="–û—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞"
    )

    display_order = models.PositiveIntegerField(
        default=0,
        verbose_name="–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
        help_text="–ü–æ—Ä—è–¥–æ–∫ –≤ –≥–∞–ª–µ—Ä–µ–µ (–º–µ–Ω—å—à–µ —á–∏—Å–ª–æ = –≤—ã—à–µ)"
    )

    def save(self, *args, **kwargs):
        """üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è alt_text"""
        if not self.alt_text and self.product:
            self.alt_text = f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {self.product.product_name}"
        super().save(*args, **kwargs)

    def __str__(self):
        main_indicator = "üìå " if self.is_main else ""
        return f"{main_indicator}–§–æ—Ç–æ: {self.product.product_name}"

    class Meta:
        verbose_name = "üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–¥–æ—á–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"
        verbose_name_plural = "üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–¥–æ—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"
        ordering = ['display_order', 'created_at']

# üîß –§–ò–ù–ê–õ–¨–ù–´–ï –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò:
#
# ‚úÖ –°–û–ó–î–ê–ù–´ –¢–†–ò –û–¢–î–ï–õ–¨–ù–´–ï –ú–û–î–ï–õ–ò:
# 1. BoatCategory - –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª–æ–¥–æ–∫ (Yamaha, Mercury...)
# 2. BoatProduct - —Ç–æ–≤–∞—Ä—ã –ª–æ–¥–æ–∫ (—Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ –∫–æ–≤—Ä–∏–∫–∞)
# 3. BoatProductImage - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –ª–æ–¥–æ–∫
#
# üéØ –ö–õ–Æ–ß–ï–í–´–ï –û–°–û–ë–ï–ù–ù–û–°–¢–ò:
# ‚Ä¢ –ü–ª–æ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–≤—Å–µ –∫–æ—Ä–Ω–µ–≤—ã–µ)
# ‚Ä¢ boat_mat_length, boat_mat_width - —Ä–∞–∑–º–µ—Ä—ã –∫–æ–≤—Ä–∏–∫–æ–≤
# ‚Ä¢ description —á–µ—Ä–µ–∑ CKEditor5 (–∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –∞–¥–º–∏–Ω–∫–µ)
# ‚Ä¢ –ù–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç products (–æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã)
# ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ –∏–∑ products.models.Color (–æ–±—â–∏–µ)
# ‚Ä¢ SEO-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è
# ‚Ä¢ –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤
#
# üóÑÔ∏è –°–û–ó–î–ê–í–ê–ï–ú–´–ï –¢–ê–ë–õ–ò–¶–´:
# ‚Ä¢ boats_boatcategory - –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª–æ–¥–æ–∫
# ‚Ä¢ boats_boatproduct - —Ç–æ–≤–∞—Ä—ã –ª–æ–¥–æ–∫
# ‚Ä¢ boats_boatproductimage - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
#
# üìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:
# 1. –°–æ–∑–¥–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é: python manage.py makemigrations boats
# 2. –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é: python manage.py migrate boats
# 3. –û–±–Ω–æ–≤–∏—Ç—å boats/admin.py –ø–æ–¥ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏
# 4. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Excel –∏–º–ø–æ—Ä—Ç –ø–æ –æ–±—Ä–∞–∑—É products