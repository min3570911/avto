# üìÅ boats/models.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ò –£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
# üõ•Ô∏è BoatProduct - –¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø Product, –Ω–æ –±–µ–∑ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–π
# ‚úÖ –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å products.models.Product
# üîß –û–¢–õ–ò–ß–ò–Ø: –¢–æ–ª—å–∫–æ —Ä–∞–∑–º–µ—Ä—ã –∫–æ–≤—Ä–∏–∫–∞ –≤–º–µ—Å—Ç–æ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–π

import uuid
from django.db import models
from django.utils.text import slugify
from django.urls import reverse
from django_ckeditor_5.fields import CKEditor5Field
from base.models import BaseModel
from products.storage import OverwriteStorage


class BoatCategory(BaseModel):
    """
    üõ•Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª–æ–¥–æ–∫ (–æ—Ç–¥–µ–ª—å–Ω—ã–µ –æ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö)
    –ü–†–ò–ú–ï–†–´: Yamaha, Mercury, Suzuki, Honda...
    """

    # üè∑Ô∏è –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è (–∫–∞–∫ —É Category)
    category_name = models.CharField(
        max_length=200,
        verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª–æ–¥–æ–∫",
        help_text="–ù–∞–ø—Ä–∏–º–µ—Ä: Yamaha, Mercury, Suzuki"
    )

    slug = models.SlugField(
        unique=True,
        max_length=255,
        verbose_name="URL-–∞–¥—Ä–µ—Å",
        help_text="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    )

    # üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_image = models.ImageField(
        upload_to="boat_categories",
        storage=OverwriteStorage(),
        null=True,
        blank=True,
        verbose_name="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
        help_text="–õ–æ–≥–æ—Ç–∏–ø –±—Ä–µ–Ω–¥–∞ –ª–æ–¥–∫–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: 400x300px"
    )

    # üìù –û–ø–∏—Å–∞–Ω–∏–µ (CKEditor –∫–∞–∫ —É –ø—Ä–æ–¥—É–∫—Ç–æ–≤)
    description = CKEditor5Field(
        blank=True,
        null=True,
        verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
        help_text="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª–æ–¥–æ–∫",
        config_name='default'
    )

    # üîç SEO –ø–æ–ª—è (–∫–∞–∫ —É Category)
    page_title = models.CharField(
        max_length=200,
        blank=True,
        null=True,
        verbose_name="–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (Title)",
        help_text="SEO –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    )

    meta_description = models.TextField(
        blank=True,
        null=True,
        verbose_name="Meta Description",
        help_text="SEO –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º"
    )

    # ‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–∫–∞–∫ —É Category)
    is_active = models.BooleanField(
        default=True,
        verbose_name="–ê–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
        help_text="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ —Å–∞–π—Ç–µ"
    )

    display_order = models.PositiveIntegerField(
        default=0,
        verbose_name="–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
        help_text="–ß–µ–º –º–µ–Ω—å—à–µ —á–∏—Å–ª–æ, —Ç–µ–º –≤—ã—à–µ –≤ —Å–ø–∏—Å–∫–µ"
    )

    def save(self, *args, **kwargs):
        """üîß –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è slug"""
        if not self.slug:
            self.slug = slugify(self.category_name, allow_unicode=True)
        super().save(*args, **kwargs)

    def get_absolute_url(self):
        """üåê URL –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª–æ–¥–æ–∫"""
        return reverse('boats:product_list_by_category', kwargs={'slug': self.slug})

    def get_products_count(self):
        """üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ò–°–ü–†–ê–í–õ–ï–ù–û)"""
        # –ü—Ä–æ—Å—Ç–æ —Å—á–∏—Ç–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã, —Ç–∞–∫ –∫–∞–∫ —É BoatProduct –Ω–µ—Ç –ø–æ–ª—è is_active
        return self.products.count()

    def __str__(self):
        """üõ•Ô∏è –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω–∫–µ"""
        status = "" if self.is_active else " (–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞)"
        return f"üõ•Ô∏è {self.category_name}{status}"

    class Meta:
        verbose_name = "üõ•Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ª–æ–¥–æ–∫"
        verbose_name_plural = "üõ•Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª–æ–¥–æ–∫"
        ordering = ['display_order', 'category_name']


class BoatProduct(BaseModel):
    """
    üõ•Ô∏è –£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–ê–Ø –º–æ–¥–µ–ª—å —Ç–æ–≤–∞—Ä–æ–≤ –ª–æ–¥–æ–∫

    ‚úÖ –¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø products.models.Product, –ù–û:
    - –°–≤—è–∑—å —Å BoatCategory (–≤–º–µ—Å—Ç–æ Category)
    - –†–∞–∑–º–µ—Ä—ã –∫–æ–≤—Ä–∏–∫–∞ boat_mat_length/width (–≤–º–µ—Å—Ç–æ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–π)
    - –ë–ï–ó —Å–≤—è–∑–∏ —Å KitVariant
    - –ë–ï–ó –ø–æ–ª—è has_podpyatnik
    """

    # üè∑Ô∏è –û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø (–ò–î–ï–ù–¢–ò–ß–ù–û Product)
    product_name = models.CharField(
        max_length=200,
        verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
        help_text="–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–æ–≤—Ä–∏–∫ EVA –¥–ª—è Yamaha F150"
    )

    slug = models.SlugField(
        unique=True,
        max_length=255,
        verbose_name="URL-–∞–¥—Ä–µ—Å",
        help_text="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    )

    # üìÇ –ö–ê–¢–ï–ì–û–†–ò–Ø (—Å–≤—è–∑—å —Å BoatCategory)
    category = models.ForeignKey(
        BoatCategory,
        on_delete=models.CASCADE,
        related_name="products",
        verbose_name="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ª–æ–¥–∫–∏",
        help_text="–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ –ª–æ–¥–∫–∏"
    )

    # üí∞ –¶–ï–ù–ê (IntegerField –∫–∞–∫ —É Product)
    price = models.IntegerField(
        verbose_name="–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞",
        null=True,
        blank=True,
        default=0,
        help_text="–¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)"
    )

    # üìù –û–ü–ò–°–ê–ù–ò–ï (CKEditor5Field –∫–∞–∫ —É Product)
    product_desription = CKEditor5Field(
        verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
        help_text="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        config_name='default'
    )

    # ‚≠ê –£–ü–†–ê–í–õ–ï–ù–ò–ï (–∫–∞–∫ —É Product)
    newest_product = models.BooleanField(
        default=False,
        verbose_name="–ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä"
    )

    # üÜî –ê–†–¢–ò–ö–£–õ (–∫–∞–∫ —É Product)
    product_sku = models.CharField(
        max_length=50,
        unique=True,
        null=True,
        blank=True,
        verbose_name="–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞",
        help_text="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∏ —É—á–µ—Ç–∞"
    )

    # üõ•Ô∏è –†–ê–ó–ú–ï–†–´ –õ–û–î–û–ß–ù–û–ì–û –ö–û–í–†–ò–ö–ê (–£–ù–ò–ö–ê–õ–¨–ù–û –î–õ–Ø –õ–û–î–û–ö)
    boat_mat_length = models.PositiveIntegerField(
        null=True,
        blank=True,
        verbose_name="–î–ª–∏–Ω–∞ –∫–æ–≤—Ä–∏–∫–∞ (—Å–º)",
        help_text="–î–ª–∏–Ω–∞ –∫–æ–≤—Ä–∏–∫–∞ –¥–ª—è –ª–æ–¥–∫–∏ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö"
    )

    boat_mat_width = models.PositiveIntegerField(
        null=True,
        blank=True,
        verbose_name="–®–∏—Ä–∏–Ω–∞ –∫–æ–≤—Ä–∏–∫–∞ (—Å–º)",
        help_text="–®–∏—Ä–∏–Ω–∞ –∫–æ–≤—Ä–∏–∫–∞ –¥–ª—è –ª–æ–¥–∫–∏ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö"
    )

    # üîç SEO –ü–û–õ–Ø (–∫–∞–∫ —É Product)
    page_title = models.CharField(
        max_length=200,
        blank=True,
        null=True,
        verbose_name="–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (Title)",
        help_text="SEO –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞"
    )

    meta_description = models.TextField(
        blank=True,
        null=True,
        verbose_name="Meta Description",
        help_text="SEO –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º"
    )

    def save(self, *args, **kwargs):
        """üîß –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è slug –∏ SKU"""
        if not self.slug:
            self.slug = slugify(self.product_name, allow_unicode=True)

        # üÜî –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è SKU –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
        if not self.product_sku:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–µ 3 –±—É–∫–≤—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ + timestamp
            category_prefix = self.category.category_name[:3].upper()
            import time
            timestamp = str(int(time.time()))[-6:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Ü–∏—Ñ—Ä
            self.product_sku = f"BOAT-{category_prefix}-{timestamp}"

        super().save(*args, **kwargs)

    def get_absolute_url(self):
        """üåê URL —Ç–æ–≤–∞—Ä–∞ –ª–æ–¥–∫–∏"""
        return reverse('boats:product_detail', kwargs={'slug': self.slug})

    def get_mat_dimensions(self):
        """üìè –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã –∫–æ–≤—Ä–∏–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏"""
        if self.boat_mat_length and self.boat_mat_width:
            return f"{self.boat_mat_length}√ó{self.boat_mat_width} —Å–º"
        elif self.boat_mat_length:
            return f"–î–ª–∏–Ω–∞: {self.boat_mat_length} —Å–º"
        elif self.boat_mat_width:
            return f"–®–∏—Ä–∏–Ω–∞: {self.boat_mat_width} —Å–º"
        return "–†–∞–∑–º–µ—Ä—ã —É—Ç–æ—á–Ω—è–π—Ç–µ"

    def get_dimensions_display(self):
        """üìè –û–±—ä–µ–∫—Ç —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤"""
        if self.boat_mat_length and self.boat_mat_width:
            return {
                'length': self.boat_mat_length,
                'width': self.boat_mat_width,
                'formatted': f"{self.boat_mat_length}√ó{self.boat_mat_width} —Å–º",
                'area': round(self.boat_mat_length * self.boat_mat_width / 10000, 2)  # –º¬≤
            }
        return None

    def get_display_price(self):
        """üí∞ –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞"""
        if self.price:
            return f"{self.price:,}".replace(',', ' ')
        return "–¶–µ–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É"

    def get_main_image(self):
        """üñºÔ∏è –ü–æ–ª—É—á–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        main_image = self.images.filter(is_main=True).first()
        if main_image:
            return main_image
        return self.images.first()

    def __str__(self):
        """üõ•Ô∏è –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω–∫–µ"""
        dimensions = ""
        if self.boat_mat_length and self.boat_mat_width:
            dimensions = f" ({self.boat_mat_length}√ó{self.boat_mat_width}—Å–º)"
        return f"üõ•Ô∏è {self.product_name}{dimensions}"

    class Meta:
        verbose_name = "üõ•Ô∏è –¢–æ–≤–∞—Ä (–ª–æ–¥–∫–∞)"
        verbose_name_plural = "üõ•Ô∏è –¢–æ–≤–∞—Ä—ã (–ª–æ–¥–∫–∏)"
        ordering = ['-created_at', 'product_name']
        indexes = [
            models.Index(fields=['category', 'newest_product']),
            models.Index(fields=['slug']),
            models.Index(fields=['product_sku']),
        ]


class BoatProductImage(BaseModel):
    """
    üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–¥–æ—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    –ò–î–ï–ù–¢–ò–ß–ù–û products.models.ProductImage
    """

    product = models.ForeignKey(
        BoatProduct,
        on_delete=models.CASCADE,
        related_name="images",
        verbose_name="–¢–æ–≤–∞—Ä –ª–æ–¥–∫–∏"
    )

    image = models.ImageField(
        upload_to="boat_products",
        storage=OverwriteStorage(),
        verbose_name="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
        help_text="–§–æ—Ç–æ –ª–æ–¥–æ—á–Ω–æ–≥–æ –∫–æ–≤—Ä–∏–∫–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: 800x600px"
    )

    alt_text = models.CharField(
        max_length=255,
        blank=True,
        verbose_name="Alt —Ç–µ–∫—Å—Ç",
        help_text="–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è SEO –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"
    )

    is_main = models.BooleanField(
        default=False,
        verbose_name="–ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
        help_text="–û—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞"
    )

    display_order = models.PositiveIntegerField(
        default=0,
        verbose_name="–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
        help_text="–ü–æ—Ä—è–¥–æ–∫ –≤ –≥–∞–ª–µ—Ä–µ–µ (–º–µ–Ω—å—à–µ —á–∏—Å–ª–æ = –≤—ã—à–µ)"
    )

    def save(self, *args, **kwargs):
        """üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è alt_text"""
        if not self.alt_text and self.product:
            self.alt_text = f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {self.product.product_name}"
        super().save(*args, **kwargs)

    def __str__(self):
        main_indicator = "üìå " if self.is_main else ""
        return f"{main_indicator}–§–æ—Ç–æ: {self.product.product_name}"

    class Meta:
        verbose_name = "üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–¥–æ—á–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"
        verbose_name_plural = "üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–¥–æ—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"
        ordering = ['display_order', 'created_at']