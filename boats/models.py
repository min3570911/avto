# üìÅ boats/models.py - –£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–´–ï –ú–û–î–ï–õ–ò –õ–û–î–û–ö
# üõ•Ô∏è BoatProduct - –¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø Product, –Ω–æ –±–µ–∑ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–π
# ‚úÖ –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å products.models.Product
# üîß –û–¢–õ–ò–ß–ò–Ø: –¢–æ–ª—å–∫–æ —Ä–∞–∑–º–µ—Ä—ã –∫–æ–≤—Ä–∏–∫–∞ –≤–º–µ—Å—Ç–æ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–π

import uuid
from django.db import models
from django.utils.text import slugify
from django.urls import reverse
from django_ckeditor_5.fields import CKEditor5Field
from base.models import BaseModel
from products.storage import OverwriteStorage


class BoatCategory(BaseModel):
    """
    üõ•Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª–æ–¥–æ–∫ (–æ—Ç–¥–µ–ª—å–Ω—ã–µ –æ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö)
    –ü–†–ò–ú–ï–†–´: Yamaha, Mercury, Suzuki, Honda...
    """

    # üè∑Ô∏è –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è (–∫–∞–∫ —É Category)
    category_name = models.CharField(
        max_length=200,
        verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª–æ–¥–æ–∫",
        help_text="–ù–∞–ø—Ä–∏–º–µ—Ä: Yamaha, Mercury, Suzuki"
    )

    slug = models.SlugField(
        unique=True,
        max_length=255,
        verbose_name="URL-–∞–¥—Ä–µ—Å",
        help_text="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    )

    # üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_image = models.ImageField(
        upload_to="boat_categories",
        storage=OverwriteStorage(),
        null=True,
        blank=True,
        verbose_name="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
        help_text="–õ–æ–≥–æ—Ç–∏–ø –±—Ä–µ–Ω–¥–∞ –ª–æ–¥–∫–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: 400x300px"
    )

    # üìù –û–ø–∏—Å–∞–Ω–∏–µ (CKEditor –∫–∞–∫ —É –ø—Ä–æ–¥—É–∫—Ç–æ–≤)
    description = CKEditor5Field(
        blank=True,
        null=True,
        verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
        help_text="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª–æ–¥–æ–∫",
        config_name='default'
    )

    # üîç SEO –ø–æ–ª—è (–∫–∞–∫ —É Category)
    page_title = models.CharField(
        max_length=200,
        blank=True,
        null=True,
        verbose_name="–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (Title)",
        help_text="SEO –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    )

    meta_description = models.TextField(
        blank=True,
        null=True,
        verbose_name="Meta Description",
        help_text="SEO –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º"
    )

    # ‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–∫–∞–∫ —É Category)
    is_active = models.BooleanField(
        default=True,
        verbose_name="–ê–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
        help_text="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ —Å–∞–π—Ç–µ"
    )

    display_order = models.PositiveIntegerField(
        default=0,
        verbose_name="–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
        help_text="–ß–µ–º –º–µ–Ω—å—à–µ —á–∏—Å–ª–æ, —Ç–µ–º –≤—ã—à–µ –≤ —Å–ø–∏—Å–∫–µ"
    )

    def save(self, *args, **kwargs):
        """üîß –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è slug"""
        if not self.slug:
            self.slug = slugify(self.category_name, allow_unicode=True)
        super().save(*args, **kwargs)

    def get_absolute_url(self):
        """üåê URL –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª–æ–¥–æ–∫"""
        return reverse('boats:product_list_by_category', kwargs={'slug': self.slug})

    def get_products_count(self):
        """üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        return self.products.filter(is_active=True).count()

    def __str__(self):
        """üõ•Ô∏è –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω–∫–µ"""
        status = "" if self.is_active else " (–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞)"
        return f"üõ•Ô∏è {self.category_name}{status}"

    class Meta:
        verbose_name = "üõ•Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ª–æ–¥–æ–∫"
        verbose_name_plural = "üõ•Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª–æ–¥–æ–∫"
        ordering = ['display_order', 'category_name']


from base.models import BaseProduct
from django.contrib.contenttypes.fields import GenericRelation


class BoatProduct(BaseProduct):
    """üõ•Ô∏è –¢–æ–≤–∞—Ä –¥–ª—è –ª–æ–¥–∫–∏ (–Ω–∞—Å–ª–µ–¥—É–µ—Ç –æ–±—â–∏–µ –ø–æ–ª—è –æ—Ç BaseProduct)"""
    category = models.ForeignKey(
        BoatCategory,
        on_delete=models.CASCADE,
        related_name="products",
        verbose_name="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ª–æ–¥–∫–∏"
    )

    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –ª–æ–¥–æ–∫
    boat_mat_length = models.PositiveIntegerField(null=True, blank=True, verbose_name="–î–ª–∏–Ω–∞ –∫–æ–≤—Ä–∏–∫–∞ (—Å–º)")
    boat_mat_width = models.PositiveIntegerField(null=True, blank=True, verbose_name="–®–∏—Ä–∏–Ω–∞ –∫–æ–≤—Ä–∏–∫–∞ (—Å–º)")

    # –°–≤—è–∑—å —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º–∏ –æ—Ç–∑—ã–≤–∞–º–∏
    reviews = GenericRelation(
        'common.ProductReview',
        object_id_field='object_id',
        content_type_field='content_type'
    )

    # –°–≤—è–∑—å —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º –∏–∑–±—Ä–∞–Ω–Ω—ã–º
    wishlisted_by = GenericRelation(
        'common.Wishlist',
        object_id_field='object_id',
        content_type_field='content_type'
    )

    def get_mat_dimensions(self):
        """üìè –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã –∫–æ–≤—Ä–∏–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏"""
        if self.boat_mat_length and self.boat_mat_width:
            return f"{self.boat_mat_length}√ó{self.boat_mat_width} —Å–º"
        return None

    def __str__(self):
        """üõ•Ô∏è –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω–∫–µ"""
        dimensions = self.get_mat_dimensions()
        if dimensions:
            return f"üõ•Ô∏è {self.product_name} ({dimensions})"
        return f"üõ•Ô∏è {self.product_name}"

    class Meta:
        verbose_name = "üõ•Ô∏è –¢–æ–≤–∞—Ä (–ª–æ–¥–∫–∞)"
        verbose_name_plural = "üõ•Ô∏è –¢–æ–≤–∞—Ä—ã (–ª–æ–¥–∫–∏)"
        ordering = ['-created_at', 'product_name']
        db_table = 'boats_boatproduct'


class BoatProductImage(BaseModel):
    """
    üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–¥–æ—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    –ò–î–ï–ù–¢–ò–ß–ù–û products.models.ProductImage
    """

    product = models.ForeignKey(
        BoatProduct,
        on_delete=models.CASCADE,
        related_name="images",
        verbose_name="–¢–æ–≤–∞—Ä –ª–æ–¥–∫–∏"
    )

    image = models.ImageField(
        upload_to="boat_products",
        storage=OverwriteStorage(),
        verbose_name="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
        help_text="–§–æ—Ç–æ –ª–æ–¥–æ—á–Ω–æ–≥–æ –∫–æ–≤—Ä–∏–∫–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: 800x600px"
    )

    alt_text = models.CharField(
        max_length=255,
        blank=True,
        verbose_name="Alt —Ç–µ–∫—Å—Ç",
        help_text="–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è SEO –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"
    )

    is_main = models.BooleanField(
        default=False,
        verbose_name="–ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
        help_text="–û—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞"
    )

    display_order = models.PositiveIntegerField(
        default=0,
        verbose_name="–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
        help_text="–ü–æ—Ä—è–¥–æ–∫ –≤ –≥–∞–ª–µ—Ä–µ–µ (–º–µ–Ω—å—à–µ —á–∏—Å–ª–æ = –≤—ã—à–µ)"
    )

    def save(self, *args, **kwargs):
        """üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è alt_text"""
        if not self.alt_text and self.product:
            self.alt_text = f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {self.product.product_name}"
        super().save(*args, **kwargs)

    def __str__(self):
        main_indicator = "üìå " if self.is_main else ""
        return f"{main_indicator}–§–æ—Ç–æ: {self.product.product_name}"

    class Meta:
        verbose_name = "üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–¥–æ—á–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"
        verbose_name_plural = "üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–¥–æ—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"
        ordering = ['display_order', 'created_at']

# üîß –ò–¢–û–ì–û–í–´–ï –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò:
#
# ‚úÖ –£–ù–ò–§–ò–ö–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê:
# ‚Ä¢ BoatProduct - —Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è Product (–±–µ–∑ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–π)
# ‚Ä¢ –í—Å–µ –ø–æ–ª—è —Å–æ–≤–ø–∞–¥–∞—é—Ç –ø–æ —Ç–∏–ø–∞–º –∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º
# ‚Ä¢ –†–∞–∑–º–µ—Ä—ã –∫–æ–≤—Ä–∏–∫–∞ boat_mat_length/width –≤–º–µ—Å—Ç–æ KitVariant
# ‚Ä¢ CKEditor5Field –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è (–∫–∞–∫ —É Product)
# ‚Ä¢ IntegerField –¥–ª—è —Ü–µ–Ω—ã (–∫–∞–∫ —É Product)
# ‚Ä¢ –ò–¥–µ–Ω—Ç–∏—á–Ω—ã–µ SEO –ø–æ–ª—è
# ‚Ä¢ –ò–¥–µ–Ω—Ç–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
#
# üóÑÔ∏è –°–û–ó–î–ê–í–ê–ï–ú–´–ï –¢–ê–ë–õ–ò–¶–´:
# ‚Ä¢ boats_boatcategory - –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª–æ–¥–æ–∫
# ‚Ä¢ boats_boatproduct - —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –ª–æ–¥–æ–∫
# ‚Ä¢ boats_boatproductimage - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
#
# üìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:
# 1. –°–æ–∑–¥–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é: python manage.py makemigrations boats
# 2. –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é: python manage.py migrate boats
# 3. –û–±–Ω–æ–≤–∏—Ç—å boats/admin.py –ø–æ–¥ –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
# 4. –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ (1 —Ç–æ–≤–∞—Ä) –≤—Ä—É—á–Ω—É—é