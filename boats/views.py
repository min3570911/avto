# üìÅ boats/views.py - VIEWS –î–õ–Ø –û–¢–î–ï–õ–¨–ù–´–• –ú–û–î–ï–õ–ï–ô BOATS
# üõ•Ô∏è –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞ –ª–æ–¥–æ–∫ —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏
# ‚úÖ –†–ê–ë–û–¢–ê–ï–¢ –°: BoatCategory, BoatProduct, BoatProductImage (–æ—Ç–¥–µ–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏)

from django.shortcuts import render, get_object_or_404
from django.core.paginator import Paginator
from django.contrib.auth.decorators import login_required
from django.http import JsonResponse
from django.views.decorators.http import require_http_methods
from django.db.models import Q, Min, Max
from django.db import models

# üõ•Ô∏è –û–¢–î–ï–õ–¨–ù–´–ï –ú–û–î–ï–õ–ò: –ò–º–ø–æ—Ä—Ç –∏–∑ boats (–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã)
from .models import BoatCategory, BoatProduct, BoatProductImage

# üé® –¶–≤–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑ products (–æ–±—â–∏–µ)
from products.models import Color

# üõí –§—É–Ω–∫—Ü–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã –∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–∑ products (—Ä–∞–±–æ—Ç–∞—é—Ç —Å –ª—é–±—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏)
from products.views import add_to_cart, add_to_wishlist


def boat_category_list(request):
    """
    üõ•Ô∏è –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∞–∑–¥–µ–ª–∞ "–õ–æ–¥–∫–∏" - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ª–æ–¥–æ–∫
    ‚úÖ –†–ê–ë–û–¢–ê–ï–¢ –°: BoatCategory (–æ—Ç–¥–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞)
    """

    # üìÇ –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª–æ–¥–æ–∫ (–ø–ª–æ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
    categories = BoatCategory.objects.filter(
        is_active=True
    ).order_by('display_order', 'category_name')

    # üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ª–æ–¥–∫–∞–º
    total_boat_products = BoatProduct.objects.filter(is_active=True).count()
    newest_boats = BoatProduct.objects.filter(
        newest_product=True,
        is_active=True
    ).select_related('category').prefetch_related('images')[:6]

    # üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ª–æ–¥–∫–∏
    featured_boats = BoatProduct.objects.filter(
        is_featured=True,
        is_active=True
    ).select_related('category').prefetch_related('images')[:8]

    # üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    size_stats = BoatProduct.objects.filter(is_active=True).aggregate(
        min_length=Min('boat_mat_length'),
        max_length=Max('boat_mat_length'),
        min_width=Min('boat_mat_width'),
        max_width=Max('boat_mat_width'),
        total_with_sizes=models.Count('id', filter=Q(boat_mat_length__isnull=False, boat_mat_width__isnull=False))
    )

    context = {
        'categories': categories,
        'total_products': total_boat_products,
        'newest_products': newest_boats,
        'featured_products': featured_boats,
        'size_stats': size_stats,  # üõ•Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤
        'page_title': '–õ–æ–¥–æ—á–Ω—ã–µ –∫–æ–≤—Ä–∏–∫–∏',
        'page_description': '–ö–∞—Ç–∞–ª–æ–≥ –∫–æ–≤—Ä–∏–∫–æ–≤ –¥–ª—è –ª–æ–¥–æ–∫ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–∞—Ä–æ–∫ –∏ –º–æ–¥–µ–ª–µ–π. –†–∞–∑–º–µ—Ä—ã, —Ü–≤–µ—Ç–∞, –±—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞.',
        'section_type': 'boats',  # üè∑Ô∏è –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–∞–∑–¥–µ–ª–∞
    }

    return render(request, 'boats/category_list.html', context)


def boat_product_list(request, slug):
    """
    üõ•Ô∏è –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª–æ–¥–æ–∫
    ‚úÖ –†–ê–ë–û–¢–ê–ï–¢ –°: BoatCategory, BoatProduct (–æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã)
    """

    # üìÇ –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ª–æ–¥–æ–∫ –ø–æ slug
    category = get_object_or_404(BoatCategory, slug=slug, is_active=True)

    # üì¶ –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø–ª–æ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
    products = BoatProduct.objects.filter(
        category=category,
        is_active=True
    ).select_related('category').prefetch_related('images')

    # üîç –ü–æ–∏—Å–∫ –ø–æ –ª–æ–¥–∫–∞–º
    search_query = request.GET.get('search', '')
    if search_query:
        products = products.filter(
            Q(product_name__icontains=search_query) |
            Q(description__icontains=search_query) |
            Q(short_description__icontains=search_query) |
            Q(sku__icontains=search_query)
        )

    # üìä –£–ù–ò–ö–ê–õ–¨–ù–´–ï –§–ò–õ–¨–¢–†–´ –î–õ–Ø –õ–û–î–û–ö: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º
    min_length = request.GET.get('min_length')
    max_length = request.GET.get('max_length')
    min_width = request.GET.get('min_width')
    max_width = request.GET.get('max_width')

    if min_length:
        try:
            products = products.filter(boat_mat_length__gte=int(min_length))
        except ValueError:
            pass
    if max_length:
        try:
            products = products.filter(boat_mat_length__lte=int(max_length))
        except ValueError:
            pass
    if min_width:
        try:
            products = products.filter(boat_mat_width__gte=int(min_width))
        except ValueError:
            pass
    if max_width:
        try:
            products = products.filter(boat_mat_width__lte=int(max_width))
        except ValueError:
            pass

    # üìä –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (–≤–∫–ª—é—á–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º)
    sort_by = request.GET.get('sort', 'name')
    if sort_by == 'price_asc':
        products = products.order_by('price')
    elif sort_by == 'price_desc':
        products = products.order_by('-price')
    elif sort_by == 'newest':
        products = products.order_by('-created_at')
    elif sort_by == 'size_asc':  # üõ•Ô∏è –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–∞–∑–º–µ—Ä—É (—É–Ω–∏–∫–∞–ª—å–Ω–æ –¥–ª—è –ª–æ–¥–æ–∫)
        products = products.order_by('boat_mat_length', 'boat_mat_width')
    elif sort_by == 'size_desc':
        products = products.order_by('-boat_mat_length', '-boat_mat_width')
    else:  # name
        products = products.order_by('product_name')

    # üìÑ –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    per_page = request.GET.get('per_page', '12')
    if per_page == 'all':
        page_obj = products
        paginator = None
    else:
        try:
            per_page = int(per_page)
        except ValueError:
            per_page = 12

        paginator = Paginator(products, per_page)
        page_number = request.GET.get('page')
        page_obj = paginator.get_page(page_number)

    # üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
    category_size_stats = products.aggregate(
        min_length=Min('boat_mat_length'),
        max_length=Max('boat_mat_length'),
        min_width=Min('boat_mat_width'),
        max_width=Max('boat_mat_width')
    )

    context = {
        'category': category,
        'page_obj': page_obj,
        'paginator': paginator,
        'search_query': search_query,
        'sort_by': sort_by,
        'per_page': per_page,
        'total_products': products.count(),
        'size_stats': category_size_stats,  # üõ•Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        'current_filters': {  # üõ•Ô∏è –¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã —Ä–∞–∑–º–µ—Ä–æ–≤
            'min_length': min_length,
            'max_length': max_length,
            'min_width': min_width,
            'max_width': max_width
        },
        'page_title': f'–õ–æ–¥–æ—á–Ω—ã–µ –∫–æ–≤—Ä–∏–∫–∏ {category.category_name}',
        'page_description': category.meta_description or f'–ö–æ–≤—Ä–∏–∫–∏ –¥–ª—è –ª–æ–¥–æ–∫ {category.category_name}. –†–∞–∑–ª–∏—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã, —Ü–≤–µ—Ç–∞, –±—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞.',
        'section_type': 'boats',
    }

    return render(request, 'boats/product_list.html', context)


def boat_product_detail(request, slug):
    """
    üõ•Ô∏è –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–æ–≤–∞—Ä–∞ –ª–æ–¥–∫–∏
    ‚úÖ –†–ê–ë–û–¢–ê–ï–¢ –°: BoatProduct, BoatProductImage (–æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã)
    """

    # üì¶ –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä –ª–æ–¥–∫–∏ –ø–æ slug
    product = get_object_or_404(
        BoatProduct.objects.select_related('category').prefetch_related('images'),
        slug=slug,
        is_active=True
    )

    # üîÑ –ü–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª–æ–¥–æ–∫
    similar_products = BoatProduct.objects.filter(
        category=product.category,
        is_active=True
    ).exclude(id=product.id).select_related('category').prefetch_related('images')[:4]

    # üìê –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –î–õ–Ø –õ–û–î–û–ö: —Ä–∞–∑–º–µ—Ä—ã –∫–æ–≤—Ä–∏–∫–∞
    boat_dimensions = product.get_dimensions_display()

    # üé® –¶–≤–µ—Ç–∞ –¥–ª—è –ª–æ–¥–æ–∫ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑ products.models.Color)
    carpet_colors = Color.objects.filter(
        color_type='carpet',
        is_available=True
    ).order_by('display_order', 'name')

    border_colors = Color.objects.filter(
        color_type='border',
        is_available=True
    ).order_by('display_order', 'name')

    # üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –ª–æ–¥–∫–∏
    product_images = product.images.filter().order_by('display_order', 'created_at')
    main_image = product.get_main_image()

    # üß≠ –•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏
    breadcrumbs = [
        {'name': '–ì–ª–∞–≤–Ω–∞—è', 'url': '/'},
        {'name': '–õ–æ–¥–∫–∏', 'url': '/boats/'},
        {'name': product.category.category_name, 'url': product.category.get_absolute_url()},
        {'name': product.product_name, 'url': ''}
    ]

    # üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ª–æ–¥–æ–∫
    related_by_size = []
    if boat_dimensions:
        # –¢–æ–≤–∞—Ä—ã —Å –ø–æ—Ö–æ–∂–∏–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
        related_by_size = BoatProduct.objects.filter(
            boat_mat_length__range=[
                boat_dimensions['length'] - 20,
                boat_dimensions['length'] + 20
            ],
            boat_mat_width__range=[
                boat_dimensions['width'] - 20,
                boat_dimensions['width'] + 20
            ],
            is_active=True
        ).exclude(id=product.id)[:3]

    context = {
        'product': product,
        'similar_products': similar_products,
        'related_by_size': related_by_size,  # üõ•Ô∏è –¢–æ–≤–∞—Ä—ã —Å –ø–æ—Ö–æ–∂–∏–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
        'boat_dimensions': boat_dimensions,  # üõ•Ô∏è –†–∞–∑–º–µ—Ä—ã –∫–æ–≤—Ä–∏–∫–∞
        'carpet_colors': carpet_colors,  # üé® –¶–≤–µ—Ç–∞ –∫–æ–≤—Ä–∏–∫–æ–≤
        'border_colors': border_colors,  # üé® –¶–≤–µ—Ç–∞ –æ–∫–∞–Ω—Ç–æ–≤–∫–∏
        'product_images': product_images,  # üñºÔ∏è –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        'main_image': main_image,  # üñºÔ∏è –ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        'breadcrumbs': breadcrumbs,  # üß≠ –ù–∞–≤–∏–≥–∞—Ü–∏—è
        'page_title': product.meta_title or product.product_name,
        'page_description': product.meta_description or f'–õ–æ–¥–æ—á–Ω—ã–π –∫–æ–≤—Ä–∏–∫ {product.product_name}. {product.get_mat_dimensions()}',
        'section_type': 'boats',
        'show_boat_features': True,  # üõ•Ô∏è –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ª–æ–¥–æ–∫
    }

    return render(request, 'boats/product_detail.html', context)


def boat_search(request):
    """
    üîç –ü–æ–∏—Å–∫ —Å—Ä–µ–¥–∏ –ª–æ–¥–æ—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    ‚úÖ –†–ê–ë–û–¢–ê–ï–¢ –°: BoatProduct (–æ—Ç–¥–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞)
    """

    query = request.GET.get('q', '')

    if not query:
        return render(request, 'boats/search_results.html', {
            'query': '',
            'results': [],
            'total_results': 0,
            'message': '–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª–æ–¥–æ—á–Ω—ã—Ö –∫–æ–≤—Ä–∏–∫–æ–≤'
        })

    # üîç –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –ø–æ–ª—è–º –ª–æ–¥–æ—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    results = BoatProduct.objects.filter(
        Q(product_name__icontains=query) |
        Q(description__icontains=query) |
        Q(short_description__icontains=query) |
        Q(sku__icontains=query) |
        Q(category__category_name__icontains=query),
        is_active=True
    ).select_related('category').prefetch_related('images')

    # üìä –§–∏–ª—å—Ç—Ä –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º –≤ –ø–æ–∏—Å–∫–µ
    size_filter = request.GET.get('size')
    if size_filter:
        try:
            length, width = map(int, size_filter.split('x'))
            results = results.filter(
                boat_mat_length=length,
                boat_mat_width=width
            )
        except ValueError:
            pass

    # üìä –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
    sort_by = request.GET.get('sort', 'relevance')
    if sort_by == 'price_asc':
        results = results.order_by('price')
    elif sort_by == 'price_desc':
        results = results.order_by('-price')
    elif sort_by == 'name':
        results = results.order_by('product_name')
    elif sort_by == 'size':
        results = results.order_by('boat_mat_length', 'boat_mat_width')
    else:  # relevance
        results = results.order_by('-is_featured', '-newest_product', 'product_name')

    # üìÑ –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    paginator = Paginator(results, 12)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    context = {
        'query': query,
        'page_obj': page_obj,
        'total_results': results.count(),
        'sort_by': sort_by,
        'size_filter': size_filter,
        'page_title': f'–ü–æ–∏—Å–∫ –ª–æ–¥–æ—á–Ω—ã—Ö –∫–æ–≤—Ä–∏–∫–æ–≤: {query}',
        'page_description': f'–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ "{query}" —Å—Ä–µ–¥–∏ –ª–æ–¥–æ—á–Ω—ã—Ö –∫–æ–≤—Ä–∏–∫–æ–≤',
        'section_type': 'boats',
    }

    return render(request, 'boats/search_results.html', context)


@require_http_methods(["POST"])
@login_required
def boat_add_to_cart(request, uid):
    """
    üõí –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–¥–æ—á–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
    ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–¢ –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é add_to_cart –∏–∑ products
    """
    return add_to_cart(request, uid)


@require_http_methods(["POST"])
@login_required
def boat_add_to_wishlist(request, uid):
    """
    ‚ù§Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–¥–æ—á–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–¢ –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é add_to_wishlist –∏–∑ products
    """
    return add_to_wishlist(request, uid)


def boat_get_product_info(request, slug):
    """
    üìä AJAX: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ –ª–æ–¥–∫–∏
    ‚úÖ –†–ê–ë–û–¢–ê–ï–¢ –°: BoatProduct (–æ—Ç–¥–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞)
    """

    if request.method != 'GET':
        return JsonResponse({'error': 'Method not allowed'}, status=405)

    try:
        product = get_object_or_404(
            BoatProduct.objects.select_related('category'),
            slug=slug,
            is_active=True
        )

        # üìê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–º–µ—Ä–∞—Ö
        dimensions = product.get_dimensions_display()

        data = {
            'id': product.id,
            'name': product.product_name,
            'price': float(product.price),
            'price_formatted': product.get_display_price(),
            'category': product.category.category_name,
            'dimensions': dimensions,  # üõ•Ô∏è –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–º–µ—Ä–∞—Ö
            'main_image': product.get_main_image().image.url if product.get_main_image() else None,
            'is_featured': product.is_featured,
            'newest_product': product.newest_product,
            'in_stock': product.is_in_stock(),
            'stock_quantity': product.stock_quantity,
            'url': product.get_absolute_url()
        }

        return JsonResponse(data)

    except Exception as e:
        return JsonResponse({'error': str(e)}, status=404)


def boat_category_products_count(request):
    """
    üìä AJAX: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö (–¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
    ‚úÖ –†–ê–ë–û–¢–ê–ï–¢ –°: BoatCategory, BoatProduct (–æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã)
    """

    categories_data = []

    for category in BoatCategory.objects.filter(is_active=True):
        products_count = category.get_products_count()

        categories_data.append({
            'id': category.id,
            'name': category.category_name,
            'slug': category.slug,
            'products_count': products_count,
            'url': category.get_absolute_url(),
            'image': category.category_image.url if category.category_image else None
        })

    return JsonResponse({'categories': categories_data})

# üìù –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò:
#
# ‚úÖ –°–û–ó–î–ê–ù–´ VIEWS –î–õ–Ø –û–¢–î–ï–õ–¨–ù–´–• –ú–û–î–ï–õ–ï–ô BOATS:
# 1. boat_category_list - –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–¥–æ–∫
# 2. boat_product_list - —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
# 3. boat_product_detail - –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–æ–≤–∞—Ä–∞
# 4. boat_search - –ø–æ–∏—Å–∫ —Å—Ä–µ–¥–∏ –ª–æ–¥–æ–∫
# 5. boat_add_to_cart - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
# 6. boat_add_to_wishlist - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
# 7. boat_get_product_info - AJAX –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ
# 8. boat_category_products_count - AJAX —Å—á–µ—Ç—á–∏–∫–∏
#
# üõ•Ô∏è –£–ù–ò–ö–ê–õ–¨–ù–´–ï –û–°–û–ë–ï–ù–ù–û–°–¢–ò –î–õ–Ø –õ–û–î–û–ö:
# ‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º (min/max length/width)
# ‚Ä¢ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º (size_asc, size_desc)
# ‚Ä¢ –ü–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º —Ä–∞–∑–º–µ—Ä–æ–≤ (120x80)
# ‚Ä¢ related_by_size - —Ç–æ–≤–∞—Ä—ã —Å –ø–æ—Ö–æ–∂–∏–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
# ‚Ä¢ boat_dimensions –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤
# ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ –∏–∑ products.models.Color
#
# üìä –ù–û–í–´–ï –ö–û–ù–¢–ï–ö–°–¢–´ –î–õ–Ø –®–ê–ë–õ–û–ù–û–í:
# ‚Ä¢ boat_dimensions - —Ä–∞–∑–º–µ—Ä—ã –∫–æ–≤—Ä–∏–∫–∞
# ‚Ä¢ size_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
# ‚Ä¢ current_filters - —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã —Ä–∞–∑–º–µ—Ä–æ–≤
# ‚Ä¢ related_by_size - —Ç–æ–≤–∞—Ä—ã —Å –ø–æ—Ö–æ–∂–∏–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
# ‚Ä¢ show_boat_features - —Ñ–ª–∞–≥ –ø–æ–∫–∞–∑–∞ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –ª–æ–¥–æ–∫
#
# üéØ –†–ê–ë–û–¢–ê–ï–¢ –° –û–¢–î–ï–õ–¨–ù–´–ú–ò –¢–ê–ë–õ–ò–¶–ê–ú–ò:
# ‚Ä¢ boats_boatcategory - –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª–æ–¥–æ–∫
# ‚Ä¢ boats_boatproduct - –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–µ —Ç–æ–≤–∞—Ä—ã –ª–æ–¥–æ–∫
# ‚Ä¢ boats_boatproductimage - –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–¥–æ–∫
# ‚Ä¢ products_color - –æ–±—â–∏–µ —Ü–≤–µ—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ)