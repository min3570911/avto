# üìÅ boats/views.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï View —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –ª–æ–¥–æ–∫
# üõ•Ô∏è –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞ –ª–æ–¥–æ–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º proxy-–º–æ–¥–µ–ª–µ–π
# üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç references.models ‚Üí products.models

from django.shortcuts import render, get_object_or_404
from django.core.paginator import Paginator
from django.contrib.auth.decorators import login_required
from django.http import JsonResponse
from django.views.decorators.http import require_http_methods
from django.db.models import Q

from .models import BoatCategory, BoatProduct
from products.models import Color  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: references ‚Üí products
from products.views import (  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: references ‚Üí products
    add_to_cart,  # üõí –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
    add_to_wishlist,  # ‚ù§Ô∏è –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
)


def boat_category_list(request):
    """
    üõ•Ô∏è –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∞–∑–¥–µ–ª–∞ "–õ–æ–¥–∫–∏" - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ª–æ–¥–æ–∫
    """
    # üìÇ –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ—Ä–Ω–µ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª–æ–¥–æ–∫ (–±–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª–µ–π)
    root_categories = BoatCategory.objects.filter(
        parent__isnull=True,
        is_active=True
    ).order_by('display_order', 'category_name')

    # üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ª–æ–¥–∫–∞–º
    total_boat_products = BoatProduct.objects.count()
    newest_boats = BoatProduct.objects.filter(newest_product=True)[:6]

    context = {
        'categories': root_categories,
        'total_products': total_boat_products,
        'newest_products': newest_boats,
        'page_title': '–õ–æ–¥–æ—á–Ω—ã–µ –∫–æ–≤—Ä–∏–∫–∏',
        'page_description': '–ö–∞—Ç–∞–ª–æ–≥ –∫–æ–≤—Ä–∏–∫–æ–≤ –¥–ª—è –ª–æ–¥–æ–∫ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–∞—Ä–æ–∫ –∏ –º–æ–¥–µ–ª–µ–π',
        'section_type': 'boats',  # üè∑Ô∏è –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–∞–∑–¥–µ–ª–∞
    }

    return render(request, 'boats/category_list.html', context)


def boat_product_list(request, slug):
    """
    üõ•Ô∏è –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª–æ–¥–æ–∫
    ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–≤–µ—Ä—à–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è
    """
    # üìÇ –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ª–æ–¥–æ–∫ –ø–æ slug
    category = get_object_or_404(BoatCategory, slug=slug, is_active=True)

    # üì¶ –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
    products = BoatProduct.objects.filter(
        Q(category=category) | Q(category__parent=category)
    ).select_related('category').prefetch_related('product_images')

    # üîç –ü–æ–∏—Å–∫
    search_query = request.GET.get('search', '')
    if search_query:
        products = products.filter(
            Q(product_name__icontains=search_query) |
            Q(product_desription__icontains=search_query)
        )

    # üìä –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    sort_by = request.GET.get('sort', 'name')
    if sort_by == 'price_asc':
        products = products.order_by('price')
    elif sort_by == 'price_desc':
        products = products.order_by('-price')
    elif sort_by == 'newest':
        products = products.order_by('-created_at')
    else:  # name
        products = products.order_by('product_name')

    # üìÑ –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    paginator = Paginator(products, 12)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    # üìÇ –î–æ—á–µ—Ä–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    subcategories = BoatCategory.objects.filter(parent=category, is_active=True)

    context = {
        'category': category,
        'subcategories': subcategories,
        'page_obj': page_obj,
        'search_query': search_query,
        'sort_by': sort_by,
        'total_products': products.count(),
        'page_title': f'–õ–æ–¥–æ—á–Ω—ã–µ –∫–æ–≤—Ä–∏–∫–∏ {category.category_name}',
        'page_description': category.get_seo_description() if hasattr(category, 'get_seo_description') else f'–ö–æ–≤—Ä–∏–∫–∏ –¥–ª—è –ª–æ–¥–æ–∫ {category.category_name}',
        'section_type': 'boats',
    }

    return render(request, 'boats/product_list.html', context)


def boat_product_detail(request, slug):
    """
    üõ•Ô∏è –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–æ–≤–∞—Ä–∞ –ª–æ–¥–∫–∏
    ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–≤–µ—Ä—à–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–º–µ—Ä–æ–≤ –ª–æ–¥–æ–∫
    """
    # üì¶ –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä –ª–æ–¥–∫–∏ –ø–æ slug
    product = get_object_or_404(BoatProduct, slug=slug)

    # üîÑ –ü–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª–æ–¥–æ–∫
    similar_products = BoatProduct.objects.filter(
        category=product.category
    ).exclude(id=product.id)[:4]

    # üìê –û—Å–æ–±—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–¥–æ–∫ (—Ä–∞–∑–º–µ—Ä—ã)
    boat_dimensions = None
    if product.boat_mat_length or product.boat_mat_width:
        boat_dimensions = {
            'length': product.boat_mat_length,
            'width': product.boat_mat_width,
            'display': product.get_boat_dimensions()
        }

    # üé® –¶–≤–µ—Ç–∞ –¥–ª—è –ª–æ–¥–æ–∫ (–∫–æ–≤—Ä–∏–∫–∏ –∏ –æ–∫–∞–Ω—Ç–æ–≤–∫–∞)
    carpet_colors = Color.objects.filter(color_type='carpet', is_available=True)
    border_colors = Color.objects.filter(color_type='border', is_available=True)

    context = {
        'product': product,
        'similar_products': similar_products,
        'boat_dimensions': boat_dimensions,  # üõ•Ô∏è –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–¥–æ–∫
        'carpet_colors': carpet_colors,  # üõ•Ô∏è –¶–≤–µ—Ç–∞ –∫–æ–≤—Ä–∏–∫–æ–≤ –¥–ª—è –ª–æ–¥–æ–∫
        'border_colors': border_colors,  # üõ•Ô∏è –¶–≤–µ—Ç–∞ –æ–∫–∞–Ω—Ç–æ–≤–∫–∏ –¥–ª—è –ª–æ–¥–æ–∫
        'page_title': product.product_name,
        'page_description': product.meta_description or f'–ö–æ–≤—Ä–∏–∫ –¥–ª—è –ª–æ–¥–∫–∏ {product.product_name}',
        'section_type': 'boats',
        'show_boat_features': True,  # üõ•Ô∏è –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ª–æ–¥–æ–∫
    }

    return render(request, 'boats/product_detail.html', context)


@require_http_methods(["POST"])
@login_required
def boat_add_to_cart(request, uid):
    """
    üõí –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–¥–æ—á–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
    ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    """
    return add_to_cart(request, uid)


@require_http_methods(["POST"])
@login_required
def boat_add_to_wishlist(request, uid):
    """
    ‚ù§Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–¥–æ—á–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
    """
    return add_to_wishlist(request, uid)


def boat_search(request):
    """
    üîç –ü–æ–∏—Å–∫ —Å—Ä–µ–¥–∏ –ª–æ–¥–æ—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    ‚úÖ –ù–û–í–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è - —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –¥–ª—è –ª–æ–¥–æ–∫
    """
    query = request.GET.get('q', '').strip()
    sort_by = request.GET.get('sort', 'name')

    products = BoatProduct.objects.none()

    if query:
        # üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –æ–ø–∏—Å–∞–Ω–∏—é –∏ –∞—Ä—Ç–∏–∫—É–ª—É
        products = BoatProduct.objects.filter(
            Q(product_name__icontains=query) |
            Q(product_desription__icontains=query) |
            Q(product_sku__icontains=query)
        ).distinct()

        # üî¢ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if sort_by == 'price_asc':
            products = products.order_by('price')
        elif sort_by == 'price_desc':
            products = products.order_by('-price')
        elif sort_by == 'newest':
            products = products.order_by('-created_at')
        else:  # name
            products = products.order_by('product_name')

    # üìÑ –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    paginator = Paginator(products, 12)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    context = {
        'query': query,
        'page_obj': page_obj,
        'sort_by': sort_by,
        'total_products': products.count(),
        'page_title': f'–ü–æ–∏—Å–∫ –ª–æ–¥–æ–∫: {query}' if query else '–ü–æ–∏—Å–∫ –ª–æ–¥–æ–∫',
        'section_type': 'boats',
    }

    return render(request, 'boats/search_results.html', context)

# üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
# ‚úÖ –ó–ê–ú–ï–ù–ï–ù–û: from references.models ‚Üí from products.models
# ‚úÖ –ó–ê–ú–ï–ù–ï–ù–û: from references.views ‚Üí from products.views
# ‚úÖ –ó–ê–í–ï–†–®–ï–ù–´: –í—Å–µ –Ω–µ–ø–æ–ª–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
# ‚úÖ –î–û–ë–ê–í–õ–ï–ù–ê: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –ª–æ–¥–æ–∫ –≤ product_detail
# ‚úÖ –î–û–ë–ê–í–õ–ï–ù–ê: –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ boat_search
# ‚úÖ –°–û–•–†–ê–ù–ï–ù–û: –õ–æ–¥–æ—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–µ–∑ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–π –∏ –ø–æ–¥–ø—è—Ç–Ω–∏–∫–∞