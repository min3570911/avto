# üìÅ boats/views.py - –ü–û–õ–ù–´–ô –§–ê–ô–õ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –ª–æ–¥–æ–∫
# üõ•Ô∏è –†–∞–±–æ—á–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–¥–æ–∫
# ‚úÖ –ü–†–û–í–ï–†–ï–ù–û: –õ–æ–≥–∏–∫–∞ –≤–∑—è—Ç–∞ —Å —Ä–∞–±–æ—á–µ–≥–æ products/views.py
# üõí –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ë–ï–ó –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–π

import random
from django.shortcuts import render, redirect, get_object_or_404
from django.http import HttpResponseRedirect, JsonResponse
from django.contrib import messages
from django.urls import reverse
from django.contrib.auth.decorators import login_required
from django.core.paginator import Paginator
from django.db.models import Q

# üõ•Ô∏è –ú–æ–¥–µ–ª–∏ –ª–æ–¥–æ–∫
from .models import BoatCategory, BoatProduct, BoatProductImage

# üé® –û–±—â–∏–µ –º–æ–¥–µ–ª–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ò–ú–ü–û–†–¢–´
from common.models import Color, ProductReview, Wishlist
from accounts.models import Cart, CartItem
from django.contrib.contenttypes.models import ContentType




def boat_category_list(request):
    """
    üõ•Ô∏è –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–¥–æ–∫ = –∫–∞—Ç–∞–ª–æ–≥ –≤—Å–µ—Ö –ª–æ–¥–æ–∫ (–∫–∞–∫ products_catalog)

    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –ª–æ–¥–æ–∫ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É + —Ä–∞–∑–º–µ—Ä—ã –ª–æ–¥–æ–∫.
    """
    # üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    search_query = request.GET.get("search", "")
    sort_by = request.GET.get("sort", "-created_at")
    category_filter = request.GET.get("category", "")
    per_page = request.GET.get("per_page", "12")

    # üõ•Ô∏è –§–∏–ª—å—Ç—Ä—ã —Ä–∞–∑–º–µ—Ä–æ–≤ –ª–æ–¥–æ—á–Ω–æ–≥–æ –∫–æ–≤—Ä–∏–∫–∞
    min_length = request.GET.get("min_length", "")
    max_length = request.GET.get("max_length", "")
    min_width = request.GET.get("min_width", "")
    max_width = request.GET.get("max_width", "")

    # üì¶ –ë–∞–∑–æ–≤—ã–π queryset –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ª–æ–¥–æ–∫
    products = BoatProduct.objects.all().select_related("category").prefetch_related("images")

    # üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏—é
    if search_query:
        products = products.filter(
            Q(product_name__icontains=search_query)
            | Q(product_desription__icontains=search_query)
            | Q(product_sku__icontains=search_query)
        )

    # üìÇ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if category_filter:
        products = products.filter(category__slug=category_filter)

    # üìê –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º –∫–æ–≤—Ä–∏–∫–∞ –ª–æ–¥–∫–∏
    if min_length:
        try:
            products = products.filter(boat_mat_length__gte=int(min_length))
        except ValueError:
            pass

    if max_length:
        try:
            products = products.filter(boat_mat_length__lte=int(max_length))
        except ValueError:
            pass

    if min_width:
        try:
            products = products.filter(boat_mat_width__gte=int(min_width))
        except ValueError:
            pass

    if max_width:
        try:
            products = products.filter(boat_mat_width__lte=int(max_width))
        except ValueError:
            pass

    # üìä –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
    sort_options = {
        "name": "product_name",
        "-name": "-product_name",
        "price": "price",
        "-price": "-price",
        "newest": "-created_at",
        "oldest": "created_at",
    }
    products = products.order_by(sort_options.get(sort_by, "-created_at"))

    # üî¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ per_page
    if per_page == "all":
        total_products = products.count()
        if total_products > 500:
            messages.warning(request,
                             f"–ü–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä–≤—ã–µ 500 –∏–∑ {total_products} —Ç–æ–≤–∞—Ä–æ–≤. "
                             "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞.")
            per_page_num = 500
        else:
            per_page_num = total_products or 1
    else:
        try:
            per_page_num = int(per_page)
            if per_page_num not in [12, 24, 48, 96]:
                per_page_num = 12
        except (ValueError, TypeError):
            per_page_num = 12

    # üìÑ –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    paginator = Paginator(products, per_page_num)
    page_number = request.GET.get("page")
    page_obj = paginator.get_page(page_number)

    # üìÇ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª–æ–¥–æ–∫
    categories = (
        BoatCategory.objects.filter(is_active=True)
        .order_by("display_order", "category_name")
    )

    # üìä –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–±–ª–æ–Ω–∞
    context = {
        "page_obj": page_obj,
        "products": page_obj.object_list,
        "categories": categories,
        "search_query": search_query,
        "sort_by": sort_by,
        "category_filter": category_filter,
        "per_page": per_page,
        "total_products": paginator.count,
        "current_page": page_obj.number,
        "total_pages": paginator.num_pages,
        # üõ•Ô∏è –ù–û–í–û–ï: –§–∏–ª—å—Ç—Ä—ã —Ä–∞–∑–º–µ—Ä–æ–≤
        "min_length": min_length,
        "max_length": max_length,
        "min_width": min_width,
        "max_width": max_width,
        # üè∑Ô∏è –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∞–∑–¥–µ–ª–∞
        "section_type": "boats",
        "page_title": "üõ•Ô∏è –õ–æ–¥–æ—á–Ω—ã–µ –∫–æ–≤—Ä–∏–∫–∏ EVA",
        "page_description": "–ö–∞—Ç–∞–ª–æ–≥ –∫–æ–≤—Ä–∏–∫–æ–≤ –¥–ª—è –ª–æ–¥–æ–∫ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–∞—Ä–æ–∫ –∏ –º–æ–¥–µ–ª–µ–π",
    }

    return render(request, "boats/category_list.html", context)


def boat_product_list(request, slug):
    """üìÇ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –ª–æ–¥–æ–∫ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∫–∞–∫ products_by_category)"""
    category = get_object_or_404(BoatCategory, slug=slug)

    if not category.is_active:
        messages.warning(request, "–≠—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ª–æ–¥–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return redirect("boats:category_list")

    # üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    sort_by = request.GET.get("sort", "-created_at")
    search_query = request.GET.get("search", "")
    per_page = request.GET.get("per_page", "12")

    # üõ•Ô∏è –§–∏–ª—å—Ç—Ä—ã —Ä–∞–∑–º–µ—Ä–æ–≤ –ª–æ–¥–æ—á–Ω–æ–≥–æ –∫–æ–≤—Ä–∏–∫–∞
    min_length = request.GET.get("min_length", "")
    max_length = request.GET.get("max_length", "")
    min_width = request.GET.get("min_width", "")
    max_width = request.GET.get("max_width", "")

    # üì¶ –¢–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    products = (
        BoatProduct.objects.filter(category=category)
        .select_related("category")
        .prefetch_related("images")
    )

    # üîç –ü–æ–∏—Å–∫ –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if search_query:
        products = products.filter(
            Q(product_name__icontains=search_query)
            | Q(product_desription__icontains=search_query)
            | Q(product_sku__icontains=search_query)
        )

    # üìê –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º –∫–æ–≤—Ä–∏–∫–∞ –ª–æ–¥–∫–∏
    if min_length:
        try:
            products = products.filter(boat_mat_length__gte=int(min_length))
        except ValueError:
            pass

    if max_length:
        try:
            products = products.filter(boat_mat_length__lte=int(max_length))
        except ValueError:
            pass

    if min_width:
        try:
            products = products.filter(boat_mat_width__gte=int(min_width))
        except ValueError:
            pass

    if max_width:
        try:
            products = products.filter(boat_mat_width__lte=int(max_width))
        except ValueError:
            pass

    # üìä –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    sort_options = {
        "name": "product_name",
        "-name": "-product_name",
        "price": "price",
        "-price": "-price",
        "newest": "-created_at",
        "oldest": "created_at",
    }
    products = products.order_by(sort_options.get(sort_by, "-created_at"))

    # üî¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ per_page
    if per_page == "all":
        total_products = products.count()
        if total_products > 500:
            messages.warning(request,
                             f"–ü–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä–≤—ã–µ 500 –∏–∑ {total_products} —Ç–æ–≤–∞—Ä–æ–≤. "
                             "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞.")
            per_page_num = 500
        else:
            per_page_num = total_products or 1
    else:
        try:
            per_page_num = int(per_page)
            if per_page_num not in [12, 24, 48, 96]:
                per_page_num = 12
        except (ValueError, TypeError):
            per_page_num = 12

    # üìÑ –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    paginator = Paginator(products, per_page_num)
    page_number = request.GET.get("page")
    page_obj = paginator.get_page(page_number)

    # üìÇ –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª–æ–¥–æ–∫ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
    categories = (
        BoatCategory.objects.filter(is_active=True)
        .order_by("display_order", "category_name")
    )

    # üß≠ –•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏
    breadcrumbs = [
        {'name': '–ì–ª–∞–≤–Ω–∞—è', 'url': '/'},
        {'name': '–õ–æ–¥–∫–∏', 'url': '/boats/'},
        {'name': category.category_name, 'url': ''}
    ]

    # üìä –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–±–ª–æ–Ω–∞
    context = {
        "category": category,
        "page_obj": page_obj,
        "products": page_obj.object_list,
        "categories": categories,
        "search_query": search_query,
        "sort_by": sort_by,
        "per_page": per_page,
        "total_products": paginator.count,
        "current_page": page_obj.number,
        "total_pages": paginator.num_pages,
        # üõ•Ô∏è –§–∏–ª—å—Ç—Ä—ã —Ä–∞–∑–º–µ—Ä–æ–≤
        "min_length": min_length,
        "max_length": max_length,
        "min_width": min_width,
        "max_width": max_width,
        "breadcrumbs": breadcrumbs,
        "section_type": "boats",
        "page_title": f"üõ•Ô∏è –õ–æ–¥–æ—á–Ω—ã–µ –∫–æ–≤—Ä–∏–∫–∏ {category.category_name}",
        "page_description": f"–ö–æ–≤—Ä–∏–∫–∏ EVA –¥–ª—è –ª–æ–¥–æ–∫ {category.category_name}",
    }

    return render(request, "boats/product_list.html", context)


def boat_product_detail(request, slug):
    """
    üõ•Ô∏è –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–æ–≤–∞—Ä–∞ –ª–æ–¥–∫–∏ (–¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø get_product –ë–ï–ó –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–π)

    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    ‚úÖ –û—Ç–∑—ã–≤—ã —Å –ª–∞–π–∫–∞–º–∏/–¥–∏–∑–ª–∞–π–∫–∞–º–∏
    ‚úÖ –í—ã–±–æ—Ä —Ü–≤–µ—Ç–æ–≤ (–∫–æ–≤—Ä–∏–∫–∞ –∏ –∫–∞–Ω—Ç–∞)
    ‚úÖ –ü–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É/–∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    ‚ùå –£–ë–†–ê–ù–û: –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏, –ø–æ–¥–ø—è—Ç–Ω–∏–∫
    """
    from products.forms import ReviewForm

    # üì¶ –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä –ª–æ–¥–∫–∏ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
    product = get_object_or_404(
        BoatProduct.objects.select_related('category').prefetch_related('images'),
        slug=slug
    )

    # üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –æ—Ç–∑—ã–≤–∞ (–¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø –° PRODUCTS)
    if request.method == 'POST' and request.user.is_authenticated:
        try:
            stars = int(request.POST.get('stars', 0))
            content = request.POST.get('content', '').strip()

            if stars >= 1 and stars <= 5 and content:
                content_type = ContentType.objects.get_for_model(product)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ç–∑—ã–≤ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                existing_review = ProductReview.objects.filter(
                    user=request.user,
                    content_type=content_type,
                    object_id=product.pk,
                ).first()

                if existing_review:
                    messages.warning(request, "‚ùå –í—ã —É–∂–µ –æ—Å—Ç–∞–≤–ª—è–ª–∏ –æ—Ç–∑—ã–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.")
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤
                    ProductReview.objects.create(
                        user=request.user,
                        product=product, # GFK handles this automatically
                        stars=stars,
                        content=content
                    )
                    messages.success(request, "‚úÖ –í–∞—à –æ—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")

                return redirect('boats:product_detail', slug=slug)
            else:
                messages.error(request, "‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        except (ValueError, TypeError):
            messages.error(request, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞.")

    # üîÑ –ü–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ê–î–ê–ü–¢–ò–†–û–í–ê–ù–û –î–õ–Ø –õ–û–î–û–ö)
    similar_products = BoatProduct.objects.filter(
        category=product.category
    ).exclude(uid=product.uid).select_related('category').prefetch_related('images')[:4]

    # üé® –¶–≤–µ—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–µ –∏–∑ products - –¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø)
    colors_carpet = Color.objects.filter(
        color_type='carpet',
        is_available=True
    ).order_by('display_order', 'name')

    colors_border = Color.objects.filter(
        color_type='border',
        is_available=True
    ).order_by('display_order', 'name')

    # üìù –û—Ç–∑—ã–≤—ã —Ç–æ–≤–∞—Ä–∞ (–¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø –° PRODUCTS)
    content_type = ContentType.objects.get_for_model(product)
    reviews = ProductReview.objects.filter(
        content_type=content_type,
        object_id=product.pk
    ).order_by('-date_added')

    # üìä –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–±–ª–æ–Ω–∞ (–ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ü–û–õ–ù–´–ô)
    context = {
        'product': product,
        'similar_products': similar_products,
        'colors_carpet': colors_carpet,
        'colors_border': colors_border,
        'reviews': reviews,

        # üõ•Ô∏è –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –¥–ª—è –ª–æ–¥–æ–∫
        'section_type': 'boats',
        'page_title': f'üõ•Ô∏è {product.product_name} - –õ–æ–¥–æ—á–Ω—ã–π –∫–æ–≤—Ä–∏–∫',
    }

    return render(request, 'boats/product_detail.html', context)


def boat_search(request):
    """üîç –ü–æ–∏—Å–∫ –ª–æ–¥–æ–∫ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    query = request.GET.get('q', '')

    if not query:
        return render(request, 'boats/search_results.html', {
            'query': '',
            'results': [],
            'total_results': 0,
            'message': '–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª–æ–¥–æ—á–Ω—ã—Ö –∫–æ–≤—Ä–∏–∫–æ–≤'
        })

    # üîç –ü–æ–∏—Å–∫
    results = BoatProduct.objects.filter(
        Q(product_name__icontains=query) |
        Q(product_desription__icontains=query) |
        Q(product_sku__icontains=query) |
        Q(category__category_name__icontains=query)
    ).select_related('category').prefetch_related('images')

    # üìÑ –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    paginator = Paginator(results, 12)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    context = {
        'query': query,
        'page_obj': page_obj,
        'total_results': results.count(),
        'page_title': f'–ü–æ–∏—Å–∫ –ª–æ–¥–æ—á–Ω—ã—Ö –∫–æ–≤—Ä–∏–∫–æ–≤: {query}',
        'section_type': 'boats',
    }

    return render(request, 'boats/search_results.html', context)


# üõí –ö–û–†–ó–ò–ù–ê –î–õ–Ø –õ–û–î–û–ö (–ê–î–ê–ü–¢–ò–†–û–í–ê–ù–û –° PRODUCTS)


# üîß –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò:
#
# ‚úÖ –°–ö–û–ü–ò–†–û–í–ê–ù–û –° –†–ê–ë–û–ß–ï–ì–û products/views.py:
# ‚Ä¢ products_catalog ‚Üí boat_category_list
# ‚Ä¢ products_by_category ‚Üí boat_product_list
# ‚Ä¢ get_product ‚Üí boat_product_detail (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ—Ç–∑—ã–≤–æ–≤)
# ‚Ä¢ –í—Å—è –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏, –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
# ‚Ä¢ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è
# ‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤
#
# üõ•Ô∏è –ê–î–ê–ü–¢–ò–†–û–í–ê–ù–û –î–õ–Ø –õ–û–î–û–ö:
# ‚Ä¢ Product ‚Üí BoatProduct
# ‚Ä¢ Category ‚Üí BoatCategory
# ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ boat_mat_length/width
# ‚Ä¢ –£–±—Ä–∞–Ω—ã –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏ (KitVariant)
# ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã (boat_dimensions, show_boat_features)
# ‚Ä¢ –§—É–Ω–∫—Ü–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã –ë–ï–ó –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–π –∏ –ø–æ–¥–ø—è—Ç–Ω–∏–∫–∞
#
# üìã –†–ï–ó–£–õ–¨–¢–ê–¢:
# ‚Ä¢ –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—á–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
# ‚Ä¢ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ä–∞–±–æ—Ç–µ —Å —Ç–µ–º–∏ –∂–µ —à–∞–±–ª–æ–Ω–∞–º–∏ —á—Ç–æ –∏ products
# ‚Ä¢ –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –º–µ–∂–¥—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏ –∏ –ª–æ–¥–∫–∞–º–∏
# ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ë–ï–ó –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–π