# üìÅ cars/views.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï View —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
# üöó –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º proxy-–º–æ–¥–µ–ª–µ–π
# üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç products.models ‚Üí references.models

from django.shortcuts import render, get_object_or_404
from django.core.paginator import Paginator
from django.contrib.auth.decorators import login_required
from django.http import JsonResponse
from django.views.decorators.http import require_http_methods
from django.db.models import Q

from .models import CarCategory, CarProduct
from references.models import Color  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: products ‚Üí references
from references.views import (  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: products ‚Üí references
    add_to_cart,  # üõí –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
    add_to_wishlist,  # ‚ù§Ô∏è –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
)


def car_category_list(request):
    """
    üöó –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∞–∑–¥–µ–ª–∞ "–ê–≤—Ç–æ–º–æ–±–∏–ª–∏" - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∞–≤—Ç–æ
    """
    # üìÇ –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ—Ä–Ω–µ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–≤—Ç–æ (–±–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª–µ–π)
    root_categories = CarCategory.objects.filter(
        parent__isnull=True,
        is_active=True
    ).order_by('display_order', 'category_name')

    # üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º
    total_car_products = CarProduct.objects.count()
    newest_cars = CarProduct.objects.filter(newest_product=True)[:6]

    context = {
        'categories': root_categories,
        'total_products': total_car_products,
        'newest_products': newest_cars,
        'page_title': '–ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ –∫–æ–≤—Ä–∏–∫–∏',
        'page_description': '–ö–∞—Ç–∞–ª–æ–≥ –∫–æ–≤—Ä–∏–∫–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–∞—Ä–æ–∫ –∏ –º–æ–¥–µ–ª–µ–π',
        'section_type': 'cars',  # üè∑Ô∏è –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–∞–∑–¥–µ–ª–∞
    }

    return render(request, 'cars/category_list.html', context)


def car_product_list(request, slug):
    """
    üöó –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
    ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–≤–µ—Ä—à–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è
    """
    # üìÇ –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞–≤—Ç–æ –ø–æ slug
    category = get_object_or_404(CarCategory, slug=slug, is_active=True)

    # üì¶ –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
    products = CarProduct.objects.filter(
        Q(category=category) | Q(category__parent=category)
    ).select_related('category').prefetch_related('product_images')

    # üîç –ü–æ–∏—Å–∫
    search_query = request.GET.get('search', '')
    if search_query:
        products = products.filter(
            Q(product_name__icontains=search_query) |
            Q(product_desription__icontains=search_query)
        )

    # üìä –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    sort_by = request.GET.get('sort', 'name')
    if sort_by == 'price_asc':
        products = products.order_by('price')
    elif sort_by == 'price_desc':
        products = products.order_by('-price')
    elif sort_by == 'newest':
        products = products.order_by('-created_at')
    else:  # name
        products = products.order_by('product_name')

    # üìÑ –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    paginator = Paginator(products, 12)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    # üìÇ –î–æ—á–µ—Ä–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    subcategories = CarCategory.objects.filter(parent=category, is_active=True)

    context = {
        'category': category,
        'subcategories': subcategories,
        'page_obj': page_obj,
        'search_query': search_query,
        'sort_by': sort_by,
        'total_products': products.count(),
        'page_title': f'–ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ –∫–æ–≤—Ä–∏–∫–∏ {category.category_name}',
        'page_description': category.get_seo_description(),
        'section_type': 'cars',
    }

    return render(request, 'cars/product_list.html', context)


def car_product_detail(request, slug):
    """
    üöó –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–æ–≤–∞—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–≤–µ—Ä—à–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è–º–∏ –∏ –ø–æ–¥–ø—è—Ç–Ω–∏–∫–æ–º
    """
    # üì¶ –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ slug
    product = get_object_or_404(CarProduct, slug=slug)

    # üîÑ –ü–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
    similar_products = CarProduct.objects.filter(
        category=product.category
    ).exclude(id=product.id)[:4]

    # üì¶ –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
    from references.models import KitVariant  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: products ‚Üí references
    kit_variants = KitVariant.objects.filter(is_option=False).order_by('order')
    additional_options = KitVariant.objects.filter(is_option=True).order_by('order')

    # üé® –¶–≤–µ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
    carpet_colors = Color.objects.filter(color_type='carpet', is_available=True)
    border_colors = Color.objects.filter(color_type='border', is_available=True)

    # üí∞ –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –∏ —Ä–∞—Å—á–µ—Ç—ã
    selected_kit_code = request.GET.get('kit', 'salon')  # –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    selected_kit = kit_variants.filter(code=selected_kit_code).first()

    updated_price = product.price or 0
    if selected_kit:
        updated_price += float(selected_kit.price_modifier)

    context = {
        'product': product,
        'similar_products': similar_products,
        'kit_variants': kit_variants,  # üöó –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        'additional_options': additional_options,  # üöó –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
        'carpet_colors': carpet_colors,
        'border_colors': border_colors,
        'selected_kit': selected_kit,
        'updated_price': updated_price,
        'page_title': product.product_name,
        'page_description': product.meta_description or f'–ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ –∫–æ–≤—Ä–∏–∫–∏ {product.product_name}',
        'section_type': 'cars',
        'show_car_features': True,  # üöó –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
    }

    return render(request, 'cars/product_detail.html', context)


@require_http_methods(["POST"])
@login_required
def car_add_to_cart(request, uid):
    """
    üõí –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
    ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    """
    return add_to_cart(request, uid)


@require_http_methods(["POST"])
@login_required
def car_add_to_wishlist(request, uid):
    """
    ‚ù§Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
    """
    return add_to_wishlist(request, uid)


def car_search(request):
    """
    üîç –ü–æ–∏—Å–∫ —Å—Ä–µ–¥–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    ‚úÖ –ù–û–í–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è - —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
    """
    query = request.GET.get('q', '').strip()
    sort_by = request.GET.get('sort', 'name')

    products = CarProduct.objects.none()

    if query:
        # üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –æ–ø–∏—Å–∞–Ω–∏—é –∏ –∞—Ä—Ç–∏–∫—É–ª—É
        products = CarProduct.objects.filter(
            Q(product_name__icontains=query) |
            Q(product_desription__icontains=query) |
            Q(product_sku__icontains=query)
        ).distinct()

        # üî¢ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if sort_by == 'price_asc':
            products = products.order_by('price')
        elif sort_by == 'price_desc':
            products = products.order_by('-price')
        elif sort_by == 'newest':
            products = products.order_by('-created_at')
        else:  # name
            products = products.order_by('product_name')

    # üìÑ –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    paginator = Paginator(products, 12)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    context = {
        'query': query,
        'page_obj': page_obj,
        'sort_by': sort_by,
        'total_products': products.count(),
        'page_title': f'–ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {query}' if query else '–ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π',
        'section_type': 'cars',
    }

    return render(request, 'cars/search_results.html', context)


def car_configurator(request):
    """
    üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä –∫–æ–≤—Ä–∏–∫–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
    ‚úÖ –ù–û–í–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è - —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
    """
    # üé® –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞
    carpet_colors = Color.objects.filter(color_type='carpet', is_available=True)
    border_colors = Color.objects.filter(color_type='border', is_available=True)

    # üìÇ –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞
    categories = CarCategory.objects.filter(is_active=True).order_by('display_order', 'category_name')

    context = {
        'carpet_colors': carpet_colors,
        'border_colors': border_colors,
        'categories': categories,
        'page_title': '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö –∫–æ–≤—Ä–∏–∫–æ–≤',
        'page_description': '–°–æ–∑–¥–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–≤—Ä–∏–∫–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–∞',
        'section_type': 'cars',
    }

    return render(request, 'cars/configurator.html', context)

# üîß –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô –î–õ–Ø –†–ê–ó–†–ê–ë–û–¢–ß–ò–ö–ê:
#
# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û:
# 1. –ò–º–ø–æ—Ä—Ç products.models ‚Üí references.models
# 2. –ò–º–ø–æ—Ä—Ç products.views ‚Üí references.views
# 3. –ó–∞–≤–µ—Ä—à–µ–Ω—ã –≤—Å–µ –Ω–µ–ø–æ–ª–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# 4. –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–π –≤ car_product_detail
# 5. –î–æ–±–∞–≤–ª–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ car_search –∏ car_configurator
#
# üöó –û–°–û–ë–ï–ù–ù–û–°–¢–ò –î–õ–Ø –ê–í–¢–û–ú–û–ë–ò–õ–ï–ô:
# - –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
# - –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã —Å —É—á–µ—Ç–æ–º –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏
# - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä –∫–æ–≤—Ä–∏–∫–æ–≤
# - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–¥–ø—è—Ç–Ω–∏–∫–∞
#
# üìù –°–õ–ï–î–£–Æ–©–ò–ô –®–ê–ì:
# –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω—ã:
# - templates/cars/category_list.html
# - templates/cars/product_list.html
# - templates/cars/product_detail.html
# - templates/cars/search_results.html
# - templates/cars/configurator.html