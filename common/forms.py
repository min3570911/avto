# üìÅ common/forms.py
# üìù –§–û–†–ú–ê –û–¢–ó–´–í–û–í –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# üõ°Ô∏è –í–°–¢–†–û–ï–ù–ù–ê–Ø –ê–ù–¢–ò-–°–ü–ê–ú –ó–ê–©–ò–¢–ê: honeypot, –≤—Ä–µ–º—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è, –≤–∞–ª–∏–¥–∞—Ü–∏—è
# ‚úÖ –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤

from django import forms
from django.core.exceptions import ValidationError
from django.utils import timezone
from django.conf import settings
import time
import re

from .models import ProductReview


class UniversalReviewForm(forms.ModelForm):
    """
    üìù –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    üéØ –û–°–û–ë–ï–ù–ù–û–°–¢–ò:
    - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    - –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –∑–∞–ª–æ–≥–∏–Ω–µ–Ω–Ω—ã—Ö
    - –ê–≤—Ç–æ–æ–¥–æ–±—Ä–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    - –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∞–Ω—Ç–∏-—Å–ø–∞–º –∑–∞—â–∏—Ç–∞
    - Honeypot –ø–æ–ª—è –¥–ª—è –ª–æ–≤–ª–∏ –±–æ—Ç–æ–≤
    - –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
    - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–∏
    """

    # üë§ –ü–û–õ–ï –ò–ú–ï–ù–ò (–≤—Å–µ–≥–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ)
    reviewer_name = forms.CharField(
        max_length=100,
        required=True,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è',
            'id': 'id_reviewer_name'
        }),
        label="–í–∞—à–µ –∏–º—è",
        help_text="–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ"
    )

    # üìß –ü–û–õ–ï EMAIL (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ)
    reviewer_email = forms.EmailField(
        max_length=254,
        required=True,
        widget=forms.EmailInput(attrs={
            'class': 'form-control',
            'placeholder': '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email',
            'id': 'id_reviewer_email'
        }),
        label="–í–∞—à email",
        help_text="–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ (–Ω–µ –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è)"
    )

    # ‚≠ê –ó–í–ï–ó–î–û–ß–ö–ò (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —á–µ—Ä–µ–∑ JavaScript)
    stars = forms.ChoiceField(
        choices=[(i, i) for i in range(1, 6)],
        widget=forms.RadioSelect(attrs={
            'class': 'star-rating',
            'id': 'id_stars'
        }),
        label="–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞",
        required=True
    )

    # üìù –°–û–î–ï–†–ñ–ê–ù–ò–ï –û–¢–ó–´–í–ê
    content = forms.CharField(
        widget=forms.Textarea(attrs={
            'class': 'form-control',
            'rows': 5,
            'placeholder': '–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ —Ç–æ–≤–∞—Ä–µ...',
            'maxlength': 2000,
            'id': 'id_content'
        }),
        label="–í–∞—à –æ—Ç–∑—ã–≤",
        help_text="–ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤, –º–∞–∫—Å–∏–º—É–º 2000",
        max_length=2000,
        required=True
    )

    # üçØ HONEYPOT –ü–û–õ–Ø (—Å–∫—Ä—ã—Ç—ã–µ –ª–æ–≤—É—à–∫–∏ –¥–ª—è –±–æ—Ç–æ–≤)
    honeypot_name = forms.CharField(
        required=False,
        widget=forms.TextInput(attrs={
            'class': 'honeypot-field',
            'tabindex': '-1',
            'autocomplete': 'off'
        })
    )

    honeypot_email = forms.EmailField(
        required=False,
        widget=forms.EmailInput(attrs={
            'class': 'honeypot-field',
            'tabindex': '-1',
            'autocomplete': 'off'
        })
    )

    # ‚è±Ô∏è –°–ö–†–´–¢–´–ï –ü–û–õ–Ø –î–õ–Ø –ê–ù–¢–ò-–°–ü–ê–ú –ó–ê–©–ò–¢–´
    form_load_time = forms.FloatField(
        widget=forms.HiddenInput(),
        required=False
    )

    def __init__(self, *args, **kwargs):
        """
        üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ kwargs
        self.user = kwargs.pop('user', None)
        super().__init__(*args, **kwargs)

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –¥–µ–ª–∞–µ–º –ø–æ–ª—è –∏–º–µ–Ω–∏ –∏ email –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏
        if self.user and self.user.is_authenticated:
            self.fields['reviewer_name'].required = False
            self.fields['reviewer_email'].required = False
            self.fields['reviewer_name'].help_text = "–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è"
            self.fields['reviewer_email'].help_text = "–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è email –ø—Ä–æ—Ñ–∏–ª—è"

    def clean_reviewer_name(self):
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∞"""
        reviewer_name = self.cleaned_data.get('reviewer_name', '').strip()

        # –î–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–º—è –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
        if not reviewer_name and (not self.user or not self.user.is_authenticated):
            raise ValidationError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è.")

        # –ï—Å–ª–∏ –∏–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ª–æ–≥–∏–Ω–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
        if not reviewer_name and self.user and self.user.is_authenticated:
            return reviewer_name

        if len(reviewer_name) < 2:
            raise ValidationError("–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        if re.search(r'[<>{}"\'\\/]', reviewer_name):
            raise ValidationError("–ò–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã.")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ø–∞–º-—Å–ª–æ–≤–∞ –≤ –∏–º–µ–Ω–∏
        spam_patterns = [
            r'admin',
            r'moderator',
            r'test',
            r'spam',
            r'bot',
            r'www\.',
            r'http',
            r'\.com',
            r'\.ru'
        ]

        for pattern in spam_patterns:
            if re.search(pattern, reviewer_name.lower()):
                raise ValidationError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è.")

        return reviewer_name

    def clean_reviewer_email(self):
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è email –∞–≤—Ç–æ—Ä–∞"""
        reviewer_email = self.cleaned_data.get('reviewer_email', '').strip()

        # –î–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π email –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
        if not reviewer_email and (not self.user or not self.user.is_authenticated):
            raise ValidationError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à email.")

        # –ï—Å–ª–∏ email –Ω–µ —É–∫–∞–∑–∞–Ω, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ª–æ–≥–∏–Ω–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
        if not reviewer_email and self.user and self.user.is_authenticated:
            return reviewer_email

        # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è EmailField
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–º–µ–Ω—ã
        suspicious_domains = [
            'tempmail', 'guerrillamail', '10minutemail', 'mailinator',
            'throwaway', 'temp-mail', 'fakeemail', 'spambox'
        ]

        email_lower = reviewer_email.lower()
        for domain in suspicious_domains:
            if domain in email_lower:
                raise ValidationError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π email –∞–¥—Ä–µ—Å.")

        return reviewer_email

    def clean_content(self):
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞"""
        content = self.cleaned_data.get('content', '').strip()

        if not content:
            raise ValidationError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤.")

        if len(content) < 10:
            raise ValidationError("–û—Ç–∑—ã–≤ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.")

        if len(content) > 2000:
            raise ValidationError("–û—Ç–∑—ã–≤ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª–æ–≤.")

        # üõ°Ô∏è –ê–ù–¢–ò-–°–ü–ê–ú: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º-—Å–ª–æ–≤–∞
        spam_words = getattr(settings, 'SPAM_WORDS', [
            '–∫–∞–∑–∏–Ω–æ', 'casino', 'gambling', 'buy', 'cheap', 'discount',
            'free', 'viagra', 'porn', 'xxx', 'sex', 'adult',
            'money', 'cash', 'loan', 'credit', 'debt',
            'weight loss', 'miracle', 'guaranteed',
        ])

        content_lower = content.lower()
        found_spam_words = [word for word in spam_words if word in content_lower]

        if found_spam_words:
            raise ValidationError(
                f"–í–∞—à –æ—Ç–∑—ã–≤ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–ª–æ–≤–∞: {', '.join(found_spam_words)}. "
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ –æ —Ç–æ–≤–∞—Ä–µ."
            )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã
        if re.search(r'(.)\1{4,}', content):  # 5 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ–¥—Ä—è–¥
            raise ValidationError("–û—Ç–∑—ã–≤ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤.")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ URL –∏ email –≤ –æ—Ç–∑—ã–≤–µ
        url_pattern = r'https?://|www\.|\.com|\.ru|\.net|\.org'
        if re.search(url_pattern, content_lower):
            raise ValidationError("–°—Å—ã–ª–∫–∏ –≤ –æ—Ç–∑—ã–≤–∞—Ö –∑–∞–ø—Ä–µ—â–µ–Ω—ã.")

        email_pattern = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
        if re.search(email_pattern, content):
            raise ValidationError("–£–∫–∞–∑–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ –æ—Ç–∑—ã–≤–∞—Ö –∑–∞–ø—Ä–µ—â–µ–Ω–æ.")

        return content

    def clean_stars(self):
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ü–µ–Ω–∫–∏"""
        stars = self.cleaned_data.get('stars')

        try:
            stars_int = int(stars)
            if stars_int < 1 or stars_int > 5:
                raise ValidationError("–û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥.")
            return stars_int
        except (ValueError, TypeError):
            raise ValidationError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞.")

    def clean(self):
        """üõ°Ô∏è –û–ë–©–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –§–û–†–ú–´ —Å –∞–Ω—Ç–∏-—Å–ø–∞–º –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""
        cleaned_data = super().clean()

        # üçØ HONEYPOT: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≤—É—à–∫–∏ –¥–ª—è –±–æ—Ç–æ–≤
        honeypot_name = cleaned_data.get('honeypot_name')
        honeypot_email = cleaned_data.get('honeypot_email')

        if honeypot_name or honeypot_email:
            raise ValidationError("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

        # ‚è±Ô∏è –í–†–ï–ú–Ø –ó–ê–ü–û–õ–ù–ï–ù–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
        form_load_time = cleaned_data.get('form_load_time')
        if form_load_time:
            submit_time = time.time()
            fill_time = submit_time - form_load_time

            # –°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ = –±–æ—Ç
            if fill_time < 3:
                raise ValidationError(
                    "–§–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—á–∏—Ç–∞–π—Ç–µ –æ—Ç–∑—ã–≤ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞.")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            cleaned_data['calculated_submit_time'] = fill_time

        return cleaned_data

    def save(self, commit=True):
        """üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        review = super().save(commit=False)

        # üë§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if self.user and self.user.is_authenticated:
            # –î–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            review.user = self.user

            # –ó–∞–ø–æ–ª–Ω—è–µ–º –∏–º—è –∏ email –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã
            if not review.reviewer_name:
                review.reviewer_name = self.user.get_full_name() or self.user.username
            if not review.reviewer_email:
                review.reviewer_email = self.user.email or ""
        else:
            # –î–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            review.user = None

        # üîí –ú–æ–¥–µ—Ä–∞—Ü–∏—è: –∞–¥–º–∏–Ω—ã –ø–æ–ª—É—á–∞—é—Ç –∞–≤—Ç–æ–æ–¥–æ–±—Ä–µ–Ω–∏–µ, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±—É—é—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        if self.user and self.user.is_authenticated and (self.user.is_staff or self.user.is_superuser):
            review.is_approved = True  # –ê–¥–º–∏–Ω—ã –ø–æ–ª—É—á–∞—é—Ç –∞–≤—Ç–æ–æ–¥–æ–±—Ä–µ–Ω–∏–µ
        else:
            review.is_approved = False  # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±—É—é—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏

        if commit:
            review.save()

        return review

    class Meta:
        model = ProductReview
        fields = ['reviewer_name', 'reviewer_email', 'stars', 'content']

        # –°–∫—Ä—ã–≤–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è –∏–∑ Meta
        exclude = [
            'user', 'content_type', 'object_id', 'date_added',
            'is_approved', 'ip_address', 'user_agent', 'form_submit_time',
            'is_suspicious', 'spam_score', 'moderated_by', 'moderated_at'
        ]


# üîÑ –ê–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
AnonymousReviewForm = UniversalReviewForm


class ReviewModerationForm(forms.ModelForm):
    """
    üë®‚Äçüíº –§–æ—Ä–º–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–æ–≤
    """

    moderation_action = forms.ChoiceField(
        choices=[
            ('approve', '–û–¥–æ–±—Ä–∏—Ç—å'),
            ('reject', '–û—Ç–∫–ª–æ–Ω–∏—Ç—å'),
            ('mark_suspicious', '–ü–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π'),
            ('mark_safe', '–ü–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π'),
        ],
        widget=forms.RadioSelect(),
        required=True,
        label="–î–µ–π—Å—Ç–≤–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"
    )

    moderation_comment = forms.CharField(
        widget=forms.Textarea(attrs={'rows': 3, 'class': 'form-control'}),
        required=False,
        label="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞",
        help_text="–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ –ø—Ä–∏—á–∏–Ω–∞—Ö —Ä–µ—à–µ–Ω–∏—è"
    )

    class Meta:
        model = ProductReview
        fields = ['is_approved', 'is_suspicious', 'spam_score']
        widgets = {
            'is_approved': forms.CheckboxInput(attrs={'class': 'form-check-input'}),
            'is_suspicious': forms.CheckboxInput(attrs={'class': 'form-check-input'}),
            'spam_score': forms.NumberInput(attrs={'class': 'form-control', 'step': '0.1'}),
        }


# üìä –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–û–†–ú–´ –î–õ–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–ò –ò –ü–û–ò–°–ö–ê

class ReviewFilterForm(forms.Form):
    """üîç –§–æ—Ä–º–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–æ–≤ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""

    STATUS_CHOICES = [
        ('', '–í—Å–µ –æ—Ç–∑—ã–≤—ã'),
        ('pending', '–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏'),
        ('approved', '–û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ'),
        ('suspicious', '–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ'),
        ('anonymous', '–ê–Ω–æ–Ω–∏–º–Ω—ã–µ'),
    ]

    RATING_CHOICES = [
        ('', '–õ—é–±–∞—è –æ—Ü–µ–Ω–∫–∞'),
        ('1', '1 –∑–≤–µ–∑–¥–∞'),
        ('2', '2 –∑–≤–µ–∑–¥—ã'),
        ('3', '3 –∑–≤–µ–∑–¥—ã'),
        ('4', '4 –∑–≤–µ–∑–¥—ã'),
        ('5', '5 –∑–≤–µ–∑–¥'),
        ('low', '1-2 –∑–≤–µ–∑–¥—ã'),
        ('high', '4-5 –∑–≤–µ–∑–¥'),
    ]

    status = forms.ChoiceField(
        choices=STATUS_CHOICES,
        required=False,
        widget=forms.Select(attrs={'class': 'form-control'}),
        label="–°—Ç–∞—Ç—É—Å"
    )

    rating = forms.ChoiceField(
        choices=RATING_CHOICES,
        required=False,
        widget=forms.Select(attrs={'class': 'form-control'}),
        label="–û—Ü–µ–Ω–∫–∞"
    )

    search = forms.CharField(
        required=False,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': '–ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É –æ—Ç–∑—ã–≤–∞...'
        }),
        label="–ü–æ–∏—Å–∫"
    )

    date_from = forms.DateField(
        required=False,
        widget=forms.DateInput(attrs={'class': 'form-control', 'type': 'date'}),
        label="–° –¥–∞—Ç—ã"
    )

    date_to = forms.DateField(
        required=False,
        widget=forms.DateInput(attrs={'class': 'form-control', 'type': 'date'}),
        label="–ü–æ –¥–∞—Ç—É"
    )