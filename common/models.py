from django.db import models
from django.utils.html import mark_safe

from base.models import BaseModel
# üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏–∑ products, —Ç.–∫. –æ–Ω–æ –ø–æ–∫–∞ —Ç–∞–º
from products.storage import OverwriteStorage

# üé® –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ —Ü–≤–µ—Ç–æ–≤
COLOR_TYPE_CHOICES = (
    ('carpet', '–ö–æ–≤—Ä–∏–∫'),
    ('border', '–û–∫–∞–Ω—Ç–æ–≤–∫–∞')
)


class Color(BaseModel):
    """üé® –ú–æ–¥–µ–ª—å —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –∫–æ–≤—Ä–∏–∫–æ–≤ –∏ –æ–∫–∞–Ω—Ç–æ–≤–∫–∏"""
    name = models.CharField(max_length=50, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞")
    hex_code = models.CharField(
        max_length=7, verbose_name="HEX-–∫–æ–¥",
        help_text="–¶–≤–µ—Ç–æ–≤–æ–π –∫–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ #RRGGBB"
    )
    color_type = models.CharField(
        max_length=10, choices=COLOR_TYPE_CHOICES,
        default='carpet', verbose_name="–¢–∏–ø —Ü–≤–µ—Ç–∞"
    )
    display_order = models.PositiveSmallIntegerField(
        default=0, verbose_name="–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    )
    is_available = models.BooleanField(
        default=True, verbose_name="–î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞"
    )

    # üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ (—Å OverwriteStorage)
    carpet_image = models.ImageField(
        upload_to='colors/carpet',
        storage=OverwriteStorage(),
        null=True, blank=True,
        verbose_name="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–≤—Ä–∏–∫–∞",
        help_text="–î–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–≤—Ä–∏–∫–∞ —ç—Ç–æ–≥–æ —Ü–≤–µ—Ç–∞"
    )
    border_image = models.ImageField(
        upload_to='colors/border',
        storage=OverwriteStorage(),
        null=True, blank=True,
        verbose_name="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–∫–∞–Ω—Ç–æ–≤–∫–∏",
        help_text="–î–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–∫–∞–Ω—Ç–æ–≤–∫–∏ —ç—Ç–æ–≥–æ —Ü–≤–µ—Ç–∞"
    )

    def carpet_preview(self):
        """üñºÔ∏è –ü—Ä–µ–≤—å—é –∫–æ–≤—Ä–∏–∫–∞ –≤ –∞–¥–º–∏–Ω–∫–µ"""
        if self.carpet_image:
            return mark_safe(
                f'<img src="{self.carpet_image.url}" width="50" height="50" style="object-fit: cover; border-radius: 3px;"/>')
        return "üö´ –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

    def border_preview(self):
        """üñºÔ∏è –ü—Ä–µ–≤—å—é –æ–∫–∞–Ω—Ç–æ–≤–∫–∏ –≤ –∞–¥–º–∏–Ω–∫–µ"""
        if self.border_image:
            return mark_safe(
                f'<img src="{self.border_image.url}" width="50" height="50" style="object-fit: cover; border-radius: 3px;"/>')
        return "üö´ –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

    def get_image_url(self):
        """üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞"""
        if self.color_type == 'carpet' and self.carpet_image:
            return self.carpet_image.url
        elif self.color_type == 'border' and self.border_image:
            return self.border_image.url
        return ""

    def color_preview_admin(self):
        """üé® –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ü–≤–µ—Ç–Ω–æ–π –∫–≤–∞–¥—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω–∫–µ"""
        return mark_safe(
            f'<div style="width:20px; height:20px; background-color:{self.hex_code}; '
            f'border:1px solid #666; border-radius:3px; display:inline-block;"></div>'
        )

    carpet_preview.short_description = "–ü—Ä–µ–≤—å—é –∫–æ–≤—Ä–∏–∫–∞"
    border_preview.short_description = "–ü—Ä–µ–≤—å—é –æ–∫–∞–Ω—Ç–æ–≤–∫–∏"
    color_preview_admin.short_description = "–¶–≤–µ—Ç"

    def __str__(self):
        availability = " (–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)" if not self.is_available else ""
        return f"{self.name} ({self.get_color_type_display()}){availability}"

    class Meta:
        verbose_name = "–¶–≤–µ—Ç"
        verbose_name_plural = "–¶–≤–µ—Ç–∞"
        ordering = ['color_type', 'display_order', 'name']
        # üÜï –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è —Ç–∞–±–ª–∏—Ü—ã, —á—Ç–æ–±—ã –æ–Ω–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        db_table = 'products_color'


from django.contrib.auth.models import User
from django.contrib.contenttypes.fields import GenericForeignKey
from django.contrib.contenttypes.models import ContentType


class ProductReview(BaseModel):
    """üìù –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã –¥–ª—è –ª—é–±—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""

    # Generic FK - –º–æ–∂–µ—Ç —Å—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞ –ª—é–±—É—é –º–æ–¥–µ–ª—å
    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)
    object_id = models.UUIDField()
    product = GenericForeignKey('content_type', 'object_id')

    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='reviews')
    stars = models.IntegerField(choices=[(i, i) for i in range(1, 6)])
    content = models.TextField()
    date_added = models.DateTimeField(auto_now_add=True)

    likes = models.ManyToManyField(User, related_name="liked_reviews", blank=True)
    dislikes = models.ManyToManyField(User, related_name="disliked_reviews", blank=True)

    def like_count(self):
        """üëç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤"""
        return self.likes.count()

    def dislike_count(self):
        """üëé –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–∑–ª–∞–π–∫–æ–≤"""
        return self.dislikes.count()

    def __str__(self):
        return f"–û—Ç–∑—ã–≤ –æ—Ç {self.user.username} –Ω–∞ {self.product} ({self.stars}‚≠ê)"

    class Meta:
        verbose_name = "–û—Ç–∑—ã–≤"
        verbose_name_plural = "–û—Ç–∑—ã–≤—ã"
        ordering = ['-date_added']
        db_table = 'products_productreview'
        indexes = [
            models.Index(fields=["content_type", "object_id"]),
        ]


class Wishlist(BaseModel):
    """‚ù§Ô∏è –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤"""
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name="wishlist")

    # Generic FK –¥–ª—è —Å–≤—è–∑–∏ —Å –ª—é–±—ã–º —Ç–æ–≤–∞—Ä–æ–º (Product, BoatProduct, etc.)
    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)
    object_id = models.UUIDField()
    product = GenericForeignKey('content_type', 'object_id')

    # –ü–æ–ª—è –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –∫–∞–∫ –∏ –≤ CartItem
    # KitVariant –æ—Å—Ç–∞—ë—Ç—Å—è –≤ 'products', —Ç.–∫. —ç—Ç–æ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –æ–ø—Ü–∏—è
    kit_variant = models.ForeignKey(
        'products.KitVariant',
        on_delete=models.SET_NULL,
        null=True, blank=True,
        related_name="wishlist_items"
    )
    carpet_color = models.ForeignKey(
        Color,
        on_delete=models.SET_NULL,
        null=True, blank=True,
        related_name="wishlist_carpet_items"
    )
    border_color = models.ForeignKey(
        Color,
        on_delete=models.SET_NULL,
        null=True, blank=True,
        related_name="wishlist_border_items"
    )
    has_podpyatnik = models.BooleanField(default=False)
    added_on = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"‚ù§Ô∏è {self.user.username} ‚Üí {self.product}"

    class Meta:
        verbose_name = "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"
        verbose_name_plural = "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"
        ordering = ['-added_on']
        db_table = 'products_wishlist' # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã
        # –ò–Ω–¥–µ–∫—Å –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ —Ç–æ–≤–∞—Ä—É
        indexes = [
            models.Index(fields=["content_type", "object_id"]),
            models.Index(fields=["user"]),
        ]
