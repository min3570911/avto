# üìÅ common/models.py
# üîí –ü–û–õ–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ú–û–î–ï–†–ê–¶–ò–ò –û–¢–ó–´–í–û–í –° –ê–ù–¢–ò-–°–ü–ê–ú –ó–ê–©–ò–¢–û–ô
# ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—è –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –∏ –∞–Ω—Ç–∏-—Å–ø–∞–º –∑–∞—â–∏—Ç—ã
# üõ°Ô∏è –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–ª—è –∞—É–¥–∏—Ç–∞, –∞–Ω—Ç–∏-—Å–ø–∞–º –º–µ—Ç—Ä–∏–∫–∏ –∏ –º–µ—Ç–æ–¥—ã –∑–∞—â–∏—Ç—ã

from django.db import models
from django.contrib.auth.models import User
from django.contrib.contenttypes.models import ContentType
from django.contrib.contenttypes.fields import GenericForeignKey
from django.utils import timezone
from django.conf import settings
from base.models import BaseModel

# –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
from products.models import Color, KitVariant


class ProductReview(BaseModel):
    """üìù –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã –¥–ª—è –ª—é–±—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∏ –∞–Ω—Ç–∏-—Å–ø–∞–º –∑–∞—â–∏—Ç–æ–π"""

    # üîó Generic FK –¥–ª—è UUID primary keys
    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)
    object_id = models.UUIDField()
    product = GenericForeignKey('content_type', 'object_id')

    # üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –∞–≤—Ç–æ—Ä –æ—Ç–∑—ã–≤–∞ (–ò–ó–ú–ï–ù–ï–ù–û: —Ç–µ–ø–µ—Ä—å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö)
    user = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        related_name='reviews',
        null=True,
        blank=True,
        verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
        help_text="–ü—É—Å—Ç–æ–µ –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤"
    )

    # üÜï –ù–û–í–´–ï –ü–û–õ–Ø –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
    reviewer_name = models.CharField(
        max_length=100,
        blank=True,
        null=True,
        verbose_name="–ò–º—è –∞–≤—Ç–æ—Ä–∞",
        help_text="–ò–º—è –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤"
    )

    # üìä –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
    stars = models.IntegerField(
        choices=[(i, i) for i in range(1, 6)],
        verbose_name="–û—Ü–µ–Ω–∫–∞"
    )
    content = models.TextField(verbose_name="–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞")
    date_added = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")

    # üîí –°–ò–°–¢–ï–ú–ê –ú–û–î–ï–†–ê–¶–ò–ò (–±–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)
    is_approved = models.BooleanField(
        default=False,
        verbose_name="–û–¥–æ–±—Ä–µ–Ω",
        help_text="–û—Ç–∑—ã–≤ –ø—Ä–æ—à–µ–ª –º–æ–¥–µ—Ä–∞—Ü–∏—é –∏ –≤–∏–¥–µ–Ω –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
    )

    # üÜï –ù–û–í–´–ï –ü–û–õ–Ø –¥–ª—è –∞–Ω—Ç–∏-—Å–ø–∞–º –∑–∞—â–∏—Ç—ã
    ip_address = models.GenericIPAddressField(
        verbose_name="IP –∞–¥—Ä–µ—Å",
        help_text="IP –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –æ—Ç–∑—ã–≤–∞"
    )

    user_agent = models.TextField(
        blank=True,
        verbose_name="User Agent",
        help_text="–ë—Ä–∞—É–∑–µ—Ä –∏ –û–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    )

    form_submit_time = models.FloatField(
        null=True,
        blank=True,
        verbose_name="–í—Ä–µ–º—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã",
        help_text="–í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –æ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã"
    )

    is_suspicious = models.BooleanField(
        default=False,
        verbose_name="–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π",
        help_text="–û—Ç–º–µ—á–µ–Ω —Å–∏—Å—Ç–µ–º–æ–π –∫–∞–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π"
    )

    spam_score = models.FloatField(
        default=0.0,
        verbose_name="–û—Ü–µ–Ω–∫–∞ —Å–ø–∞–º–∞",
        help_text="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–ø–∞–º–∞ –æ—Ç 0 –¥–æ 100"
    )

    # üìÖ –ü–û–õ–Ø –ê–£–î–ò–¢–ê –ë–£–î–£–¢ –î–û–ë–ê–í–õ–ï–ù–´ –ß–ï–†–ï–ó –ú–ò–ì–†–ê–¶–ò–Æ
    # moderated_by –∏ moderated_at –¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é

    # üëçüëé –†–µ–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    likes = models.ManyToManyField(
        User,
        related_name="liked_reviews",
        blank=True,
        verbose_name="–õ–∞–π–∫–∏"
    )
    dislikes = models.ManyToManyField(
        User,
        related_name="disliked_reviews",
        blank=True,
        verbose_name="–î–∏–∑–ª–∞–π–∫–∏"
    )

    # ==================== –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –ê–ù–û–ù–ò–ú–ù–´–• –û–¢–ó–´–í–û–í ====================

    def get_author_name(self):
        """üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∞ (–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–ª–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ)"""
        if self.user:
            # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è, –µ—Å–ª–∏ –µ—Å—Ç—å
            if self.user.first_name:
                return f"{self.user.first_name} {self.user.last_name}".strip()
            return self.user.username
        elif self.reviewer_name:
            return self.reviewer_name
        else:
            return "–ê–Ω–æ–Ω–∏–º"

    def is_anonymous_review(self):
        """üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–∑—ã–≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–º"""
        return self.user is None

    def get_author_type(self):
        """üè∑Ô∏è –¢–∏–ø –∞–≤—Ç–æ—Ä–∞ –æ—Ç–∑—ã–≤–∞"""
        if self.user:
            return "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        else:
            return "–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    # ==================== –ê–ù–¢–ò-–°–ü–ê–ú –ú–ï–¢–û–î–´ ====================

    def calculate_spam_score(self):
        """üéØ –ü–µ—Ä–µ—Å—á–µ—Ç —Å–ø–∞–º-–æ—Ü–µ–Ω–∫–∏ –æ—Ç–∑—ã–≤–∞"""
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
        try:
            from common.utils import calculate_spam_score

            review_data = {
                'content': self.content,
                'ip_address': self.ip_address,
                'form_submit_time': self.form_submit_time or 0,
                'user_agent': self.user_agent,
            }

            new_score = calculate_spam_score(review_data)
            self.spam_score = new_score

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            spam_threshold = getattr(settings, 'SPAM_DETECTION', {}).get('SPAM_SCORE_THRESHOLD', 70.0)
            self.is_suspicious = new_score >= spam_threshold

            return new_score
        except ImportError:
            # –ï—Å–ª–∏ utils –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –æ—Ü–µ–Ω–∫—É
            return 0.0

    def mark_as_suspicious(self, reason=""):
        """üö® –ü–æ–º–µ—Ç–∏—Ç—å –æ—Ç–∑—ã–≤ –∫–∞–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π"""
        self.is_suspicious = True
        if self.spam_score < 70:
            self.spam_score = 70  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö
        self.save()

    def mark_as_safe(self):
        """‚úÖ –ü–æ–º–µ—Ç–∏—Ç—å –æ—Ç–∑—ã–≤ –∫–∞–∫ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π"""
        self.is_suspicious = False
        if self.spam_score > 30:
            self.spam_score = 30  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö
        self.save()

    def get_spam_level(self):
        """üìä –£—Ä–æ–≤–µ–Ω—å —Å–ø–∞–º–∞ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞"""
        score = self.spam_score
        if score >= 80:
            return "–í—ã—Å–æ–∫–∏–π"
        elif score >= 50:
            return "–°—Ä–µ–¥–Ω–∏–π"
        elif score >= 20:
            return "–ù–∏–∑–∫–∏–π"
        else:
            return "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π"

    def get_spam_color(self):
        """üé® –¶–≤–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è —Å–ø–∞–º–∞"""
        score = self.spam_score
        if score >= 80:
            return "danger"  # –ö—Ä–∞—Å–Ω—ã–π
        elif score >= 50:
            return "warning"  # –ñ–µ–ª—Ç—ã–π
        elif score >= 20:
            return "info"  # –°–∏–Ω–∏–π
        else:
            return "success"  # –ó–µ–ª–µ–Ω—ã–π

    # ==================== –°–ß–ï–¢–ß–ò–ö–ò ====================

    def like_count(self):
        """üëç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤"""
        return self.likes.count()

    def dislike_count(self):
        """üëé –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–∑–ª–∞–π–∫–æ–≤"""
        return self.dislikes.count()

    # ==================== –ú–ï–¢–û–î–´ –ú–û–î–ï–†–ê–¶–ò–ò ====================

    def approve(self, moderator=None):
        """‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –æ—Ç–∑—ã–≤"""
        self.is_approved = True
        # –ü—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ —Å–Ω–∏–∂–∞–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if self.is_suspicious and self.spam_score < 70:
            self.is_suspicious = False
        # TODO: –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π –∞—É–¥–∏—Ç–∞ —á–µ—Ä–µ–∑ –º–∏–≥—Ä–∞—Ü–∏—é:
        # self.moderated_by = moderator
        # self.moderated_at = timezone.now()
        self.save()
        return True

    def reject(self, moderator=None):
        """‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ—Ç–∑—ã–≤ (—É–¥–∞–ª–∏—Ç—å)"""
        # TODO: –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π –∞—É–¥–∏—Ç–∞ –º–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        self.delete()
        return True

    def reset_moderation(self):
        """üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        self.is_approved = False
        # TODO: –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π –∞—É–¥–∏—Ç–∞:
        # self.moderated_by = None
        # self.moderated_at = None
        self.save()
        return True

    # ==================== –ü–†–û–í–ï–†–ö–ò –°–¢–ê–¢–£–°–ê ====================

    def is_pending_approval(self):
        """‚è≥ –û–∂–∏–¥–∞–µ—Ç –ª–∏ –æ—Ç–∑—ã–≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        return not self.is_approved

    def is_moderated(self):
        """üîç –ë—ã–ª –ª–∏ –æ—Ç–∑—ã–≤ –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω"""
        # TODO: –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π –∞—É–¥–∏—Ç–∞:
        # return self.moderated_by is not None
        return self.is_approved  # –í—Ä–µ–º–µ–Ω–Ω–æ —Å—á–∏—Ç–∞–µ–º –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º, –µ—Å–ª–∏ –æ–¥–æ–±—Ä–µ–Ω

    def needs_attention(self):
        """‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –ª–∏ –æ—Ç–∑—ã–≤ –æ—Å–æ–±–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è"""
        return self.is_suspicious or self.spam_score >= 50

    # ==================== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –¢–û–í–ê–†–ï ====================

    def get_product_name(self):
        """üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ)"""
        try:
            if hasattr(self.product, 'product_name'):
                return self.product.product_name
            elif hasattr(self.product, 'name'):
                return self.product.name
            else:
                return str(self.product)
        except (AttributeError, TypeError):
            return "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"

    def get_product_url(self):
        """üîó URL —Ç–æ–≤–∞—Ä–∞ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π)"""
        try:
            if hasattr(self.product, 'get_absolute_url'):
                return self.product.get_absolute_url()
            elif hasattr(self.product, 'slug'):
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ URL
                if self.content_type.app_label == 'products':
                    return f'/products/{self.product.slug}/'
                elif self.content_type.app_label == 'boats':
                    return f'/boats/{self.product.slug}/'
                else:
                    return f'/admin/{self.content_type.app_label}/{self.content_type.model}/{self.object_id}/'
            else:
                return "#"
        except (AttributeError, TypeError):
            return "#"

    def get_product_type(self):
        """üîç –¢–∏–ø —Ç–æ–≤–∞—Ä–∞"""
        if self.content_type:
            app_label = self.content_type.app_label
            if app_label == 'products':
                return '–ê–≤—Ç–æ–º–æ–±–∏–ª—å'
            elif app_label == 'boats':
                return '–õ–æ–¥–∫–∞'
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

    # ==================== –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï ====================

    def get_stars_display(self):
        """‚≠ê –í–∏–∑—É–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏"""
        return "‚òÖ" * self.stars + "‚òÜ" * (5 - self.stars)

    # ==================== –°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–ò–ï –ú–ï–¢–û–î–´ ====================

    @classmethod
    def get_pending_count(cls):
        """üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        return cls.objects.filter(is_approved=False).count()

    @classmethod
    def get_approved_count(cls):
        """üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤"""
        return cls.objects.filter(is_approved=True).count()

    @classmethod
    def get_suspicious_count(cls):
        """üö® –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤"""
        return cls.objects.filter(is_suspicious=True).count()

    @classmethod
    def get_anonymous_count(cls):
        """üë§ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤"""
        return cls.objects.filter(user__isnull=True).count()

    @classmethod
    def get_today_pending_count(cls):
        """üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
        today = timezone.now().date()
        return cls.objects.filter(
            is_approved=False,
            date_added__date=today
        ).count()

    @classmethod
    def get_approval_rate(cls):
        """üìä –ü—Ä–æ—Ü–µ–Ω—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤"""
        total = cls.objects.count()
        if total == 0:
            return 0
        approved = cls.get_approved_count()
        return round((approved / total) * 100, 1)

    @classmethod
    def get_spam_stats(cls):
        """üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ø–∞–º–∞"""
        total = cls.objects.count()
        if total == 0:
            return {'total': 0, 'suspicious': 0, 'high_spam': 0, 'spam_rate': 0}

        suspicious = cls.get_suspicious_count()
        high_spam = cls.objects.filter(spam_score__gte=80).count()

        return {
            'total': total,
            'suspicious': suspicious,
            'high_spam': high_spam,
            'spam_rate': round((suspicious / total) * 100, 1)
        }

    @classmethod
    def get_moderation_stats(cls):
        """üìä –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        spam_stats = cls.get_spam_stats()
        return {
            'total': cls.objects.count(),
            'pending': cls.get_pending_count(),
            'approved': cls.get_approved_count(),
            'suspicious': cls.get_suspicious_count(),
            'anonymous': cls.get_anonymous_count(),
            'today_pending': cls.get_today_pending_count(),
            'approval_rate': cls.get_approval_rate(),
            'spam_rate': spam_stats['spam_rate'],
        }

    # ==================== –°–û–•–†–ê–ù–ï–ù–ò–ï ====================

    def save(self, *args, **kwargs):
        """üíæ –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–∞—Å—á–µ—Ç–æ–º —Å–ø–∞–º-–æ—Ü–µ–Ω–∫–∏"""
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ø–∞–º-–æ—Ü–µ–Ω–∫—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
        if not self.pk and self.ip_address:
            self.calculate_spam_score()

        super().save(*args, **kwargs)

    # ==================== –°–¢–†–û–ö–û–í–û–ï –ü–†–ï–î–°–¢–ê–í–õ–ï–ù–ò–ï ====================

    def __str__(self):
        status = " [–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏]" if not self.is_approved else ""
        spam_flag = " [–°–ü–ê–ú]" if self.is_suspicious else ""
        author = self.get_author_name()
        product_name = self.get_product_name()
        return f"–û—Ç–∑—ã–≤ –æ—Ç {author} –Ω–∞ {product_name} ({self.stars}‚≠ê){status}{spam_flag}"

    class Meta:
        verbose_name = "–û—Ç–∑—ã–≤"
        verbose_name_plural = "–û—Ç–∑—ã–≤—ã"
        ordering = ['-date_added']
        db_table = 'products_productreview'  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É
        indexes = [
            models.Index(fields=["content_type", "object_id"]),
            models.Index(fields=["is_approved", "date_added"]),
            models.Index(fields=["user", "date_added"]),
            models.Index(fields=["is_suspicious", "spam_score"]),  # –ù–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –∞–Ω—Ç–∏-—Å–ø–∞–º
            models.Index(fields=["ip_address", "date_added"]),  # –ù–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è IP
            # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª–µ–π –∞—É–¥–∏—Ç–∞:
            # models.Index(fields=["moderated_by", "moderated_at"]),
        ]


class Wishlist(BaseModel):
    """‚ù§Ô∏è –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤"""

    # üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        related_name="wishlist",
        verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    )

    # üîó Generic FK –¥–ª—è —Å–≤—è–∑–∏ —Å –ª—é–±—ã–º —Ç–æ–≤–∞—Ä–æ–º (Product, BoatProduct, etc.)
    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)
    object_id = models.UUIDField()
    product = GenericForeignKey('content_type', 'object_id')

    # ‚öôÔ∏è –ü–æ–ª—è –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞
    kit_variant = models.ForeignKey(
        KitVariant,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è",
        help_text="–ü—Ä–∏–º–µ–Ω–∏–º–æ —Ç–æ–ª—å–∫–æ –∫ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–º –∫–æ–≤—Ä–∏–∫–∞–º"
    )

    carpet_color = models.ForeignKey(
        Color,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name="wishlist_carpet",
        verbose_name="–¶–≤–µ—Ç –∫–æ–≤—Ä–∏–∫–∞",
        limit_choices_to={'color_type': 'carpet'}
    )

    border_color = models.ForeignKey(
        Color,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name="wishlist_border",
        verbose_name="–¶–≤–µ—Ç –æ–∫–∞–Ω—Ç–æ–≤–∫–∏",
        limit_choices_to={'color_type': 'border'}
    )

    has_podpyatnik = models.BooleanField(
        default=False,
        verbose_name="–° –ø–æ–¥–ø—è—Ç–Ω–∏–∫–æ–º",
        help_text="–ü—Ä–∏–º–µ–Ω–∏–º–æ —Ç–æ–ª—å–∫–æ –∫ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–º –∫–æ–≤—Ä–∏–∫–∞–º"
    )

    # üìÖ –î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å admin.py)
    added_on = models.DateTimeField(
        auto_now_add=True,
        verbose_name="–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"
    )

    def __str__(self):
        product_name = getattr(self.product, 'product_name', str(self.product))
        return f"‚ù§Ô∏è {self.user.username} ‚Üí {product_name}"

    class Meta:
        verbose_name = "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"
        verbose_name_plural = "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"
        ordering = ['-added_on']
        db_table = 'products_wishlist'  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É
        indexes = [
            models.Index(fields=["user", "added_on"]),
            models.Index(fields=["content_type", "object_id"]),
        ]
        constraints = [
            # –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å: –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä –æ–¥–∏–Ω —Ä–∞–∑ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            models.UniqueConstraint(
                fields=['user', 'content_type', 'object_id'],
                name='unique_user_product_wishlist'
            )
        ]