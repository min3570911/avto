# üìÅ common/models.py
# üîí –ü–û–õ–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ú–û–î–ï–†–ê–¶–ò–ò –û–¢–ó–´–í–û–í
# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ reviewer_email –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –æ—à–∏–±–∫–∏ NOT NULL
# üîß –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–ª—è –∞—É–¥–∏—Ç–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏, –º–µ—Ç–æ–¥—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

from django.db import models
from django.contrib.auth.models import User
from django.contrib.contenttypes.models import ContentType
from django.contrib.contenttypes.fields import GenericForeignKey
from django.utils import timezone
from base.models import BaseModel

# –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
from products.models import Color, KitVariant


class ProductReview(BaseModel):
    """üìù –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã –¥–ª—è –ª—é–±—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""

    # üîó Generic FK –¥–ª—è UUID primary keys
    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)
    object_id = models.UUIDField()
    product = GenericForeignKey('content_type', 'object_id')

    # üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –∞–≤—Ç–æ—Ä –æ—Ç–∑—ã–≤–∞
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='reviews')

    # üìä –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
    stars = models.IntegerField(
        choices=[(i, i) for i in range(1, 6)],
        verbose_name="–û—Ü–µ–Ω–∫–∞"
    )
    content = models.TextField(verbose_name="–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞")
    date_added = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")

    # üîí –°–ò–°–¢–ï–ú–ê –ú–û–î–ï–†–ê–¶–ò–ò (–±–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)
    is_approved = models.BooleanField(
        default=False,
        verbose_name="–û–¥–æ–±—Ä–µ–Ω",
        help_text="–û—Ç–∑—ã–≤ –ø—Ä–æ—à–µ–ª –º–æ–¥–µ—Ä–∞—Ü–∏—é –∏ –≤–∏–¥–µ–Ω –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
    )

    # üìÖ –ü–û–õ–Ø –ê–£–î–ò–¢–ê –ë–£–î–£–¢ –î–û–ë–ê–í–õ–ï–ù–´ –ß–ï–†–ï–ó –ú–ò–ì–†–ê–¶–ò–Æ
    # moderated_by –∏ moderated_at –¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é

    # üëçüëé –†–µ–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    likes = models.ManyToManyField(
        User,
        related_name="liked_reviews",
        blank=True,
        verbose_name="–õ–∞–π–∫–∏"
    )
    dislikes = models.ManyToManyField(
        User,
        related_name="disliked_reviews",
        blank=True,
        verbose_name="–î–∏–∑–ª–∞–π–∫–∏"
    )

    # ==================== –°–ß–ï–¢–ß–ò–ö–ò ====================

    def like_count(self):
        """üëç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤"""
        return self.likes.count()

    def dislike_count(self):
        """üëé –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–∑–ª–∞–π–∫–æ–≤"""
        return self.dislikes.count()

    # ==================== –ú–ï–¢–û–î–´ –ú–û–î–ï–†–ê–¶–ò–ò (–±–∞–∑–æ–≤—ã–µ) ====================

    def approve(self, moderator=None):
        """‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –æ—Ç–∑—ã–≤ (–±–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)"""
        self.is_approved = True
        # TODO: –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π –∞—É–¥–∏—Ç–∞ —á–µ—Ä–µ–∑ –º–∏–≥—Ä–∞—Ü–∏—é:
        # self.moderated_by = moderator
        # self.moderated_at = timezone.now()
        self.save()
        return True

    def reject(self, moderator=None):
        """‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ—Ç–∑—ã–≤ (—É–¥–∞–ª–∏—Ç—å)"""
        # TODO: –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π –∞—É–¥–∏—Ç–∞ –º–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        self.delete()
        return True

    def reset_moderation(self):
        """üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (–±–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)"""
        self.is_approved = False
        # TODO: –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π –∞—É–¥–∏—Ç–∞:
        # self.moderated_by = None
        # self.moderated_at = None
        self.save()
        return True

    # ==================== –ü–†–û–í–ï–†–ö–ò –°–¢–ê–¢–£–°–ê ====================

    def is_pending_approval(self):
        """‚è≥ –û–∂–∏–¥–∞–µ—Ç –ª–∏ –æ—Ç–∑—ã–≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        return not self.is_approved

    def is_moderated(self):
        """üîç –ë—ã–ª –ª–∏ –æ—Ç–∑—ã–≤ –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω (–±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)"""
        # TODO: –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π –∞—É–¥–∏—Ç–∞:
        # return self.moderated_by is not None
        return self.is_approved  # –í—Ä–µ–º–µ–Ω–Ω–æ —Å—á–∏—Ç–∞–µ–º –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º, –µ—Å–ª–∏ –æ–¥–æ–±—Ä–µ–Ω

    # ==================== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –¢–û–í–ê–†–ï ====================

    def get_product_name(self):
        """üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ)"""
        try:
            if hasattr(self.product, 'product_name'):
                return self.product.product_name
            elif hasattr(self.product, 'name'):
                return self.product.name
            else:
                return str(self.product)
        except (AttributeError, TypeError):
            return "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"

    def get_product_url(self):
        """üîó URL —Ç–æ–≤–∞—Ä–∞ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π)"""
        try:
            if hasattr(self.product, 'get_absolute_url'):
                return self.product.get_absolute_url()
            elif hasattr(self.product, 'slug'):
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ URL
                if self.content_type.app_label == 'products':
                    return f'/products/{self.product.slug}/'
                elif self.content_type.app_label == 'boats':
                    return f'/boats/{self.product.slug}/'
                else:
                    return f'/admin/{self.content_type.app_label}/{self.content_type.model}/{self.object_id}/'
            else:
                return "#"
        except (AttributeError, TypeError):
            return "#"

    def get_product_type(self):
        """üîç –¢–∏–ø —Ç–æ–≤–∞—Ä–∞"""
        if self.content_type:
            app_label = self.content_type.app_label
            if app_label == 'products':
                return '–ê–≤—Ç–æ–º–æ–±–∏–ª—å'
            elif app_label == 'boats':
                return '–õ–æ–¥–∫–∞'
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

    # ==================== –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï ====================

    def get_stars_display(self):
        """‚≠ê –í–∏–∑—É–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏"""
        return "‚òÖ" * self.stars + "‚òÜ" * (5 - self.stars)

    # ==================== –°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–ò–ï –ú–ï–¢–û–î–´ ====================

    @classmethod
    def get_pending_count(cls):
        """üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        return cls.objects.filter(is_approved=False).count()

    @classmethod
    def get_approved_count(cls):
        """üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤"""
        return cls.objects.filter(is_approved=True).count()

    @classmethod
    def get_today_pending_count(cls):
        """üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
        today = timezone.now().date()
        return cls.objects.filter(
            is_approved=False,
            date_added__date=today
        ).count()

    @classmethod
    def get_approval_rate(cls):
        """üìä –ü—Ä–æ—Ü–µ–Ω—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤"""
        total = cls.objects.count()
        if total == 0:
            return 0
        approved = cls.get_approved_count()
        return round((approved / total) * 100, 1)

    @classmethod
    def get_moderation_stats(cls):
        """üìä –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        return {
            'total': cls.objects.count(),
            'pending': cls.get_pending_count(),
            'approved': cls.get_approved_count(),
            'today_pending': cls.get_today_pending_count(),
            'approval_rate': cls.get_approval_rate(),
        }

    # ==================== –°–û–•–†–ê–ù–ï–ù–ò–ï ====================

    def save(self, *args, **kwargs):
        """üíæ –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è –±—É–¥—É—â–∏—Ö –Ω—É–∂–¥"""
        # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
        super().save(*args, **kwargs)

    # ==================== –°–¢–†–û–ö–û–í–û–ï –ü–†–ï–î–°–¢–ê–í–õ–ï–ù–ò–ï ====================

    def __str__(self):
        status = " [–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏]" if not self.is_approved else ""
        product_name = self.get_product_name()
        return f"–û—Ç–∑—ã–≤ –æ—Ç {self.user.username} –Ω–∞ {product_name} ({self.stars}‚≠ê){status}"

    class Meta:
        verbose_name = "–û—Ç–∑—ã–≤"
        verbose_name_plural = "–û—Ç–∑—ã–≤—ã"
        ordering = ['-date_added']
        db_table = 'products_productreview'  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É
        indexes = [
            models.Index(fields=["content_type", "object_id"]),
            models.Index(fields=["is_approved", "date_added"]),
            models.Index(fields=["user", "date_added"]),
            # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª–µ–π –∞—É–¥–∏—Ç–∞:
            # models.Index(fields=["moderated_by", "moderated_at"]),
        ]


class Wishlist(BaseModel):
    """‚ù§Ô∏è –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤"""

    # üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        related_name="wishlist",
        verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    )

    # üîó Generic FK –¥–ª—è —Å–≤—è–∑–∏ —Å –ª—é–±—ã–º —Ç–æ–≤–∞—Ä–æ–º (Product, BoatProduct, etc.)
    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)
    object_id = models.UUIDField()
    product = GenericForeignKey('content_type', 'object_id')

    # ‚öôÔ∏è –ü–æ–ª—è –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞
    kit_variant = models.ForeignKey(
        KitVariant,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è",
        help_text="–ü—Ä–∏–º–µ–Ω–∏–º–æ —Ç–æ–ª—å–∫–æ –∫ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–º –∫–æ–≤—Ä–∏–∫–∞–º"
    )

    carpet_color = models.ForeignKey(
        Color,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name="wishlist_carpet",
        verbose_name="–¶–≤–µ—Ç –∫–æ–≤—Ä–∏–∫–∞",
        limit_choices_to={'color_type': 'carpet'}
    )

    border_color = models.ForeignKey(
        Color,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name="wishlist_border",
        verbose_name="–¶–≤–µ—Ç –æ–∫–∞–Ω—Ç–æ–≤–∫–∏",
        limit_choices_to={'color_type': 'border'}
    )

    has_podpyatnik = models.BooleanField(
        default=False,
        verbose_name="–° –ø–æ–¥–ø—è—Ç–Ω–∏–∫–æ–º",
        help_text="–ü—Ä–∏–º–µ–Ω–∏–º–æ —Ç–æ–ª—å–∫–æ –∫ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–º –∫–æ–≤—Ä–∏–∫–∞–º"
    )

    # üìÖ –î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å admin.py)
    added_on = models.DateTimeField(
        auto_now_add=True,
        verbose_name="–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"
    )

    def __str__(self):
        product_name = getattr(self.product, 'product_name', str(self.product))
        return f"‚ù§Ô∏è {self.user.username} ‚Üí {product_name}"

    class Meta:
        verbose_name = "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"
        verbose_name_plural = "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"
        ordering = ['-added_on']
        db_table = 'products_wishlist'  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É
        indexes = [
            models.Index(fields=["user", "added_on"]),
            models.Index(fields=["content_type", "object_id"]),
        ]
        constraints = [
            # –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å: –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä –æ–¥–∏–Ω —Ä–∞–∑ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            models.UniqueConstraint(
                fields=['user', 'content_type', 'object_id'],
                name='unique_user_product_wishlist'
            )
        ]