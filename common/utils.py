# üìÅ common/utils.py
# üõ°Ô∏è –ê–ù–¢–ò-–°–ü–ê–ú –£–¢–ò–õ–ò–¢–´ –∏ –∑–∞—â–∏—Ç–∞ –æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤
# üéØ –§–£–ù–ö–¶–ò–ò: –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞, IP —Ä–µ–ø—É—Ç–∞—Ü–∏—è, –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, –≤–∞–ª–∏–¥–∞—Ü–∏—è
# üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê: —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∑–∞—â–∏—Ç—ã

import re
import time
import hashlib
import ipaddress
from collections import Counter
from difflib import SequenceMatcher
from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Optional

from django.conf import settings
from django.core.cache import cache
from django.utils import timezone
from django.contrib.auth.models import User

import logging
from django.contrib.contenttypes.models import ContentType

logger = logging.getLogger(__name__)


# ==================== –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –¢–û–í–ê–†–û–í ====================

def get_product_by_review(review):
    """
    üéØ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –ø–æ –æ—Ç–∑—ã–≤—É
    –†–∞–±–æ—Ç–∞–µ—Ç –∏ —Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏ (Product) –∏ —Å –ª–æ–¥–∫–∞–º–∏ (BoatProduct)

    Args:
        review: –æ–±—ä–µ–∫—Ç ProductReview

    Returns:
        tuple: (product_object, product_type, product_url_prefix, images_field)

    –ü—Ä–∏–º–µ—Ä—ã:
        - –î–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: (product, 'product', '/products/', 'product_images')
        - –î–ª—è –ª–æ–¥–æ–∫: (boat_product, 'boat', '/boats/product/', 'images')
    """
    try:
        if review.content_type.model == 'product':
            # üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ –∫–æ–≤—Ä–∏–∫–∏
            from products.models import Product
            product = Product.objects.select_related('category').prefetch_related('product_images').get(uid=review.object_id)
            return product, 'product', '/products/', 'product_images'

        elif review.content_type.model == 'boatproduct':
            # üõ•Ô∏è –õ–æ–¥–æ—á–Ω—ã–µ –∫–æ–≤—Ä–∏–∫–∏
            from boats.models import BoatProduct
            product = BoatProduct.objects.select_related('category').prefetch_related('images').get(uid=review.object_id)
            return product, 'boat', '/boats/product/', 'images'

        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞: {review.content_type.model}")
            return None, None, None, None

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –æ—Ç–∑—ã–≤–∞ {review.uid}: {e}")
        return None, None, None, None


def get_product_images(product, product_type):
    """
    üñºÔ∏è –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫ —Ç–æ–≤–∞—Ä–∞

    Args:
        product: –æ–±—ä–µ–∫—Ç Product –∏–ª–∏ BoatProduct
        product_type: 'product' –∏–ª–∏ 'boat'

    Returns:
        QuerySet: –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Ç–æ–≤–∞—Ä–∞
    """
    if not product:
        return None

    try:
        if product_type == 'product':
            return product.product_images.all()
        elif product_type == 'boat':
            return product.images.all()
        else:
            return None
    except Exception:
        return None


def get_product_url(product, product_type):
    """
    üîó –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL —Ç–æ–≤–∞—Ä–∞

    Args:
        product: –æ–±—ä–µ–∫—Ç Product –∏–ª–∏ BoatProduct
        product_type: 'product' –∏–ª–∏ 'boat'

    Returns:
        str: URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞
    """
    if not product or not hasattr(product, 'slug'):
        return '#'

    if product_type == 'product':
        return f'/products/{product.slug}/'
    elif product_type == 'boat':
        return f'/boats/product/{product.slug}/'
    else:
        return '#'

# ==================== –ö–û–ù–°–¢–ê–ù–¢–´ –ò –ù–ê–°–¢–†–û–ô–ö–ò ====================

# üö´ –°–ø–∏—Å–∫–∏ —Å–ø–∞–º-—Å–ª–æ–≤ (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ settings.py)
DEFAULT_SPAM_WORDS = [
    # –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ
    'casino', 'gambling', 'bet', 'poker', 'loan', 'credit', 'debt', 'money',
    'buy now', 'discount', 'sale', 'cheap', 'free shipping', 'limited offer',

    # –í–∑—Ä–æ—Å–ª—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    'porn', 'xxx', 'sex', 'adult', 'dating', 'webcam', 'escort',

    # –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ
    'viagra', 'cialis', 'weight loss', 'diet pills', 'miracle cure',

    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ø–∞–º-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    'click here', 'visit now', 'act now', 'limited time', 'guaranteed',

    # –†—É—Å—Å–∫–∏–µ —Å–ø–∞–º-—Å–ª–æ–≤–∞
    '–∫–∞–∑–∏–Ω–æ', '—Å—Ç–∞–≤–∫–∏', '–∫—Ä–µ–¥–∏—Ç', '–∑–∞–π–º', '–∑–∞—Ä–∞–±–æ—Ç–æ–∫', '–¥–æ—Ö–æ–¥', '–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏',
    '–ø–æ—Ö—É–¥–µ–Ω–∏–µ', '–¥–∏–µ—Ç–∞', '—Å–µ–∫—Å', '–∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞', '—ç—Å–∫–æ—Ä—Ç',
]

DEFAULT_SUSPICIOUS_DOMAINS = [
    'tempmail.', 'guerrillamail.', '10minutemail.', 'mailinator.',
    'trashmail.', 'sharklasers.', 'grr.la', 'maildrop.',
]

DEFAULT_BLOCKED_IPS = [
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–∫—Å–∏ –∏ VPN
    '127.0.0.1',  # Localhost –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
]


def get_spam_config():
    """‚öôÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–Ω—Ç–∏-—Å–ø–∞–º –∑–∞—â–∏—Ç—ã"""
    return getattr(settings, 'SPAM_DETECTION', {
        'SPAM_WORDS': DEFAULT_SPAM_WORDS,
        'SUSPICIOUS_DOMAINS': DEFAULT_SUSPICIOUS_DOMAINS,
        'BLOCKED_IPS': DEFAULT_BLOCKED_IPS,
        'SPAM_SCORE_THRESHOLD': 70.0,
        'SUSPICIOUS_THRESHOLD': 50.0,
        'MIN_FORM_FILL_TIME': 3.0,  # —Å–µ–∫—É–Ω–¥
        'MAX_REVIEWS_PER_HOUR': 3,  # –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö
        'MAX_REVIEWS_PER_HOUR_AUTH': 5,  # –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö
        'ENABLE_IP_CHECKING': True,
        'ENABLE_TEXT_ANALYSIS': True,
        'ENABLE_SIMILARITY_CHECK': True,
        'SIMILARITY_THRESHOLD': 0.85,  # 85% —Å—Ö–æ–∂–µ—Å—Ç–∏ = –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
    })


# ==================== –ê–ù–ê–õ–ò–ó –¢–ï–ö–°–¢–ê –ù–ê –°–ü–ê–ú ====================

def check_spam_words(text: str, custom_words: List[str] = None) -> Dict:
    """
    üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–ø–∞–º-—Å–ª–æ–≤

    Args:
        text: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π —Ç–µ–∫—Å—Ç
        custom_words: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ø–∞–º-—Å–ª–æ–≤–∞

    Returns:
        dict: {'score': float, 'found_words': list, 'details': dict}
    """
    config = get_spam_config()
    spam_words = config['SPAM_WORDS']

    if custom_words:
        spam_words.extend(custom_words)

    text_lower = text.lower()
    found_words = []
    word_scores = {}

    for word in spam_words:
        if word.lower() in text_lower:
            found_words.append(word)
            # –†–∞–∑–Ω—ã–µ –≤–µ—Å–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–ø–∞–º-—Å–ª–æ–≤
            if word in ['casino', 'gambling', 'porn', 'xxx']:
                weight = 25.0  # –í—ã—Å–æ–∫–∏–π –≤–µ—Å
            elif word in ['free', 'discount', 'cheap']:
                weight = 15.0  # –°—Ä–µ–¥–Ω–∏–π –≤–µ—Å
            else:
                weight = 10.0  # –ù–∏–∑–∫–∏–π –≤–µ—Å

            word_scores[word] = weight

    total_score = sum(word_scores.values())

    return {
        'score': min(total_score, 100.0),  # –ú–∞–∫—Å–∏–º—É–º 100
        'found_words': found_words,
        'word_scores': word_scores,
        'details': {
            'total_words_checked': len(spam_words),
            'found_count': len(found_words)
        }
    }


def analyze_text_quality(text: str) -> Dict:
    """
    üìä –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∑—ã–≤–∞

    Args:
        text: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π —Ç–µ–∫—Å—Ç

    Returns:
        dict: –†–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–µ–∫—Å—Ç–∞
    """
    if not text:
        return {'score': 100.0, 'issues': ['empty_text']}

    issues = []
    score = 0.0

    # –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞
    length = len(text.strip())
    if length < 10:
        score += 30.0
        issues.append('too_short')
    elif length > 2000:
        score += 20.0
        issues.append('too_long')

    # –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã
    if re.search(r'(.)\1{4,}', text):  # 5+ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        score += 25.0
        issues.append('repeated_chars')

    # –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤
    upper_ratio = sum(1 for c in text if c.isupper()) / len(text)
    if upper_ratio > 0.5:
        score += 20.0
        issues.append('too_many_caps')

    # URL –∏ email –≤ —Ç–µ–∫—Å—Ç–µ
    if re.search(r'https?://|www\.|\.[a-z]{2,4}(?:\s|$)', text.lower()):
        score += 30.0
        issues.append('contains_urls')

    if re.search(r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b', text):
        score += 25.0
        issues.append('contains_email')

    # –°—Ç—Ä–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–ª–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∞
    weird_chars = re.findall(r'[^\w\s\-.,!?()¬´¬ª""\'@#‚Ññ$%&*+=/\\|<>[\]{}~`^]', text)
    if len(weird_chars) > 3:
        score += 15.0
        issues.append('weird_characters')

    # –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –±—É–∫–≤ –∫ —Ü–∏—Ñ—Ä–∞–º
    letters = sum(1 for c in text if c.isalpha())
    digits = sum(1 for c in text if c.isdigit())
    if letters > 0 and (digits / letters) > 0.3:
        score += 10.0
        issues.append('too_many_numbers')

    return {
        'score': min(score, 100.0),
        'issues': issues,
        'stats': {
            'length': length,
            'upper_ratio': round(upper_ratio, 2),
            'digits_count': digits,
            'letters_count': letters,
            'weird_chars_count': len(weird_chars)
        }
    }


def check_text_similarity(new_text: str, existing_texts: List[str], threshold: float = 0.85) -> Dict:
    """
    üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–æ–∂–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –æ—Ç–∑—ã–≤–∞–º–∏

    Args:
        new_text: –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        existing_texts: –°–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        threshold: –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏ (0-1)

    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Å—Ö–æ–∂–µ—Å—Ç–∏
    """
    if not new_text or not existing_texts:
        return {'score': 0.0, 'similar_texts': [], 'max_similarity': 0.0}

    similarities = []
    similar_texts = []

    new_text_clean = re.sub(r'\s+', ' ', new_text.lower().strip())

    for existing_text in existing_texts:
        if not existing_text:
            continue

        existing_clean = re.sub(r'\s+', ' ', existing_text.lower().strip())
        similarity = SequenceMatcher(None, new_text_clean, existing_clean).ratio()

        similarities.append(similarity)

        if similarity >= threshold:
            similar_texts.append({
                'text': existing_text[:100] + '...' if len(existing_text) > 100 else existing_text,
                'similarity': round(similarity, 3)
            })

    max_similarity = max(similarities) if similarities else 0.0

    # –û—Ü–µ–Ω–∫–∞: —á–µ–º –±–æ–ª—å—à–µ —Å—Ö–æ–∂–µ—Å—Ç—å, —Ç–µ–º –≤—ã—à–µ —Å–ø–∞–º-score
    score = 0.0
    if max_similarity >= 0.95:
        score = 80.0  # –ü–æ—á—Ç–∏ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç
    elif max_similarity >= 0.85:
        score = 60.0  # –û—á–µ–Ω—å –ø–æ—Ö–æ–∂–∏–π
    elif max_similarity >= 0.70:
        score = 30.0  # –ü–æ—Ö–æ–∂–∏–π
    elif max_similarity >= 0.50:
        score = 15.0  # –ß–∞—Å—Ç–∏—á–Ω–æ –ø–æ—Ö–æ–∂–∏–π

    return {
        'score': score,
        'max_similarity': round(max_similarity, 3),
        'similar_texts': similar_texts,
        'similarities_count': len([s for s in similarities if s >= threshold])
    }


# ==================== IP –ê–î–†–ï–°–ê –ò –°–ï–¢–ï–í–ê–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ ====================

def is_ip_blocked(ip_address: str) -> bool:
    """
    üö´ –ü—Ä–æ–≤–µ—Ä–∫–∞ IP –∞–¥—Ä–µ—Å–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É

    Args:
        ip_address: IP –∞–¥—Ä–µ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

    Returns:
        bool: True –µ—Å–ª–∏ IP –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
    """
    if not ip_address:
        return False

    config = get_spam_config()
    blocked_ips = config.get('BLOCKED_IPS', [])

    try:
        ip = ipaddress.ip_address(ip_address)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if ip_address in blocked_ips:
            return True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Å–µ—Ç–∏
        for blocked_ip in blocked_ips:
            try:
                if '/' in blocked_ip:  # –≠—Ç–æ –ø–æ–¥—Å–µ—Ç—å
                    if ip in ipaddress.ip_network(blocked_ip, strict=False):
                        return True
            except ValueError:
                continue

        return False

    except ValueError:
        # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IP
        logger.warning(f"Invalid IP address format: {ip_address}")
        return True  # –ë–ª–æ–∫–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ IP


def analyze_ip_reputation(ip_address: str) -> Dict:
    """
    üîç –ê–Ω–∞–ª–∏–∑ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ IP –∞–¥—Ä–µ—Å–∞

    Args:
        ip_address: IP –∞–¥—Ä–µ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
    """
    if not ip_address:
        return {'score': 0.0, 'issues': ['no_ip'], 'reputation': 'unknown'}

    issues = []
    score = 0.0
    reputation = 'good'

    try:
        ip = ipaddress.ip_address(ip_address)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ/–ª–æ–∫–∞–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
        if ip.is_private:
            score += 5.0
            issues.append('private_ip')

        if ip.is_loopback:
            score += 20.0
            issues.append('loopback_ip')

        if ip.is_reserved:
            score += 15.0
            issues.append('reserved_ip')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–∫—Å–∏/VPN –¥–∏–∞–ø–∞–∑–æ–Ω—ã
        # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö IP —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
        suspicious_ranges = [
            '10.0.0.0/8',  # –ü—Ä–∏–≤–∞—Ç–Ω–∞—è —Å–µ—Ç—å
            '172.16.0.0/12',  # –ü—Ä–∏–≤–∞—Ç–Ω–∞—è —Å–µ—Ç—å
            '192.168.0.0/16',  # –ü—Ä–∏–≤–∞—Ç–Ω–∞—è —Å–µ—Ç—å
        ]

        for range_ip in suspicious_ranges:
            try:
                if ip in ipaddress.ip_network(range_ip):
                    score += 10.0
                    issues.append(f'in_range_{range_ip}')
            except ValueError:
                continue

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Ä–µ–ø—É—Ç–∞—Ü–∏—é
        if score >= 30:
            reputation = 'bad'
        elif score >= 15:
            reputation = 'suspicious'
        elif score >= 5:
            reputation = 'questionable'

    except ValueError:
        score = 50.0
        issues.append('invalid_ip_format')
        reputation = 'bad'
        logger.warning(f"Invalid IP address for reputation check: {ip_address}")

    return {
        'score': min(score, 100.0),
        'issues': issues,
        'reputation': reputation,
        'ip': ip_address
    }


# ==================== RATE LIMITING –ò –í–†–ï–ú–ï–ù–ù–´–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø ====================

def check_rate_limit(ip_address: str, user: Optional[User] = None) -> Dict:
    """
    ‚è±Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ —á–∞—Å—Ç–æ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–æ–≤

    Args:
        ip_address: IP –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)

    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤
    """
    config = get_spam_config()

    if user and user.is_authenticated:
        limit = config.get('MAX_REVIEWS_PER_HOUR_AUTH', 5)
        cache_key = f'review_limit_user_{user.id}'
        identifier = f'user_{user.id}'
    else:
        limit = config.get('MAX_REVIEWS_PER_HOUR', 3)
        cache_key = f'review_limit_ip_{ip_address}'
        identifier = f'ip_{ip_address}'

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç—á–∏–∫
    current_count = cache.get(cache_key, 0)

    is_exceeded = current_count >= limit
    remaining = max(0, limit - current_count)

    # –í—Ä–µ–º—è –¥–æ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞
    ttl = cache.ttl(cache_key)
    if ttl is None or ttl < 0:
        ttl = 3600  # 1 —á–∞—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    return {
        'is_exceeded': is_exceeded,
        'current_count': current_count,
        'limit': limit,
        'remaining': remaining,
        'reset_in_seconds': ttl,
        'identifier': identifier,
        'cache_key': cache_key
    }


def increment_rate_limit(ip_address: str, user: Optional[User] = None) -> bool:
    """
    üìà –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è rate limiting

    Args:
        ip_address: IP –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)

    Returns:
        bool: True –µ—Å–ª–∏ –ª–∏–º–∏—Ç –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ø–æ—Å–ª–µ —É–≤–µ–ª–∏—á–µ–Ω–∏—è
    """
    rate_limit_result = check_rate_limit(ip_address, user)

    if rate_limit_result['is_exceeded']:
        return False

    cache_key = rate_limit_result['cache_key']
    current_count = rate_limit_result['current_count']

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–∞ —á–∞—Å
    cache.set(cache_key, current_count + 1, 3600)

    logger.info(f"Rate limit incremented for {rate_limit_result['identifier']}: {current_count + 1}")

    return True


def check_form_timing(form_load_time: float) -> Dict:
    """
    ‚è±Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã

    Args:
        form_load_time: –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã (timestamp)

    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–∏
    """
    config = get_spam_config()
    min_time = config.get('MIN_FORM_FILL_TIME', 3.0)

    if not form_load_time:
        return {
            'score': 20.0,
            'issues': ['no_timing_data'],
            'fill_time': None,
            'is_too_fast': True
        }

    current_time = time.time()
    fill_time = current_time - form_load_time

    issues = []
    score = 0.0

    if fill_time < min_time:
        score = 40.0
        issues.append('too_fast')
        is_too_fast = True
    elif fill_time < 1.0:
        score = 60.0
        issues.append('extremely_fast')
        is_too_fast = True
    elif fill_time > 3600:  # –ë–æ–ª—å—à–µ —á–∞—Å–∞
        score = 10.0
        issues.append('too_long')
        is_too_fast = False
    else:
        is_too_fast = False

    return {
        'score': score,
        'issues': issues,
        'fill_time': round(fill_time, 2),
        'is_too_fast': is_too_fast,
        'min_required_time': min_time
    }


# ==================== –û–ë–©–ò–ô –ê–ù–ê–õ–ò–ó –°–ü–ê–ú–ê ====================

def calculate_spam_score(review_data: Dict) -> float:
    """
    üéØ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å–ø–∞–º-–æ—Ü–µ–Ω–∫–∏ –æ—Ç–∑—ã–≤–∞

    Args:
        review_data: –î–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        {
            'content': str,
            'ip_address': str,
            'form_submit_time': float,
            'user_agent': str,
            'reviewer_name': str (optional),
            'existing_reviews': List[str] (optional)
        }

    Returns:
        float: –°–ø–∞–º-–æ—Ü–µ–Ω–∫–∞ –æ—Ç 0 –¥–æ 100
    """
    config = get_spam_config()

    if not config.get('ENABLE_TEXT_ANALYSIS', True):
        return 0.0

    total_score = 0.0
    weights = {
        'spam_words': 0.3,  # 30%
        'text_quality': 0.25,  # 25%
        'ip_reputation': 0.2,  # 20%
        'timing': 0.15,  # 15%
        'similarity': 0.1  # 10%
    }

    # 1. –ê–Ω–∞–ª–∏–∑ —Å–ø–∞–º-—Å–ª–æ–≤
    content = review_data.get('content', '')
    if content:
        spam_result = check_spam_words(content)
        total_score += spam_result['score'] * weights['spam_words']

        # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–µ–∫—Å—Ç–∞
        quality_result = analyze_text_quality(content)
        total_score += quality_result['score'] * weights['text_quality']

    # 2. IP —Ä–µ–ø—É—Ç–∞—Ü–∏—è
    ip_address = review_data.get('ip_address')
    if ip_address and config.get('ENABLE_IP_CHECKING', True):
        ip_result = analyze_ip_reputation(ip_address)
        total_score += ip_result['score'] * weights['ip_reputation']

    # 3. –í—Ä–µ–º—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
    form_submit_time = review_data.get('form_submit_time')
    if form_submit_time:
        timing_result = check_form_timing(form_submit_time)
        total_score += timing_result['score'] * weights['timing']

    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–æ–∂–µ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –æ—Ç–∑—ã–≤–∞–º–∏
    existing_reviews = review_data.get('existing_reviews', [])
    if existing_reviews and config.get('ENABLE_SIMILARITY_CHECK', True):
        similarity_result = check_text_similarity(content, existing_reviews)
        total_score += similarity_result['score'] * weights['similarity']

    return min(round(total_score, 2), 100.0)


def is_review_suspicious(review_data: Dict) -> Tuple[bool, Dict]:
    """
    üö® –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–∑—ã–≤–∞

    Args:
        review_data: –î–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤–∞

    Returns:
        Tuple[bool, Dict]: (is_suspicious, analysis_details)
    """
    spam_score = calculate_spam_score(review_data)
    config = get_spam_config()
    threshold = config.get('SUSPICIOUS_THRESHOLD', 50.0)

    is_suspicious = spam_score >= threshold

    analysis = {
        'spam_score': spam_score,
        'threshold': threshold,
        'is_suspicious': is_suspicious,
        'recommendation': 'block' if spam_score >= 80 else 'review' if is_suspicious else 'allow'
    }

    return is_suspicious, analysis


# ==================== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –ú–û–ù–ò–¢–û–†–ò–ù–ì ====================

def log_spam_detection(review_data: Dict, result: Dict):
    """
    üìä –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω—Ç–∏-—Å–ø–∞–º –ø—Ä–æ–≤–µ—Ä–∫–∏

    Args:
        review_data: –î–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤–∞
        result: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    """
    log_data = {
        'timestamp': timezone.now().isoformat(),
        'ip_address': review_data.get('ip_address'),
        'user_agent': review_data.get('user_agent', '')[:200],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        'content_length': len(review_data.get('content', '')),
        'spam_score': result.get('spam_score', 0),
        'is_suspicious': result.get('is_suspicious', False),
        'recommendation': result.get('recommendation', 'unknown')
    }

    logger.info(f"Spam detection result: {log_data}")

    # –ö—ç—à–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ —á–∞—Å
    stats_key = 'spam_detection_hourly_stats'
    stats = cache.get(stats_key, {
        'total_checks': 0,
        'suspicious_count': 0,
        'blocked_count': 0,
        'avg_score': 0
    })

    stats['total_checks'] += 1
    if result.get('is_suspicious'):
        stats['suspicious_count'] += 1
    if result.get('recommendation') == 'block':
        stats['blocked_count'] += 1

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π score
    current_avg = stats.get('avg_score', 0)
    new_score = result.get('spam_score', 0)
    stats['avg_score'] = round((current_avg * (stats['total_checks'] - 1) + new_score) / stats['total_checks'], 2)

    cache.set(stats_key, stats, 3600)


def get_spam_statistics() -> Dict:
    """
    üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–Ω—Ç–∏-—Å–ø–∞–º –∑–∞—â–∏—Ç—ã

    Returns:
        dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
    """
    stats_key = 'spam_detection_hourly_stats'
    stats = cache.get(stats_key, {
        'total_checks': 0,
        'suspicious_count': 0,
        'blocked_count': 0,
        'avg_score': 0
    })

    if stats['total_checks'] > 0:
        stats['suspicious_rate'] = round((stats['suspicious_count'] / stats['total_checks']) * 100, 1)
        stats['block_rate'] = round((stats['blocked_count'] / stats['total_checks']) * 100, 1)
    else:
        stats['suspicious_rate'] = 0
        stats['block_rate'] = 0

    return stats


# ==================== –£–¢–ò–õ–ò–¢–´ –û–ß–ò–°–¢–ö–ò –ò –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–Ø ====================

def clean_old_rate_limits():
    """
    üßπ –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π rate limiting

    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ cron –∏–ª–∏ Celery
    """
    # Django cache –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –∑–∞–ø–∏—Å–∏,
    # –Ω–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    pass


def reset_user_rate_limit(user_id: int = None, ip_address: str = None):
    """
    üîÑ –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ IP

    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        ip_address: IP –∞–¥—Ä–µ—Å
    """
    if user_id:
        cache_key = f'review_limit_user_{user_id}'
        cache.delete(cache_key)
        logger.info(f"Rate limit reset for user {user_id}")

    if ip_address:
        cache_key = f'review_limit_ip_{ip_address}'
        cache.delete(cache_key)
        logger.info(f"Rate limit reset for IP {ip_address}")


# ==================== –¢–ï–°–¢–û–í–´–ï –§–£–ù–ö–¶–ò–ò ====================

def test_spam_detection():
    """
    üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–Ω—Ç–∏-—Å–ø–∞–º –∑–∞—â–∏—Ç—ã

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
    """
    test_cases = [
        {
            'name': 'Normal review',
            'data': {
                'content': '–û—Ç–ª–∏—á–Ω—ã–π –∫–æ–≤—Ä–∏–∫, –∫–∞—á–µ—Å—Ç–≤–æ —Å—É–ø–µ—Ä! –†–µ–∫–æ–º–µ–Ω–¥—É—é –≤—Å–µ–º.',
                'ip_address': '192.168.1.100',
                'form_submit_time': time.time() - 30,
                'user_agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
        },
        {
            'name': 'Spam review',
            'data': {
                'content': 'Buy cheap casino gambling poker free money loan click here now!!!',
                'ip_address': '127.0.0.1',
                'form_submit_time': time.time() - 1,  # –°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ
                'user_agent': 'Bot/1.0'
            }
        }
    ]

    results = []
    for test_case in test_cases:
        spam_score = calculate_spam_score(test_case['data'])
        is_suspicious, analysis = is_review_suspicious(test_case['data'])

        results.append({
            'name': test_case['name'],
            'spam_score': spam_score,
            'is_suspicious': is_suspicious,
            'analysis': analysis
        })

    return results