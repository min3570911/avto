# üìÅ home/models.py - –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø —Å CompanyDescription
# üÜï –î–û–ë–ê–í–õ–ï–ù–û: CompanyDescription –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏
# ‚úÖ –°–û–•–†–ê–ù–ï–ù–û: –í—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥–µ–ª–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

from django.db import models
from django.contrib.auth.models import User
from base.models import BaseModel
from django_ckeditor_5.fields import CKEditor5Field


# üåü –ú–æ–¥–µ–ª–∏ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–∞–π—Ç–∞

class PhoneNumber(BaseModel):
    """üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    contact_info = models.ForeignKey(
        'ContactInfo',
        on_delete=models.CASCADE,
        related_name='phone_numbers',
        verbose_name="–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
    )
    phone = models.CharField(max_length=20, verbose_name="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    description = models.CharField(
        max_length=50,
        blank=True,
        null=True,
        verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ",
        help_text="–ù–∞–ø—Ä–∏–º–µ—Ä: –û—Å–Ω–æ–≤–Ω–æ–π, –ú–æ–±–∏–ª—å–Ω—ã–π, WhatsApp"
    )
    is_primary = models.BooleanField(
        default=False,
        verbose_name="–û—Å–Ω–æ–≤–Ω–æ–π –Ω–æ–º–µ—Ä",
        help_text="–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º"
    )
    order = models.PositiveIntegerField(default=0, verbose_name="–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")

    def __str__(self):
        desc = f" ({self.description})" if self.description else ""
        return f"{self.phone}{desc}"

    class Meta:
        verbose_name = "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
        verbose_name_plural = "–ù–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤"
        ordering = ['-is_primary', 'order', 'created_at']


class ContactInfo(BaseModel):
    """üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–∞–π—Ç–∞"""
    email = models.EmailField(verbose_name="Email")
    address = models.TextField(verbose_name="–§–∏–∑–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å")
    working_hours = models.CharField(max_length=100, verbose_name="–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã")

    # üó∫Ô∏è –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç–∞
    yandex_map_iframe = models.TextField(
        blank=True,
        null=True,
        verbose_name="–ö–æ–¥ –∫–∞—Ä—Ç—ã –Ø–Ω–¥–µ–∫—Å",
        help_text='–í—Å—Ç–∞–≤—å—Ç–µ iframe –∫–æ–¥ —Å –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: <iframe src="https://yandex.ru/map-widget/..." width="100%" height="400"></iframe>)'
    )

    # üåê –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏
    telegram = models.URLField(blank=True, null=True, verbose_name="Telegram")
    instagram = models.URLField(blank=True, null=True, verbose_name="Instagram")
    facebook = models.URLField(blank=True, null=True, verbose_name="Facebook")

    # ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–Ω–∞")

    def __str__(self):
        primary_phone = self.phone_numbers.filter(is_primary=True).first()
        phone_display = primary_phone.phone if primary_phone else "–ù–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤"
        return f"–ö–æ–Ω—Ç–∞–∫—Ç—ã ({phone_display})"

    @property
    def primary_phone(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        return self.phone_numbers.filter(is_primary=True).first()

    @property
    def all_phones(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–æ"""
        return self.phone_numbers.all()

    class Meta:
        verbose_name = "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
        verbose_name_plural = "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"


class FAQ(BaseModel):
    """‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã"""
    question = models.CharField(max_length=255, verbose_name="–í–æ–ø—Ä–æ—Å")
    answer = models.TextField(verbose_name="–û—Ç–≤–µ—Ç")
    order = models.PositiveIntegerField(default=0, verbose_name="–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–µ–Ω")

    def __str__(self):
        return self.question

    class Meta:
        verbose_name = "–ß–∞—Å—Ç—ã–π –≤–æ–ø—Ä–æ—Å"
        verbose_name_plural = "–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã"
        ordering = ['order', 'created_at']


class Banner(BaseModel):
    """üé® –ë–∞–Ω–Ω–µ—Ä—ã –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    title = models.CharField(max_length=200, verbose_name="–ó–∞–≥–æ–ª–æ–≤–æ–∫")
    subtitle = models.CharField(max_length=300, blank=True, null=True, verbose_name="–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫")
    image = models.ImageField(upload_to='banners/', verbose_name="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    link = models.URLField(blank=True, null=True, verbose_name="–°—Å—ã–ª–∫–∞")
    button_text = models.CharField(max_length=50, blank=True, null=True, verbose_name="–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏")

    # ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–µ–Ω")
    order = models.PositiveIntegerField(default=0, verbose_name="–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")

    def __str__(self):
        return self.title

    class Meta:
        verbose_name = "–ë–∞–Ω–Ω–µ—Ä"
        verbose_name_plural = "–ë–∞–Ω–Ω–µ—Ä—ã"
        ordering = ['order', '-created_at']


class Testimonial(BaseModel):
    """üí¨ –û—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    name = models.CharField(max_length=100, verbose_name="–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞")
    position = models.CharField(max_length=100, blank=True, null=True, verbose_name="–î–æ–ª–∂–Ω–æ—Å—Ç—å/–≥–æ—Ä–æ–¥")
    text = models.TextField(verbose_name="–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞")
    avatar = models.ImageField(upload_to='testimonials/', blank=True, null=True, verbose_name="–§–æ—Ç–æ")
    rating = models.PositiveSmallIntegerField(
        choices=[(i, i) for i in range(1, 6)],
        default=5,
        verbose_name="–û—Ü–µ–Ω–∫–∞"
    )

    # ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–µ–Ω")
    featured = models.BooleanField(default=False, verbose_name="–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π")

    def __str__(self):
        return f"–û—Ç–∑—ã–≤ –æ—Ç {self.name}"

    class Meta:
        verbose_name = "–û—Ç–∑—ã–≤ –∫–ª–∏–µ–Ω—Ç–∞"
        verbose_name_plural = "–û—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤"
        ordering = ['-featured', '-created_at']


# üé¨ Hero-—Å–µ–∫—Ü–∏—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
class HeroSection(BaseModel):
    """üé¨ Hero-—Å–µ–∫—Ü–∏—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    title = models.CharField(max_length=200, verbose_name="–ó–∞–≥–æ–ª–æ–≤–æ–∫", default="EVA –∫–æ–≤—Ä–∏–∫–∏ –≤ –ú–∏–Ω—Å–∫–µ")
    subtitle = models.CharField(
        max_length=300,
        verbose_name="–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫",
        default="–ü—Ä–µ–º–∏—É–º –∫–æ–≤—Ä–∏–∫–∏ –∏–∑ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ —á–∏—Å—Ç–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞"
    )

    # üé• –ú–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç
    video = models.FileField(
        upload_to='hero_videos/',
        blank=True,
        null=True,
        verbose_name="–§–æ–Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ",
        help_text="MP4 —Ñ–∞–π–ª –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ 10MB)"
    )
    fallback_image = models.ImageField(
        upload_to='hero_images/',
        blank=True,
        null=True,
        verbose_name="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ-–∑–∞–≥–ª—É—à–∫–∞",
        help_text="–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –µ—Å–ª–∏ –≤–∏–¥–µ–æ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è"
    )

    # üéØ –ö–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
    button_text = models.CharField(
        max_length=50,
        verbose_name="–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏",
        default="–°–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥"
    )
    button_link = models.URLField(
        verbose_name="–°—Å—ã–ª–∫–∞ –∫–Ω–æ–ø–∫–∏",
        default="/products/"
    )

    # ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–Ω–∞")

    def __str__(self):
        return f"Hero-—Å–µ–∫—Ü–∏—è: {self.title}"

    class Meta:
        verbose_name = "Hero-—Å–µ–∫—Ü–∏—è"
        verbose_name_plural = "Hero-—Å–µ–∫—Ü–∏–∏"
        ordering = ['-created_at']


class HeroAdvantage(BaseModel):
    """üéØ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –¥–ª—è hero-—Å–µ–∫—Ü–∏–∏"""
    hero_section = models.ForeignKey(
        HeroSection,
        on_delete=models.CASCADE,
        related_name='advantages',
        verbose_name="Hero-—Å–µ–∫—Ü–∏—è"
    )

    # üé® –ò–∫–æ–Ω–∫–∞ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
    icon_file = models.ImageField(
        upload_to='hero_icons/',
        blank=True,
        null=True,
        verbose_name="–§–∞–π–ª –∏–∫–æ–Ω–∫–∏",
        help_text="SVG –∏–ª–∏ PNG —Ñ–∞–π–ª (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 64x64px)"
    )
    icon = models.CharField(
        max_length=10,
        blank=True,
        null=True,
        verbose_name="–≠–º–æ–¥–∑–∏ –∏–∫–æ–Ω–∫–∞",
        help_text="–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ —Ñ–∞–π–ª—É - —ç–º–æ–¥–∑–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç"
    )

    # üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ
    title = models.CharField(max_length=100, verbose_name="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞")
    description = models.CharField(max_length=200, verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ")

    # ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    order = models.PositiveIntegerField(default=0, verbose_name="–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")

    def __str__(self):
        return f"{self.title} (Hero: {self.hero_section.title})"

    class Meta:
        verbose_name = "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ Hero-—Å–µ–∫—Ü–∏–∏"
        verbose_name_plural = "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Hero-—Å–µ–∫—Ü–∏–∏"
        ordering = ['order', 'created_at']


# üÜï –ù–û–í–ê–Ø –ú–û–î–ï–õ–¨: CompanyDescription –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ (—Å–∏–Ω–≥–ª—Ç–æ–Ω)
class CompanyDescription(BaseModel):
    """üìù –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä)"""

    title = models.CharField(
        max_length=200,
        verbose_name="–ó–∞–≥–æ–ª–æ–≤–æ–∫",
        default="–û –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏",
        help_text="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –±–ª–æ–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏"
    )

    content = CKEditor5Field(
        verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏",
        help_text="–¢–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–æ–º–ø–∞–Ω–∏–∏, –ø—Ä–æ–¥—É–∫—Ü–∏–∏, –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤",
        config_name='default'  # üé® –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π CKEditor 5
    )

    def __str__(self):
        return f"üìù {self.title}"

    class Meta:
        verbose_name = "–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏"
        verbose_name_plural = "–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏"

    def save(self, *args, **kwargs):
        """üíæ –°–∏–Ω–≥–ª—Ç–æ–Ω –ª–æ–≥–∏–∫–∞ - —Ä–∞–∑—Ä–µ—à–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä"""
        if CompanyDescription.objects.exists() and not self.pk:
            return  # üö´ –ù–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å
        super().save(*args, **kwargs)

# üöö –ù–û–í–ê–Ø –ú–û–î–ï–õ–¨: DeliveryOption –¥–ª—è —Å–ø–æ—Å–æ–±–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –æ–ø–ª–∞—Ç—ã
class DeliveryOption(BaseModel):
    """üöö –°–ø–æ—Å–æ–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –æ–ø–ª–∞—Ç—ã"""

    # üìù –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    title = models.CharField(
        max_length=100,
        verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞",
        help_text="–ù–∞–ø—Ä–∏–º–µ—Ä: –ö—É—Ä—å–µ—Ä—Å–∫–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞, –ü–æ—á—Ç–∞, –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è"
    )

    description = CKEditor5Field(
        verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ",
        help_text="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –¥–æ—Å—Ç–∞–≤–∫–∏",
        config_name='default'
    )

    # üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å
    price_info = models.CharField(
        max_length=200,
        blank=True,
        null=True,
        verbose_name="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏",
        help_text="–ù–∞–ø—Ä–∏–º–µ—Ä: –ë–µ—Å–ø–ª–∞—Ç–Ω–æ, –û—Ç 10 —Ä—É–±., –ü–æ —Ç–∞—Ä–∏—Ñ–∞–º –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞"
    )

    # ‚è±Ô∏è –°—Ä–æ–∫–∏
    delivery_time = models.CharField(
        max_length=100,
        blank=True,
        null=True,
        verbose_name="–°—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏",
        help_text="–ù–∞–ø—Ä–∏–º–µ—Ä: 1-2 –¥–Ω—è, 2-3 –¥–Ω—è, –í –¥–µ–Ω—å –∑–∞–∫–∞–∑–∞"
    )

    # üåç –ó–æ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    coverage_area = models.CharField(
        max_length=200,
        blank=True,
        null=True,
        verbose_name="–ó–æ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏",
        help_text="–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–∏–Ω—Å–∫ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ú–ö–ê–î, –ü–æ –≤—Å–µ–π –ë–µ–ª–∞—Ä—É—Å–∏"
    )

    COVERAGE_TAG_CHOICES = (
        ('city', '–ú–∏–Ω—Å–∫ –∏ –æ–±–ª–∞—Å—Ç—å'),
        ('country', '–ë–µ–ª–∞—Ä—É—Å—å'),
        ('international', '–°–ù–ì –∏ –¥—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω—ã'),
    )

    coverage_tag = models.CharField(
        max_length=20,
        choices=COVERAGE_TAG_CHOICES,
        default='country',
        verbose_name="–°–µ–≥–º–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è",
        help_text="–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"
    )

    # üí≥ –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
    payment_methods = models.CharField(
        max_length=300,
        blank=True,
        null=True,
        verbose_name="–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã",
        help_text="–ù–∞–ø—Ä–∏–º–µ—Ä: –ù–∞–ª–∏—á–Ω—ã–º–∏ –∫—É—Ä—å–µ—Ä—É, –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞, –ù–∞–ª–æ–∂–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂"
    )

    # üìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
    additional_info = CKEditor5Field(
        blank=True,
        null=True,
        verbose_name="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
        help_text="–û—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, –ø—Ä–∏–º–µ—á–∞–Ω–∏—è",
        config_name='default'
    )

    # üé® –ò–∫–æ–Ω–∫–∞
    icon = models.CharField(
        max_length=50,
        blank=True,
        null=True,
        verbose_name="–ò–∫–æ–Ω–∫–∞",
        help_text="–ö–ª–∞—Å—Å –∏–∫–æ–Ω–∫–∏ –∏–ª–∏ —ç–º–æ–¥–∑–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: fas fa-truck, üöö)"
    )

    # ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    is_active = models.BooleanField(
        default=True,
        verbose_name="–ê–∫—Ç–∏–≤–µ–Ω",
        help_text="–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –Ω–∞ —Å–∞–π—Ç–µ"
    )

    order = models.PositiveIntegerField(
        default=0,
        verbose_name="–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    )

    def __str__(self):
        return self.title

    def payment_methods_list(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã –±–µ–∑ –ø—É—Å—Ç—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤."""
        if not self.payment_methods:
            return []
        return [item.strip() for item in self.payment_methods.split(',') if item.strip()]

    def coverage_label(self):
        """–ß–µ–ª–æ–≤–µ–∫–æ-–ø–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞ –ø–æ–∫—Ä—ã—Ç–∏—è."""
        return dict(self.COVERAGE_TAG_CHOICES).get(self.coverage_tag, self.coverage_tag)

    class Meta:
        verbose_name = "–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏"
        verbose_name_plural = "–°–ø–æ—Å–æ–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏"
        ordering = ['order', 'title']


# üìß –ù–û–í–ê–Ø –ú–û–î–ï–õ–¨: ContactMessage –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
class ContactMessage(BaseModel):
    """üìß –°–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤"""

    # üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ
    name = models.CharField(
        max_length=100,
        verbose_name="–ò–º—è",
        help_text="–ò–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"
    )
    email = models.EmailField(
        verbose_name="Email",
        help_text="Email –¥–ª—è –æ—Ç–≤–µ—Ç–∞"
    )
    phone = models.CharField(
        max_length=20,
        blank=True,
        null=True,
        verbose_name="–¢–µ–ª–µ—Ñ–æ–Ω",
        help_text="–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
    )

    # üìù –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    subject = models.CharField(
        max_length=200,
        blank=True,
        null=True,
        verbose_name="–¢–µ–º–∞",
        help_text="–¢–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"
    )
    message = models.TextField(
        verbose_name="–°–æ–æ–±—â–µ–Ω–∏–µ",
        help_text="–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞"
    )

    # üîß –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
    is_processed = models.BooleanField(
        default=False,
        verbose_name="–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ",
        help_text="–û—Ç–º–µ—á–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∏–ª–∏"
    )

    # üí¨ –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_reply = models.TextField(
        blank=True,
        null=True,
        verbose_name="–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        help_text="–û—Ç–≤–µ—Ç –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
    )

    # üìÖ –î–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞
    replied_at = models.DateTimeField(
        blank=True,
        null=True,
        verbose_name="–î–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞",
        help_text="–ö–æ–≥–¥–∞ –±—ã–ª –¥–∞–Ω –æ—Ç–≤–µ—Ç"
    )

    def __str__(self):
        subject_part = f" - {self.subject}" if self.subject else ""
        status = "‚úÖ" if self.is_processed else "‚è≥"
        return f"{status} {self.name} ({self.email}){subject_part}"

    class Meta:
        verbose_name = "–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"
        verbose_name_plural = "–°–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"
        ordering = ['-created_at']

    def save(self, *args, **kwargs):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–≤–∏–º –¥–∞—Ç—É –æ—Ç–≤–µ—Ç–∞ –µ—Å–ª–∏ –¥–æ–±–∞–≤–∏–ª–∏ admin_reply"""
        if self.admin_reply and not self.replied_at:
            from django.utils import timezone
            self.replied_at = timezone.now()
            self.is_processed = True
        super().save(*args, **kwargs)


# üìÑ –ù–û–í–´–ï –ú–û–î–ï–õ–ò: Terms –∏ PrivacyPolicy –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
class Terms(BaseModel):
    """üìã –£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã –∏ –¥–æ—Å—Ç–∞–≤–∫–∏ (—Å–∏–Ω–≥–ª—Ç–æ–Ω)"""

    title = models.CharField(
        max_length=200,
        verbose_name="–ó–∞–≥–æ–ª–æ–≤–æ–∫",
        default="–£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã –∏ –¥–æ—Å—Ç–∞–≤–∫–∏",
        help_text="–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É—Å–ª–æ–≤–∏–π"
    )

    content = CKEditor5Field(
        verbose_name="–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ",
        help_text="–¢–µ–∫—Å—Ç —É—Å–ª–æ–≤–∏–π –æ–ø–ª–∞—Ç—ã –∏ –¥–æ—Å—Ç–∞–≤–∫–∏",
        config_name='default'
    )

    def __str__(self):
        return f"üìã {self.title}"

    class Meta:
        verbose_name = "–£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã –∏ –¥–æ—Å—Ç–∞–≤–∫–∏"
        verbose_name_plural = "–£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã –∏ –¥–æ—Å—Ç–∞–≤–∫–∏"

    def save(self, *args, **kwargs):
        """üíæ –°–∏–Ω–≥–ª—Ç–æ–Ω –ª–æ–≥–∏–∫–∞ - —Ä–∞–∑—Ä–µ—à–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä"""
        if Terms.objects.exists() and not self.pk:
            return  # üö´ –ù–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å
        super().save(*args, **kwargs)


class PrivacyPolicy(BaseModel):
    """üîí –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ (—Å–∏–Ω–≥–ª—Ç–æ–Ω)"""

    title = models.CharField(
        max_length=200,
        verbose_name="–ó–∞–≥–æ–ª–æ–≤–æ–∫",
        default="–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
        help_text="–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª–∏—Ç–∏–∫–∏"
    )

    content = CKEditor5Field(
        verbose_name="–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ",
        help_text="–¢–µ–∫—Å—Ç –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
        config_name='default'
    )

    def __str__(self):
        return f"üîí {self.title}"

    class Meta:
        verbose_name = "–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"
        verbose_name_plural = "–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"

    def save(self, *args, **kwargs):
        """üíæ –°–∏–Ω–≥–ª—Ç–æ–Ω –ª–æ–≥–∏–∫–∞ - —Ä–∞–∑—Ä–µ—à–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä"""
        if PrivacyPolicy.objects.exists() and not self.pk:
            return  # üö´ –ù–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å
        super().save(*args, **kwargs)


# üì¢ –ù–û–í–ê–Ø –ú–û–î–ï–õ–¨: HeaderBanner –¥–ª—è –±–µ–≥—É—â–µ–π —Å—Ç—Ä–æ–∫–∏ –≤–≤–µ—Ä—Ö—É —Å–∞–π—Ç–∞
class HeaderBanner(BaseModel):
    """üì¢ –ë–µ–≥—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ —à–∞–ø–∫–µ —Å–∞–π—Ç–∞ (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä)"""

    # üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ
    text = models.TextField(
        verbose_name="–¢–µ–∫—Å—Ç –±–µ–≥—É—â–µ–π —Å—Ç—Ä–æ–∫–∏",
        help_text="–¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –±–µ–≥—É—â–µ–π —Å—Ç—Ä–æ–∫–µ –≤–≤–µ—Ä—Ö—É —Å–∞–π—Ç–∞",
        default="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å–∞–π—Ç –ê–≤—Ç–æ–∫–æ–≤—Ä–∏–∫.–±–∞–π!"
    )

    # üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    background_color = models.CharField(
        max_length=7,
        verbose_name="–¶–≤–µ—Ç —Ñ–æ–Ω–∞",
        help_text="–¶–≤–µ—Ç —Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HEX (–Ω–∞–ø—Ä–∏–º–µ—Ä: #4757d2)",
        default="#4757d2"
    )

    text_color = models.CharField(
        max_length=7,
        verbose_name="–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞",
        help_text="–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HEX (–Ω–∞–ø—Ä–∏–º–µ—Ä: #ffffff)",
        default="#ffffff"
    )

    scroll_speed = models.PositiveSmallIntegerField(
        verbose_name="–°–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏",
        help_text="–°–∫–æ—Ä–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ (–æ—Ç 1 –¥–æ 20, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)",
        default=10,
        choices=[(i, i) for i in range(1, 21)]
    )

    # üîó –°—Å—ã–ª–∫–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    link_url = models.URLField(
        blank=True,
        null=True,
        verbose_name="–°—Å—ã–ª–∫–∞",
        help_text="–°—Å—ã–ª–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –±–µ–≥—É—â—É—é —Å—Ç—Ä–æ–∫—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
    )

    # ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    is_active = models.BooleanField(
        default=True,
        verbose_name="–ê–∫—Ç–∏–≤–Ω–∞",
        help_text="–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –±–µ–≥—É—â—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞ —Å–∞–π—Ç–µ"
    )

    def __str__(self):
        preview = self.text[:50] + "..." if len(self.text) > 50 else self.text
        status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if self.is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
        return f"üì¢ {preview} ({status})"

    class Meta:
        verbose_name = "–ë–µ–≥—É—â–∞—è —Å—Ç—Ä–æ–∫–∞"
        verbose_name_plural = "–ë–µ–≥—É—â–∞—è —Å—Ç—Ä–æ–∫–∞"
        ordering = ['-created_at']

    def save(self, *args, **kwargs):
        """üíæ –ü—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –¥—Ä—É–≥–∏–µ –±–∞–Ω–Ω–µ—Ä—ã (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞–∫—Ç–∏–≤–Ω—ã–π)"""
        if self.is_active:
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –¥—Ä—É–≥–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–∞–Ω–Ω–µ—Ä—ã
            HeaderBanner.objects.filter(is_active=True).exclude(pk=self.pk).update(is_active=False)
        super().save(*args, **kwargs)


# üìä –ù–û–í–ê–Ø –ú–û–î–ï–õ–¨: AnalyticsCounter –¥–ª—è —Å—á–µ—Ç—á–∏–∫–æ–≤ (–Ø–Ω–¥–µ–∫—Å –ú–µ—Ç—Ä–∏–∫–∞, LiveInternet)
class AnalyticsCounter(BaseModel):
    """üìä –°—á–µ—Ç—á–∏–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è —Ñ—É—Ç–µ—Ä–∞ —Å–∞–π—Ç–∞"""

    COUNTER_TYPE_CHOICES = (
        ('yandex_metrica', '–Ø–Ω–¥–µ–∫—Å –ú–µ—Ç—Ä–∏–∫–∞'),
        ('livinternet', 'LiveInternet'),
        ('google_analytics', 'Google Analytics'),
        ('other', '–î—Ä—É–≥–æ–π')
    )

    # üìù –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    name = models.CharField(
        max_length=50,
        verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞",
        help_text="–ù–∞–ø—Ä–∏–º–µ—Ä: –Ø–Ω–¥–µ–∫—Å –ú–µ—Ç—Ä–∏–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∞–π—Ç"
    )

    counter_type = models.CharField(
        max_length=20,
        choices=COUNTER_TYPE_CHOICES,
        verbose_name="–¢–∏–ø —Å—á–µ—Ç—á–∏–∫–∞",
        help_text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—á–µ—Ç—á–∏–∫–∞"
    )

    # üíª –ö–æ–¥ —Å—á–µ—Ç—á–∏–∫–∞
    counter_code = models.TextField(
        verbose_name="HTML –∫–æ–¥ —Å—á–µ—Ç—á–∏–∫–∞",
        help_text="–í—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª–Ω—ã–π HTML –∫–æ–¥ —Å—á–µ—Ç—á–∏–∫–∞ (–≤–∫–ª—é—á–∞—è —Ç–µ–≥–∏ <script>)"
    )

    # ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    is_active = models.BooleanField(
        default=True,
        verbose_name="–ê–∫—Ç–∏–≤–µ–Ω",
        help_text="–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Å—á–µ—Ç—á–∏–∫ –Ω–∞ —Å–∞–π—Ç–µ"
    )

    order = models.PositiveIntegerField(
        default=0,
        verbose_name="–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    )

    def __str__(self):
        return f"{self.get_counter_type_display()} - {self.name}"

    class Meta:
        verbose_name = "–°—á–µ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"
        verbose_name_plural = "–°—á–µ—Ç—á–∏–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"
        ordering = ['order', 'counter_type', 'name']


# üîß –ò–¢–û–ì–û–í–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø –í –§–ê–ô–õ–ï:
# ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: PhoneNumber - –º–æ–¥–µ–ª—å –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
# ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: Terms - —É—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã –∏ –¥–æ—Å—Ç–∞–≤–∫–∏ (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–µ)
# ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: PrivacyPolicy - –ø–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–∞—è)
# ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: AnalyticsCounter - —Å—á–µ—Ç—á–∏–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ (–Ø–Ω–¥–µ–∫—Å –ú–µ—Ç—Ä–∏–∫–∞, LiveInternet)
# ‚úÖ –§–£–ù–ö–¶–ò–ò:
#    - –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
#    - –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å CKEditor 5
#    - –°–∏–Ω–≥–ª—Ç–æ–Ω –ª–æ–≥–∏–∫–∞ –¥–ª—è Terms –∏ PrivacyPolicy
#    - –£–ø—Ä–∞–≤–ª—è–µ–º—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏
# ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –í–∞–ª–∏–¥–∞—Ü–∏—è –≤ –º–µ—Ç–æ–¥–∞—Ö save()
# ‚úÖ –°–û–•–†–ê–ù–ï–ù–û: –í—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥–µ–ª–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
