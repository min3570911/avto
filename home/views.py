# üìÅ home/views.py - –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø —Å CompanyDescription
# üÜï –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
# ‚úÖ –°–û–•–†–ê–ù–ï–ù–û: –í—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

from django.shortcuts import render, get_object_or_404, redirect
from django.core.paginator import Paginator
from products.models import Product, Category, KitVariant, ProductImage
from boats.models import BoatCategory  # üõ•Ô∏è –î–û–ë–ê–í–õ–ï–ù–û: –∏–º–ø–æ—Ä—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ª–æ–¥–æ–∫
from .models import FAQ, HeroSection, CompanyDescription, ContactInfo
import random


def index(request):
    """
    üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –§–ò–ù–ê–õ–¨–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–æ–º–ø–∞–Ω–∏–∏

    –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã:
    - Hero-—Å–µ–∫—Ü–∏—è —Å –≤–∏–¥–µ–æ –∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞–º–∏
    - üìù –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ (–Ω–æ–≤–æ–µ)
    - –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    - –ì–∞–ª–µ—Ä–µ—è –ø—Ä–∏–º–µ—Ä–æ–≤ —Ä–∞–±–æ—Ç (–Ω–µ–≥–ª–∞–≤–Ω—ã–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–æ–≤)
    - FAQ –¥–ª—è –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞

    üÜï –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ CompanyDescription
    """

    # üé¨ –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é hero-—Å–µ–∫—Ü–∏—é —Å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞–º–∏
    hero_section = None
    try:
        hero_section = HeroSection.objects.filter(is_active=True).prefetch_related('advantages').first()
    except HeroSection.DoesNotExist:
        pass  # üîÑ –ë—É–¥–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—É—é —Å–µ–∫—Ü–∏—é

    # üìù –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ (—Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ)
    company_description = CompanyDescription.objects.first()

    # üìÇ –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞
    categories = Category.objects.filter(is_active=True).order_by('display_order', 'category_name')

    # üõ•Ô∏è –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª–æ–¥–æ–∫
    boat_categories = BoatCategory.objects.filter(is_active=True).order_by('display_order', 'category_name')

    # ‚ùì –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ FAQ –¥–ª—è –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞
    faqs = FAQ.objects.filter(is_active=True).order_by('order', 'created_at')

    # üì¶ –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è "–°–∞–ª–æ–Ω" (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º)
    salon_kit = KitVariant.objects.filter(code='salon').first()

    # üé≤ –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –Ω–µ–≥–ª–∞–≤–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏
    gallery_images = get_random_product_gallery_images()

    # üìä –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–±–ª–æ–Ω–∞
    context = {
        # üé¨ Hero-—Å–µ–∫—Ü–∏—è
        'hero_section': hero_section,

        # üìù –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
        'company_description': company_description,

        # üìÇ –ö–∞—Ç–∞–ª–æ–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        'categories': categories,
        'boat_categories': boat_categories,

        # ‚ùì FAQ –¥–ª—è –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞
        'faqs': faqs,

        # üé® –ì–∞–ª–µ—Ä–µ—è –ø—Ä–∏–º–µ—Ä–æ–≤ —Ä–∞–±–æ—Ç
        'gallery_images': gallery_images,

        # üì¶ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (–¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        'salon_kit': salon_kit,

        # üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —à–∞–±–ª–æ–Ω–∞
        'categories_count': categories.count(),
        'boat_categories_count': boat_categories.count(),
        'faqs_count': faqs.count(),
        'gallery_count': len(gallery_images),
    }

    return render(request, 'home/index.html', context)


def get_random_product_gallery_images(count=12):
    """
    üé≤ –ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –Ω–µ–≥–ª–∞–≤–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏

    Args:
        count (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 12)

    Returns:
        list: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ ProductImage —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ

    üéØ –õ–æ–≥–∏–∫–∞:
    1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–≥–ª–∞–≤–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ)
    3. –î–µ–ª–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –≤—ã–±–æ—Ä–∫—É –∏–∑ –≤—Å–µ—Ö –Ω–µ–≥–ª–∞–≤–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    4. –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∫ –∫–∞–∂–¥–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    """

    # üì∏ –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–≥–ª–∞–≤–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
    all_secondary_images = []

    # üîç –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ (–∏—Å–∫–ª—é—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
    products_with_images = Product.objects.filter(
        category__isnull=False  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ is_active
    ).prefetch_related('product_images').select_related('category')

    for product in products_with_images:
        # üì± –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        product_images = list(product.product_images.all())

        # üéØ –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–≥–ª–∞–≤–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ)
        if len(product_images) > 1:
            secondary_images = product_images[1:]  # –í—Å–µ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ

            # üè∑Ô∏è –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∫ –∫–∞–∂–¥–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            for image in secondary_images:
                # üì¶ –†–∞—Å—à–∏—Ä—è–µ–º –æ–±—ä–µ–∫—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ
                image.product_name = product.product_name
                image.product_slug = product.slug
                image.product_category = product.category.category_name if product.category else "–ê–≤—Ç–æ–∫–æ–≤—Ä–∏–∫–∏"
                all_secondary_images.append(image)

    # üé≤ –î–µ–ª–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –≤—ã–±–æ—Ä–∫—É
    if len(all_secondary_images) > count:
        selected_images = random.sample(all_secondary_images, count)
    else:
        # üìä –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –º–µ–Ω—å—à–µ —á–µ–º –Ω—É–∂–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ
        selected_images = all_secondary_images

    # üîÑ –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
    random.shuffle(selected_images)

    return selected_images


# ‚úÖ –í–°–ï –û–°–¢–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –û–°–¢–ê–Æ–¢–°–Ø –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô

def category_view(request, slug):
    """
    üõçÔ∏è –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Ç–æ–≤–∞—Ä–∞–º–∏

    Args:
        request: HTTP-–∑–∞–ø—Ä–æ—Å
        slug: –°–ª–∞–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ URL

    Returns:
        –û—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–æ–≤–∞—Ä–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤–Ω–∏–∑—É
    """
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 404
    category = get_object_or_404(Category, slug=slug)

    # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω filter(parent=None)
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    products_query = Product.objects.filter(category=category)

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ index view)
    sort_option = request.GET.get('sort')
    if sort_option == 'newest':
        products_query = products_query.filter(newest_product=True)
    elif sort_option == 'priceAsc':
        products_query = products_query.order_by('price')
    elif sort_option == 'priceDesc':
        products_query = products_query.order_by('-price')

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    page = request.GET.get('page', 1)
    paginator = Paginator(products_query, 12)  # 12 —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    products = paginator.get_page(page)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
    categories = Category.objects.all()

    # üîÑ –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ CMS
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –±—ã —É –º–æ–¥–µ–ª–∏ Category –±—ã–ª–æ –ø–æ–ª–µ description:
    # category_description = category.description
    category_description = None  # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —à–∞–±–ª–æ–Ω–µ

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—é "–°–∞–ª–æ–Ω"
    salon_kit = KitVariant.objects.filter(code='salon').first()

    context = {
        'category': category,
        'products': products,
        'categories': categories,
        'selected_sort': sort_option,
        'category_description': category_description,
        'salon_kit': salon_kit,
    }

    return render(request, 'home/category.html', context)


# –í–ê–ñ–ù–û: –ó–¥–µ—Å—å —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è product_search –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å urls.py
def product_search(request):
    """üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
    query = request.GET.get('q', '')
    products = None

    if query:
        products = Product.objects.filter(product_name__icontains=query)

    context = {
        'query': query,
        'products': products,
    }

    return render(request, 'home/search.html', context)


def send_contact_telegram_notification(contact_message):
    """ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –≤ Telegram"""
    import requests
    import logging
    from django.conf import settings

    logger = logging.getLogger(__name__)

    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ Django settings
        telegram_token = settings.TELEGRAM_BOT_TOKEN
        telegram_chat_id = settings.TELEGRAM_CHAT_ID

        # ‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if not telegram_token or not telegram_chat_id:
            logger.warning("‚ö†Ô∏è Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –î–æ–±–∞–≤—å—Ç–µ TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID –≤ .env")
            return

        # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–∫–µ–Ω –∏ —á–∞—Ç ID –Ω–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
        if telegram_token == 'YOUR_TELEGRAM_BOT_TOKEN' or telegram_chat_id == 'YOUR_TELEGRAM_CHAT_ID':
            logger.warning("‚ö†Ô∏è Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –∑–∞–≥–ª—É—à–∫–∏. –û–±–Ω–æ–≤–∏—Ç–µ .env —Ñ–∞–π–ª")
            return

        # üìù –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"""üìß <b>–ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï –û–ë–†–ê–¢–ù–û–ô –°–í–Ø–ó–ò</b>

üë§ <b>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:</b> {contact_message.name}
üìß <b>Email:</b> {contact_message.email}"""

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if contact_message.phone:
            message += f"\nüìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {contact_message.phone}"

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
        if contact_message.subject:
            message += f"\nüìù <b>–¢–µ–º–∞:</b> {contact_message.subject}"

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message += f"""

üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
{contact_message.message}

üïê <b>–í—Ä–µ–º—è:</b> {contact_message.created_at.strftime('%d.%m.%Y %H:%M')}
üîó <b>ID:</b> {contact_message.uid}

<i>–û—Ç–≤–µ—Ç–∏—Ç—å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É: /admin/home/contactmessage/{contact_message.uid}/change/</i>"""

        # üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        url = f"https://api.telegram.org/bot{telegram_token}/sendMessage"

        data = {
            'chat_id': telegram_chat_id,
            'text': message,
            'parse_mode': 'HTML'
        }

        response = requests.post(url, json=data, timeout=10)

        if response.status_code == 200:
            logger.info(f"‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {contact_message.uid}")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.status_code} - {response.text}")

    except Exception as e:
        logger.error(f"üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")


def contact(request):
    """üìû –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å —Ñ–æ—Ä–º–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    from .forms import ContactForm
    from django.contrib import messages

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –º–æ–¥–µ–ª–∏ —Å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
    contact_info = ContactInfo.objects.filter(is_active=True).prefetch_related('phone_numbers').first()

    if request.method == 'POST':
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã
        form = ContactForm(request.POST)

        if form.is_valid():
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            contact_message = form.save()

            # –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            messages.success(
                request,
                '‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'
            )

            # ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
            send_contact_telegram_notification(contact_message)

            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ç—É –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É (POST-redirect-GET pattern)
            return redirect('contact')
        else:
            # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
            messages.error(
                request,
                '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º–µ.'
            )
    else:
        # GET –∑–∞–ø—Ä–æ—Å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç—É—é —Ñ–æ—Ä–º—É
        form = ContactForm()

    context = {
        'contact_info': contact_info,
        'form': form,
    }

    return render(request, 'home/contact.html', context)


def about(request):
    """‚ÑπÔ∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ –Ω–∞—Å"""
    # üìù –ú–û–ñ–ù–û –î–û–ü–û–õ–ù–ò–¢–¨: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã "–û –Ω–∞—Å"
    company_description = CompanyDescription.objects.first()

    context = {
        'company_description': company_description,
    }

    return render(request, 'home/about.html', context)


def terms_and_conditions(request):
    """üìã –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ª–æ–≤–∏–π –æ–ø–ª–∞—Ç—ã –∏ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    from .models import Terms

    # –ü–æ–ª—É—á–∞–µ–º —É—Å–ª–æ–≤–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    terms = Terms.objects.first()

    context = {
        'terms': terms,
        'page_title': '–£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã –∏ –¥–æ—Å—Ç–∞–≤–∫–∏'
    }

    return render(request, 'home/terms.html', context)


def privacy_policy(request):
    """üîí –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"""
    from .models import PrivacyPolicy

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–∏—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    privacy_policy = PrivacyPolicy.objects.first()

    context = {
        'privacy_policy': privacy_policy,
        'page_title': '–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏'
    }

    return render(request, 'home/privacy.html', context)




def delivery(request):
    """üöö –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–ø–ª–∞—Ç—ã –∏ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    from .models import DeliveryOption

    queryset = DeliveryOption.objects.filter(is_active=True).order_by('order', 'title')
    delivery_options = list(queryset)

    coverage_labels_map = dict(DeliveryOption.COVERAGE_TAG_CHOICES)
    grouped_options = []

    for tag, label in DeliveryOption.COVERAGE_TAG_CHOICES:
        tagged = [option for option in delivery_options if option.coverage_tag == tag]
        if tagged:
            grouped_options.append({
                'tag': tag,
                'label': label,
                'options': tagged,
            })

    extra_tags = {
        option.coverage_tag: option.coverage_label() for option in delivery_options
        if option.coverage_tag not in coverage_labels_map
    }

    for tag, label in extra_tags.items():
        tagged = [option for option in delivery_options if option.coverage_tag == tag]
        grouped_options.append({
            'tag': tag,
            'label': label,
            'options': tagged,
        })

    payment_methods = sorted({
        payment_method
        for option in delivery_options
        for payment_method in option.payment_methods_list()
    })

    price_examples = []
    for option in delivery_options:
        if option.price_info and option.price_info not in price_examples:
            price_examples.append(option.price_info)
        if len(price_examples) >= 3:
            break

    delivery_time_examples = []
    for option in delivery_options:
        if option.delivery_time and option.delivery_time not in delivery_time_examples:
            delivery_time_examples.append(option.delivery_time)
        if len(delivery_time_examples) >= 3:
            break

    coverage_examples = [
        option.coverage_area for option in delivery_options if option.coverage_area
    ]

    last_updated = max(
        (option.updated_at for option in delivery_options),
        default=None
    )

    delivery_summary = {
        'options_count': len(delivery_options),
        'payment_methods': payment_methods,
        'price_examples': price_examples,
        'delivery_time_examples': delivery_time_examples,
        'coverage_examples': coverage_examples[:3],
        'coverage_labels': [group['label'] for group in grouped_options],
        'last_updated': last_updated,
    }

    context = {
        'delivery_options': delivery_options,
        'grouped_options': grouped_options,
        'delivery_summary': delivery_summary,
    }

    return render(request, 'home/delivery.html', context)


def auto_catalog(request):
    """üöó –ö–∞—Ç–∞–ª–æ–≥ –∞–≤—Ç–æ–∫–æ–≤—Ä–∏–∫–æ–≤"""
    from products.models import AutoCatalogDescription

    auto_categories = Category.objects.filter(is_active=True).order_by('display_order', 'category_name')
    catalog_description = AutoCatalogDescription.objects.first()

    return render(request, 'home/auto_catalog.html', {
        'auto_categories': auto_categories,
        'catalog_description': catalog_description,
    })


def boat_catalog(request):
    """üõ•Ô∏è –ö–∞—Ç–∞–ª–æ–≥ –ª–æ–¥–æ—á–Ω—ã—Ö –∫–æ–≤—Ä–∏–∫–æ–≤"""
    from boats.models import BoatCatalogDescription

    boat_categories = BoatCategory.objects.filter(is_active=True).order_by('display_order', 'category_name')
    catalog_description = BoatCatalogDescription.objects.first()

    return render(request, 'home/boat_catalog.html', {
        'boat_categories': boat_categories,
        'catalog_description': catalog_description,
    })

# üîß –ò–¢–û–ì–û–í–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø –í –§–ê–ô–õ–ï:
#
# üÜï –í —Ñ—É–Ω–∫—Ü–∏–∏ index():
#   ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: company_description = CompanyDescription.objects.first()
#   ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: 'company_description' –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞
#   ‚úÖ –°–û–•–†–ê–ù–ï–ù–û: –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ (hero_section, categories, faqs, gallery_images)
#
# üÜï –í —Ñ—É–Ω–∫—Ü–∏–∏ about():
#   ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã "–û –Ω–∞—Å"
#   ‚úÖ –õ–û–ì–ò–ö–ê: –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ –∂–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
#
# üìä –ù–æ–≤—ã–µ –ø–æ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ:
#   - company_description: –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ (—Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ)
#
# üéØ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:
#   ‚úÖ –ü—Ä–æ—Å—Ç–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ .first()
#   ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ - –º–æ–∂–µ—Ç –±—ã—Ç—å None
#   ‚úÖ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
#   ‚úÖ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö (about)
