# üìÅ products/admin.py - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ª–æ–¥–æ–∫
# üõ•Ô∏è –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–ª—è category_type, parent –¥–ª—è Category + boat_mat_length, boat_mat_width –¥–ª—è Product
# ‚úÖ –°–û–•–†–ê–ù–ï–ù–û: –í—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å SEO, —ç–∫—Å–ø–æ—Ä—Ç–∞, –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

from django.contrib import admin
from django.utils.html import mark_safe, format_html
from django.urls import path, reverse
from django.shortcuts import redirect
from django.http import HttpResponseRedirect
from django import forms
from django.core.exceptions import ValidationError
from django.db import models

from .models import *
from .forms import ProductImportForm

# üÜï –ù–û–í–´–ô –ò–ú–ü–û–†–¢: –§—É–Ω–∫—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
from .export_views import get_export_button_html, get_export_context


# üñºÔ∏è –°–£–©–ï–°–¢–í–£–Æ–©–ê–Ø –∏–Ω–ª–∞–π–Ω –∞–¥–º–∏–Ω–∫–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
class ProductImageInline(admin.TabularInline):
    """üñºÔ∏è –ò–Ω–ª–∞–π–Ω –∞–¥–º–∏–Ω–∫–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π OverwriteStorage"""

    model = ProductImage
    verbose_name = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
    verbose_name_plural = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"
    extra = 1

    # üéØ –ü–æ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    fields = ('image', 'img_preview', 'is_main', 'storage_info')
    readonly_fields = ('img_preview', 'storage_info')

    # üé® –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
    class Media:
        css = {
            'all': ('admin/css/product_images.css',)
        }
        js = ('admin/js/product_images.js',)

    def img_preview(self, obj):
        """üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –≥–ª–∞–≤–Ω–æ–≥–æ"""
        if obj.image:
            main_badge = '<span style="color: #f39c12; font-weight: bold;">üåü –ì–õ–ê–í–ù–û–ï</span>' if obj.is_main else ''
            return format_html(
                '<div style="text-align: center; padding: 5px;">'
                '<img src="{}" style="max-width: 120px; max-height: 120px; object-fit: contain; border-radius: 5px; border: 2px solid {};">'
                '<br><small>{}</small>'
                '</div>',
                obj.image.url,
                '#f39c12' if obj.is_main else '#ddd',
                main_badge
            )
        return "üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ"

    img_preview.short_description = "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä"

    def storage_info(self, obj):
        """üíæ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ñ–∞–π–ª–∞"""
        if obj.image:
            # üéØ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ OverwriteStorage
            storage_type = obj.image.storage.__class__.__name__
            if storage_type == 'OverwriteStorage':
                return format_html('<span style="color: green;">‚úÖ OverwriteStorage</span>')
            else:
                return format_html('<span style="color: orange;">‚ö†Ô∏è {}</span>', storage_type)
        return "‚ùå –§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω"

    storage_info.short_description = "–•—Ä–∞–Ω–∏–ª–∏—â–µ"


# üÜï –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø —Ñ–æ—Ä–º–∞ –¥–ª—è CategoryAdmin —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ª–æ–¥–æ–∫
class CategoryAdminForm(forms.ModelForm):
    """üìù –ö–∞—Å—Ç–æ–º–Ω–∞—è —Ñ–æ—Ä–º–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π SEO –∏ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –ª–æ–¥–æ–∫"""

    class Meta:
        model = Category
        fields = '__all__'

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        # üõ•Ô∏è –ù–û–í–û–ï: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ —Ç–∏–ø—É
        if 'parent' in self.fields:
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            if self.instance and self.instance.pk:
                category_type = self.instance.category_type
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≥–æ –∂–µ —Ç–∏–ø–∞, –∏—Å–∫–ª—é—á–∞—è —Å–µ–±—è
                self.fields['parent'].queryset = Category.objects.filter(
                    category_type=category_type
                ).exclude(pk=self.instance.pk)
            else:
                # –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ
                self.fields['parent'].queryset = Category.objects.all()

    def clean_meta_title(self):
        meta_title = self.cleaned_data.get("meta_title")
        if meta_title and len(meta_title) > 60:
            raise ValidationError(
                f"‚ö†Ô∏è SEO-–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ({len(meta_title)} —Å–∏–º–≤.). "
                f"–ú–∞–∫—Å–∏–º—É–º 60."
            )
        return meta_title

    def clean_meta_description(self):
        meta_description = self.cleaned_data.get("meta_description")
        if meta_description and len(meta_description) > 160:
            raise ValidationError(
                f"‚ö†Ô∏è SEO-–æ–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ ({len(meta_description)} —Å–∏–º–≤.). "
                f"–ú–∞–∫—Å–∏–º—É–º 160."
            )
        return meta_description

    def clean(self):
        """üõ•Ô∏è –ù–û–í–û–ï: –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–µ—Ä–∞—Ä—Ö–∏–∏ –ª–æ–¥–æ–∫"""
        cleaned_data = super().clean()
        category_type = cleaned_data.get('category_type')
        parent = cleaned_data.get('parent')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø–æ–≤ —Ä–æ–¥–∏—Ç–µ–ª—è –∏ —Ä–µ–±–µ–Ω–∫–∞
        if parent and parent.category_type != category_type:
            raise ValidationError({
                'parent': f"–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å —Ç–æ—Ç –∂–µ —Ç–∏–ø: {category_type}"
            })

        return cleaned_data


@admin.register(Category)
class CategoryAdmin(admin.ModelAdmin):
    """üìÇ –ê–¥–º–∏–Ω–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤ —Å SEO, –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º, –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ª–æ–¥–æ–∫"""

    form = CategoryAdminForm

    # üìä –°–ø–∏—Å–æ–∫ —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏ –¥–ª—è –ª–æ–¥–æ–∫
    list_display = [
        "get_category_hierarchy",  # üÜï –ù–û–í–û–ï: –ü–æ–∫–∞–∑ –∏–µ—Ä–∞—Ä—Ö–∏–∏ —Å –∏–∫–æ–Ω–∫–∞–º–∏
        "category_sku",
        "slug",
        "get_products_count",
        "display_order",
        "is_active",
        "image_preview_small",
        "storage_status",
        "seo_status",
    ]
    list_filter = [
        "category_type",  # üÜï –ù–û–í–û–ï: –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É (–∞–≤—Ç–æ/–ª–æ–¥–∫–∏)
        "is_active",
        "created_at",
        "updated_at"
    ]
    search_fields = [
        "category_name",
        "slug",
        "category_sku",
        "meta_title",
        "parent__category_name"  # üÜï –ù–û–í–û–ï: –ü–æ–∏—Å–∫ –ø–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    ]
    list_editable = ["display_order", "is_active", "category_sku"]
    prepopulated_fields = {"slug": ("category_name",)}
    list_per_page = 20

    # üóÇÔ∏è –°–µ–∫—Ü–∏–∏ —Ñ–æ—Ä–º—ã —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
    fieldsets = (
        ("üìã –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", {
            "fields": (
                "category_name",
                "category_sku",
                "slug",
                ("category_type", "parent"),  # üÜï –ù–û–í–û–ï: –ü–æ–ª—è –ª–æ–¥–æ–∫ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
                "category_image",
                "image_preview",
                "storage_info",
            ),
            "description": "üè∑Ô∏è –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –î–ª—è –ª–æ–¥–æ–∫ —É–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.",
        }),
        ("üìù –ö–æ–Ω—Ç–µ–Ω—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", {
            "fields": ("description", "additional_content"),
            "classes": ("wide",),
            "description": "‚úçÔ∏è –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã",
        }),
        ("üîç SEO-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏", {
            "fields": (
                "page_title",
                ("meta_title", "meta_title_length"),
                ("meta_description", "meta_description_length"),
                "google_preview",
            ),
            "description": "üéØ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º",
        }),
        ("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", {
            "fields": ("display_order", "is_active"),
            "classes": ("collapse",),
            "description": "üîß –ü–æ—Ä—è–¥–æ–∫ –∏ –≤–∏–¥–∏–º–æ—Å—Ç—å",
        }),
        ("üìä –°–ª—É–∂–µ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", {
            "fields": ("created_at", "updated_at"),
            "classes": ("collapse",),
        }),
    )

    readonly_fields = (
        'image_preview', 'storage_info', 'meta_title_length',
        'meta_description_length', 'google_preview', 'created_at', 'updated_at'
    )

    # üÜï –ù–û–í–´–ï –ú–ï–¢–û–î–´ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ª–æ–¥–æ–∫
    def get_category_hierarchy(self, obj):
        """üõ•Ô∏è –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–µ—Ä–∞—Ä—Ö–∏–∏ —Å –∏–∫–æ–Ω–∫–∞–º–∏ —Ç–∏–ø–∞"""
        type_icon = "üõ•Ô∏è" if obj.category_type == 'boats' else "üöó"

        if obj.parent:
            hierarchy = f" ‚Üí {obj.category_name}"
            return format_html(
                '<span title="–¢–∏–ø: {}">{}</span> <span style="color: #666;">{}</span>',
                obj.get_category_type_display(),
                type_icon,
                hierarchy
            )
        else:
            return format_html(
                '<span title="–¢–∏–ø: {}"><strong>{} {}</strong></span>',
                obj.get_category_type_display(),
                type_icon,
                obj.category_name
            )

    get_category_hierarchy.short_description = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
    get_category_hierarchy.admin_order_field = "category_name"

    # –í–°–ï –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –ú–ï–¢–û–î–´ –°–û–•–†–ê–ù–ï–ù–´ –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô
    def get_products_count(self, obj):
        """üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        count = obj.products.count()
        if count > 0:
            url = reverse('admin:products_product_changelist') + f'?category__id__exact={obj.uid}'
            return format_html('<a href="{}" title="–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–æ–≤–∞—Ä–∞–º">{} —Ç–æ–≤–∞—Ä–æ–≤</a>', url, count)
        return "0 —Ç–æ–≤–∞—Ä–æ–≤"

    get_products_count.short_description = "–¢–æ–≤–∞—Ä—ã"

    def image_preview_small(self, obj):
        """üñºÔ∏è –ú–∏–Ω–∏–∞—Ç—é—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        if obj.category_image:
            return format_html(
                '<img src="{}" style="width: 50px; height: 50px; object-fit: cover; border-radius: 5px;" title="{}">',
                obj.category_image.url,
                obj.category_name
            )
        return "‚ùå"

    image_preview_small.short_description = "–§–æ—Ç–æ"

    def storage_status(self, obj):
        """üíæ –°—Ç–∞—Ç—É—Å —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if obj.category_image:
            storage_type = obj.category_image.storage.__class__.__name__
            if storage_type == 'OverwriteStorage':
                return format_html('<span style="color: green; font-weight: bold;">‚úÖ</span>')
            else:
                return format_html('<span style="color: orange;">‚ö†Ô∏è</span>')
        return "‚ùå"

    storage_status.short_description = "–•—Ä–∞–Ω–∏–ª–∏—â–µ"

    def seo_status(self, obj):
        """üîç –°—Ç–∞—Ç—É—Å SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        score = 0
        if obj.meta_title:
            score += 1
        if obj.meta_description:
            score += 1
        if obj.page_title:
            score += 1

        if score == 3:
            return format_html('<span style="color: green;">‚úÖ 100%</span>')
        elif score == 2:
            return format_html('<span style="color: orange;">‚ö†Ô∏è 67%</span>')
        elif score == 1:
            return format_html('<span style="color: red;">‚ùå 33%</span>')
        return format_html('<span style="color: red;">‚ùå 0%</span>')

    seo_status.short_description = "SEO"

    def image_preview(self, obj):
        """üñºÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–µ"""
        if obj.category_image:
            return format_html(
                '<div style="margin: 10px 0;">'
                '<img src="{}" style="max-width: 300px; max-height: 200px; object-fit: contain; border: 1px solid #ddd; border-radius: 5px;">'
                '<br><small>–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ~{:.1f} KB</small>'
                '</div>',
                obj.category_image.url,
                obj.category_image.size / 1024 if hasattr(obj.category_image, 'size') else 0
            )
        return "üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ"

    image_preview.short_description = "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä"

    def storage_info(self, obj):
        """üíæ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"""
        if obj.category_image:
            storage_type = obj.category_image.storage.__class__.__name__
            file_name = obj.category_image.name.split('/')[-1]
            if storage_type == 'OverwriteStorage':
                return format_html(
                    '<div style="padding: 8px; background: #d4edda; border: 1px solid #c3e6cb; border-radius: 4px;">'
                    '<strong>‚úÖ OverwriteStorage</strong><br>'
                    '<small>–§–∞–π–ª: {}</small>'
                    '</div>',
                    file_name
                )
            else:
                return format_html(
                    '<div style="padding: 8px; background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 4px;">'
                    '<strong>‚ö†Ô∏è {}</strong><br>'
                    '<small>–§–∞–π–ª: {}</small>'
                    '</div>',
                    storage_type,
                    file_name
                )
        return "‚ùå –§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω"

    storage_info.short_description = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"

    def meta_title_length(self, obj):
        """üìè –î–ª–∏–Ω–∞ –º–µ—Ç–∞-–∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        if obj.meta_title:
            length = len(obj.meta_title)
            color = "green" if length <= 60 else "red"
            return format_html('<span style="color: {};">{}/60</span>', color, length)
        return "0/60"

    meta_title_length.short_description = "–î–ª–∏–Ω–∞"

    def meta_description_length(self, obj):
        """üìè –î–ª–∏–Ω–∞ –º–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏—è"""
        if obj.meta_description:
            length = len(obj.meta_description)
            color = "green" if length <= 160 else "red"
            return format_html('<span style="color: {};">{}/160</span>', color, length)
        return "0/160"

    meta_description_length.short_description = "–î–ª–∏–Ω–∞"

    def google_preview(self, obj):
        """üîç –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤ —Å—Ç–∏–ª–µ Google"""
        title = obj.meta_title or obj.page_title or obj.category_name
        description = obj.meta_description or "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ"

        return format_html(
            '<div style="border: 1px solid #dadce0; border-radius: 8px; padding: 12px; max-width: 500px; font-family: Arial, sans-serif;">'
            '<div style="color: #1a0dab; font-size: 18px; line-height: 1.3; margin-bottom: 4px;">{}</div>'
            '<div style="color: #006621; font-size: 14px; margin-bottom: 4px;">https://site.by/category/{}/</div>'
            '<div style="color: #545454; font-size: 14px; line-height: 1.4;">{}</div>'
            '</div>',
            title,
            obj.slug or 'category-slug',
            description
        )

    google_preview.short_description = "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä Google"

    # –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –î–ï–ô–°–¢–í–ò–Ø –°–û–•–†–ê–ù–ï–ù–´
    actions = ['optimize_seo', 'check_storage']

    def optimize_seo(self, request, queryset):
        """üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        optimized = 0
        for category in queryset:
            changed = False
            if not category.meta_title:
                category.meta_title = f"–≠–í–ê –∫–æ–≤—Ä–∏–∫–∏ {category.category_name} - –∫—É–ø–∏—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–µ"[:60]
                changed = True
            if not category.meta_description:
                category.meta_description = (f"–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≠–í–ê –∫–æ–≤—Ä–∏–∫–∏ –¥–ª—è {category.category_name}. "
                                             f"–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –†–ë. –ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞."
                                             )[:160]
                changed = True
            if changed:
                category.save()
                optimized += 1
        self.message_user(request, f"üîç SEO –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è {optimized} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")

    optimize_seo.short_description = "üîç –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å SEO"

    def check_storage(self, request, queryset):
        """üÜï –ù–û–í–û–ï –î–ï–ô–°–¢–í–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
        overwrite_count = 0
        standard_count = 0

        for category in queryset:
            if category.category_image:
                storage_type = category.category_image.storage.__class__.__name__
                if storage_type == 'OverwriteStorage':
                    overwrite_count += 1
                else:
                    standard_count += 1

        self.message_user(
            request,
            f"üíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {overwrite_count} —Å OverwriteStorage, {standard_count} —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º"
        )

    check_storage.short_description = "üíæ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"

    def get_queryset(self, request):
        return super().get_queryset(request).prefetch_related("products")


# üõçÔ∏è –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –∞–¥–º–∏–Ω–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ–ª–µ–π –ª–æ–¥–æ–∫
@admin.register(Product)
class ProductAdmin(admin.ModelAdmin):
    """üõçÔ∏è –ê–¥–º–∏–Ω–∫–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–º–ø–æ—Ä—Ç–∞, —ç–∫—Å–ø–æ—Ä—Ç–∞, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏ –ø–æ–ª—è–º–∏ –ª–æ–¥–æ–∫"""

    list_display = [
        'get_main_image_preview',
        'product_name',
        'product_sku',
        'category',
        'display_price',
        'get_boat_dimensions',  # üÜï –ù–û–í–û–ï: –†–∞–∑–º–µ—Ä—ã –ª–æ–¥–æ—á–Ω—ã—Ö –∫–æ–≤—Ä–∏–∫–æ–≤
        'has_main_image_status',
        'storage_status',
        'newest_product'
    ]
    list_display_links = ['get_main_image_preview', 'product_name']
    list_filter = [
        'category__category_type',  # üÜï –ù–û–í–û–ï: –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∞–≤—Ç–æ/–ª–æ–¥–∫–∏)
        'category',
        'newest_product',
        'created_at'
    ]
    search_fields = [
        'product_name',
        'product_sku',
        'product_desription',
        'boat_mat_length',  # üÜï –ù–û–í–û–ï: –ü–æ–∏—Å–∫ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º –ª–æ–¥–æ–∫
        'boat_mat_width'  # üÜï –ù–û–í–û–ï: –ü–æ–∏—Å–∫ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º –ª–æ–¥–æ–∫
    ]
    list_editable = ['newest_product']
    list_per_page = 25

    # üñºÔ∏è –ò–Ω–ª–∞–π–Ω –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π OverwriteStorage
    inlines = [ProductImageInline]

    # üìù –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ–ª–µ–π –≤ –∞–¥–º–∏–Ω–∫–µ —Å –Ω–æ–≤–æ–π —Å–µ–∫—Ü–∏–µ–π –¥–ª—è –ª–æ–¥–æ–∫
    fieldsets = (
        ('üõçÔ∏è –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('product_sku', 'product_name', 'slug', 'category', 'price')
        }),
        ('üõ•Ô∏è –†–∞–∑–º–µ—Ä—ã –ª–æ–¥–æ—á–Ω–æ–≥–æ –∫–æ–≤—Ä–∏–∫–∞', {  # üÜï –ù–û–í–ê–Ø –°–ï–ö–¶–ò–Ø
            'fields': ('boat_mat_length', 'boat_mat_width'),
            'description': 'üìè –†–∞–∑–º–µ—Ä—ã –∫–æ–≤—Ä–∏–∫–∞ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö. –ó–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–∏–ø–∞ "–õ–æ–¥–∫–∏".',
            'classes': ('collapse',),  # –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º–∞—è —Å–µ–∫—Ü–∏—è
        }),
        ('üìù –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', {
            'fields': ('product_desription',),
            'classes': ('wide',)
        }),
        ('üîç SEO-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏', {
            'fields': ('page_title', 'meta_description'),
            'classes': ('collapse',)
        }),
        ('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è', {
            'fields': ('newest_product',)
        }),
        ('üìä –°–ª—É–∂–µ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )

    readonly_fields = ('created_at', 'updated_at')

    # üÜï –ù–û–í–´–ô –ú–ï–¢–û–î –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –ª–æ–¥–æ–∫
    def get_boat_dimensions(self, obj):
        """üìè –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–ª—è –ª–æ–¥–æ—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
        if hasattr(obj.category, 'category_type') and obj.category.category_type == 'boats':
            if obj.boat_mat_length and obj.boat_mat_width:
                return format_html(
                    '<span style="background: #e3f2fd; padding: 2px 6px; border-radius: 3px; font-size: 12px;">'
                    'üìè {}√ó{}—Å–º'
                    '</span>',
                    obj.boat_mat_length,
                    obj.boat_mat_width
                )
            else:
                return format_html('<span style="color: orange;">‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω—ã</span>')
        return "-"  # –ü—Ä–æ—á–µ—Ä–∫ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π

    get_boat_dimensions.short_description = "–†–∞–∑–º–µ—Ä—ã –∫–æ–≤—Ä–∏–∫–∞"
    get_boat_dimensions.admin_order_field = "boat_mat_length"

    # –í–°–ï –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –ú–ï–¢–û–î–´ –°–û–•–†–ê–ù–ï–ù–´ –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô
    def get_main_image_preview(self, obj):
        """üñºÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        main_image = obj.product_images.filter(is_main=True).first()
        if main_image and main_image.image:
            return format_html(
                '<img src="{}" style="width: 60px; height: 60px; object-fit: cover; border-radius: 5px; border: 2px solid #f39c12;" title="{}">',
                main_image.image.url,
                obj.product_name
            )

        # –ï—Å–ª–∏ –Ω–µ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ
        first_image = obj.product_images.first()
        if first_image and first_image.image:
            return format_html(
                '<img src="{}" style="width: 60px; height: 60px; object-fit: cover; border-radius: 5px; border: 1px solid #ddd;" title="{}">',
                first_image.image.url,
                obj.product_name
            )

        return "üì∑"

    get_main_image_preview.short_description = "–§–æ—Ç–æ"

    def display_price(self, obj):
        """üí∞ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        if obj.price:
            return f"{obj.price:,} —Ä—É–±.".replace(',', ' ')
        return "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"

    display_price.short_description = "–¶–µ–Ω–∞"
    display_price.admin_order_field = "price"

    def has_main_image_status(self, obj):
        """üñºÔ∏è –°—Ç–∞—Ç—É—Å –Ω–∞–ª–∏—á–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        main_image = obj.product_images.filter(is_main=True).first()
        if main_image:
            return format_html('<span style="color: green;">‚úÖ</span>')
        elif obj.product_images.exists():
            return format_html(
                '<span style="color: orange;" title="–ï—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–æ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –≥–ª–∞–≤–Ω–æ–µ">‚ö†Ô∏è</span>')
        return format_html('<span style="color: red;" title="–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π">‚ùå</span>')

    has_main_image_status.short_description = "–ì–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ"

    def storage_status(self, obj):
        """üíæ –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–∞"""
        images = obj.product_images.all()
        if not images:
            return "‚ùå"

        overwrite_count = 0
        total_count = len(images)

        for image in images:
            if image.image:
                storage_type = image.image.storage.__class__.__name__
                if storage_type == 'OverwriteStorage':
                    overwrite_count += 1

        if overwrite_count == total_count:
            return format_html('<span style="color: green;">‚úÖ {}/{}</span>', overwrite_count, total_count)
        elif overwrite_count > 0:
            return format_html('<span style="color: orange;">‚ö†Ô∏è {}/{}</span>', overwrite_count, total_count)
        return format_html('<span style="color: red;">‚ùå 0/{}</span>', total_count)

    storage_status.short_description = "–•—Ä–∞–Ω–∏–ª–∏—â–µ"

    # –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –î–ï–ô–°–¢–í–ò–Ø –°–û–•–†–ê–ù–ï–ù–´
    actions = [
        'mark_as_new', 'mark_as_regular', 'set_first_image_as_main',
        'generate_missing_slugs', 'check_images_storage'
    ]

    def mark_as_new(self, request, queryset):
        """üÜï –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∫–∞–∫ –Ω–æ–≤—ã–µ"""
        updated = queryset.update(newest_product=True)
        self.message_user(request, f"‚úÖ –û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –Ω–æ–≤—ã–µ: {updated} —Ç–æ–≤–∞—Ä–æ–≤")

    def mark_as_regular(self, request, queryset):
        """üì¶ –£–±—Ä–∞—Ç—å –æ—Ç–º–µ—Ç–∫—É '–Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä' —Å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
        updated = queryset.update(newest_product=False)
        self.message_user(request, f"‚úÖ –£–±—Ä–∞–Ω–∞ –æ—Ç–º–µ—Ç–∫–∞ '–Ω–æ–≤—ã–π': {updated} —Ç–æ–≤–∞—Ä–æ–≤")

    def set_first_image_as_main(self, request, queryset):
        """üñºÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –≥–ª–∞–≤–Ω–æ–µ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –≥–ª–∞–≤–Ω–æ–≥–æ —Ñ–æ—Ç–æ"""
        updated = 0
        for product in queryset:
            if not product.product_images.filter(is_main=True).exists():
                first_image = product.product_images.first()
                if first_image:
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –≥–ª–∞–≤–Ω—ã–µ —Ñ–æ—Ç–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞
                    product.product_images.update(is_main=False)
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –∫–∞–∫ –≥–ª–∞–≤–Ω–æ–µ
                    first_image.is_main = True
                    first_image.save()
                    updated += 1
        self.message_user(request, f"üñºÔ∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≥–ª–∞–≤–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {updated}")

    def generate_missing_slugs(self, request, queryset):
        """üîó –ì–µ–Ω–µ—Ä–∞—Ü–∏—è slug –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –Ω–µ–≥–æ"""
        updated = 0
        for product in queryset.filter(slug__isnull=True):
            product.save()  # save() –º–µ—Ç–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç slug
            updated += 1
        self.message_user(request, f"üîó –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ slug: {updated}")

    def check_images_storage(self, request, queryset):
        """üíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤"""
        total_images = 0
        overwrite_images = 0
        standard_images = 0

        for product in queryset:
            for image in product.product_images.all():
                total_images += 1
                storage_type = image.image.storage.__class__.__name__
                if storage_type == 'OverwriteStorage':
                    overwrite_images += 1
                else:
                    standard_images += 1

        self.message_user(
            request,
            f"üíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {total_images} –≤—Å–µ–≥–æ, "
            f"{overwrite_images} —Å OverwriteStorage, {standard_images} —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º"
        )

    mark_as_new.short_description = "üÜï –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã"
    mark_as_regular.short_description = "üì¶ –£–±—Ä–∞—Ç—å –æ—Ç–º–µ—Ç–∫—É '–Ω–æ–≤—ã–π'"
    set_first_image_as_main.short_description = "üñºÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –∫–∞–∫ –≥–ª–∞–≤–Ω–æ–µ"
    generate_missing_slugs.short_description = "üîó –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ slug"
    check_images_storage.short_description = "üíæ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"

    # üÜï –î–û–ë–ê–í–õ–Ø–ï–ú –ö–û–ù–¢–ï–ö–°–¢ –≠–ö–°–ü–û–†–¢–ê –í –ê–î–ú–ò–ù–ö–£ –¢–û–í–ê–†–û–í
    def changelist_view(self, request, extra_context=None):
        """üé® –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        # üìä –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_context = get_export_context()

        # üé® –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ (–∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ —à–∞–±–ª–æ–Ω)
        extra_context = extra_context or {}
        extra_context.update({
            'export_context': export_context,
            'has_export_permission': request.user.is_staff,
        })

        return super().changelist_view(request, extra_context=extra_context)


# üîß –í–°–ï –û–°–¢–ê–õ–¨–ù–´–ï –ê–î–ú–ò–ù–ö–ò –û–°–¢–ê–Æ–¢–°–Ø –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô

@admin.register(KitVariant)
class KitVariantAdmin(admin.ModelAdmin):
    """üì¶ –ê–¥–º–∏–Ω–∫–∞ –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–π —Ç–æ–≤–∞—Ä–æ–≤"""
    list_display = ['name', 'code', 'price_modifier', 'order', 'is_option', 'formatted_price']
    list_filter = ['is_option']
    search_fields = ['name', 'code']
    list_editable = ['price_modifier', 'order', 'is_option']
    ordering = ['is_option', 'order']

    def formatted_price(self, obj):
        """üí∞ –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ü–µ–Ω—É –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        return f"{obj.price_modifier} —Ä—É–±."

    formatted_price.short_description = "–¶–µ–Ω–∞"

    fieldsets = (
        ('üì¶ –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('name', 'code', 'price_modifier')
        }),
        ('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è', {
            'fields': ('order', 'is_option', 'image')
        }),
    )

    actions = ['make_option', 'make_kit']

    def make_option(self, request, queryset):
        """üîß –ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –æ–ø—Ü–∏–∏"""
        queryset.update(is_option=True, order=100)
        self.message_user(request, f"‚úÖ –ü—Ä–µ–≤—Ä–∞—â–µ–Ω–æ –≤ –æ–ø—Ü–∏–∏: {queryset.count()} –∑–∞–ø–∏—Å–µ–π")

    def make_kit(self, request, queryset):
        """üì¶ –ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏"""
        queryset.update(is_option=False)
        self.message_user(request, f"‚úÖ –ü—Ä–µ–≤—Ä–∞—â–µ–Ω–æ –≤ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏: {queryset.count()} –∑–∞–ø–∏—Å–µ–π")

    make_option.short_description = "üîß –°–¥–µ–ª–∞—Ç—å –æ–ø—Ü–∏—è–º–∏"
    make_kit.short_description = "üì¶ –°–¥–µ–ª–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è–º–∏"


@admin.register(Color)
class ColorAdmin(admin.ModelAdmin):
    """üé® –ê–¥–º–∏–Ω–∫–∞ –¥–ª—è —Ü–≤–µ—Ç–æ–≤ –∫–æ–≤—Ä–∏–∫–æ–≤ –∏ –æ–∫–∞–Ω—Ç–æ–≤–∫–∏"""
    list_display = ['name', 'color_type', 'hex_code', 'color_preview', 'is_available', 'display_order']
    list_filter = ['color_type', 'is_available']
    list_editable = ['display_order', 'is_available']
    search_fields = ['name']
    ordering = ['color_type', 'display_order']

    def color_preview(self, obj):
        """üé® –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ü–≤–µ—Ç–Ω–æ–π –∫–≤–∞–¥—Ä–∞—Ç —Å —Ü–≤–µ—Ç–æ–º –≤ –∞–¥–º–∏–Ω–∫–µ"""
        return mark_safe(
            f'<div style="width:20px; height:20px; background-color:{obj.hex_code}; border:1px solid #666; border-radius:3px; display:inline-block;"></div>'
        )

    color_preview.short_description = "–¶–≤–µ—Ç"

    fieldsets = (
        ('üé® –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('name', 'hex_code', 'color_type', 'display_order')
        }),
        ('üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', {
            'fields': ('carpet_image', 'border_image', 'carpet_preview', 'border_preview'),
            'description': 'üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å–∞–π—Ç–µ'
        }),
        ('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', {
            'fields': ('is_available',)
        }),
    )

    readonly_fields = ('carpet_preview', 'border_preview')

    def carpet_preview(self, obj):
        """üßΩ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–≤—Ä–∏–∫–∞"""
        if obj.carpet_image:
            return format_html(
                '<img src="{}" style="max-width: 100px; max-height: 100px; object-fit: contain; border-radius: 5px;">',
                obj.carpet_image.url
            )
        return "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ"

    carpet_preview.short_description = "–ü—Ä–µ–≤—å—é –∫–æ–≤—Ä–∏–∫–∞"

    def border_preview(self, obj):
        """üñºÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–∫–∞–Ω—Ç–æ–≤–∫–∏"""
        if obj.border_image:
            return format_html(
                '<img src="{}" style="max-width: 100px; max-height: 100px; object-fit: contain; border-radius: 5px;">',
                obj.border_image.url
            )
        return "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ"

    border_preview.short_description = "–ü—Ä–µ–≤—å—é –æ–∫–∞–Ω—Ç–æ–≤–∫–∏"


# üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∫–∏
admin.site.site_header = "üõí –ê–≤—Ç–æ–∫–æ–≤—Ä–∏–∫–∏ - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (–ê–≤—Ç–æ + –õ–æ–¥–∫–∏)"  # üÜï –û–ë–ù–û–í–õ–ï–ù–û
admin.site.site_title = "–ê–≤—Ç–æ–∫–æ–≤—Ä–∏–∫–∏"
admin.site.index_title = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–æ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö –∏ –ª–æ–¥–æ—á–Ω—ã—Ö –∫–æ–≤—Ä–∏–∫–æ–≤"  # üÜï –û–ë–ù–û–í–õ–ï–ù–û

# üîß –ö–õ–Æ–ß–ï–í–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø –í –≠–¢–û–ú –§–ê–ô–õ–ï:
#
# üõ•Ô∏è –î–û–ë–ê–í–õ–ï–ù–û –î–õ–Ø –ö–ê–¢–ï–ì–û–†–ò–ô:
# ‚úÖ –ü–û–õ–Ø: category_type, parent –≤ fieldsets
# ‚úÖ –ú–ï–¢–û–î–´: get_category_hierarchy() - –ø–æ–∫–∞–∑ –∏–µ—Ä–∞—Ä—Ö–∏–∏ —Å –∏–∫–æ–Ω–∫–∞–º–∏
# ‚úÖ –§–ò–õ–¨–¢–†–´: category_type –≤ list_filter
# ‚úÖ –ü–û–ò–°–ö: parent__category_name –≤ search_fields
# ‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–∏–ø–æ–≤ –≤ CategoryAdminForm.clean()
#
# üõ•Ô∏è –î–û–ë–ê–í–õ–ï–ù–û –î–õ–Ø –¢–û–í–ê–†–û–í:
# ‚úÖ –°–ï–ö–¶–ò–Ø: "–†–∞–∑–º–µ—Ä—ã –ª–æ–¥–æ—á–Ω–æ–≥–æ –∫–æ–≤—Ä–∏–∫–∞" –≤ fieldsets
# ‚úÖ –ü–û–õ–Ø: boat_mat_length, boat_mat_width
# ‚úÖ –ú–ï–¢–û–î–´: get_boat_dimensions() - –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–¥–æ–∫
# ‚úÖ –§–ò–õ–¨–¢–†–´: category__category_type –≤ list_filter
# ‚úÖ –ü–û–ò–°–ö: —Ä–∞–∑–º–µ—Ä—ã –ª–æ–¥–æ–∫ –≤ search_fields
#
# üîß –°–û–•–†–ê–ù–ï–ù–û –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô:
# ‚úÖ –í—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
# ‚úÖ SEO —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è
# ‚úÖ –°–∏—Å—Ç–µ–º–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤
# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å OverwriteStorage
# ‚úÖ –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω–∫–∏ (Color, KitVariant) –æ—Å—Ç–∞–ª–∏—Å—å
#
# ‚ùå –£–ë–†–ê–ù–û: –î—É–±–ª–∏—Ä—É—é—â–∏–µ –∞–¥–º–∏–Ω–∫–∏ (Coupon, ProductReview, Wishlist)
#    - –≠—Ç–∏ –∞–¥–º–∏–Ω–∫–∏ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ —Ä–∞–Ω–µ–µ
#    - –û—Å—Ç–∞–≤–ª–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –ª–æ–¥–æ–∫
#
# üéØ –†–ï–ó–£–õ–¨–¢–ê–¢:
# - –ê–¥–º–∏–Ω–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–¥–æ—á–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Ç–æ–≤–∞—Ä–æ–≤
# - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É—Å–ª–æ–≤–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª–µ–π —Ä–∞–∑–º–µ—Ä–æ–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–¥–æ–∫
# - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø–æ–ª–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏
# - –£–º–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –ø–æ–∏—Å–∫ –ø–æ —Ç–∏–ø–∞–º —Ç–æ–≤–∞—Ä–æ–≤
# - –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–µ—Ä–∞—Ä—Ö–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ª–æ–¥–æ–∫
# - –ù–∏–∫–∞–∫–∏—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∞–¥–º–∏–Ω–∫–∞–º–∏


# üìù –ù–û–í–ê–Ø –ê–î–ú–ò–ù–ö–ê: AutoCatalogDescription (—Å–∏–Ω–≥–ª—Ç–æ–Ω)
@admin.register(AutoCatalogDescription)
class AutoCatalogDescriptionAdmin(admin.ModelAdmin):
    """üìù –ê–¥–º–∏–Ω–∫–∞ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –∞–≤—Ç–æ–∫–æ–≤—Ä–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä)"""

    # üö´ –°–∏–Ω–≥–ª—Ç–æ–Ω –ª–æ–≥–∏–∫–∞ –≤ –∞–¥–º–∏–Ω–∫–µ
    def has_add_permission(self, request):
        """üö´ –ó–∞–ø—Ä–µ—Ç–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"""
        return not AutoCatalogDescription.objects.exists()

    def has_delete_permission(self, request, obj=None):
        """‚ö†Ô∏è –†–∞–∑—Ä–µ—à–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ (—á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)"""
        return True

    def changelist_view(self, request, extra_context=None):
        """üìù –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–∏, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ"""
        if not AutoCatalogDescription.objects.exists():
            return self.add_view(request)
        return super().changelist_view(request, extra_context)

    # üé® –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ–ª–µ–π –≤ –∞–¥–º–∏–Ω–∫–µ
    fieldsets = (
        ('üìù –û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –∞–≤—Ç–æ–∫–æ–≤—Ä–∏–∫–æ–≤', {
            'fields': ('title', 'description'),
            'description': '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –∞–≤—Ç–æ–∫–æ–≤—Ä–∏–∫–æ–≤'
        }),
        ('üé¨ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç', {
            'fields': ('additional_content',),
            'classes': ('collapse',),
            'description': 'YouTube –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π HTML –∫–æ–Ω—Ç–µ–Ω—Ç'
        }),
        ('üîç SEO', {
            'fields': ('meta_description',),
            'classes': ('collapse',),
            'description': '–ú–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º'
        }),
    )