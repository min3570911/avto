# üìÅ products/admin.py - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å –∫–Ω–æ–ø–∫–æ–π —ç–∫—Å–ø–æ—Ä—Ç–∞
# üõçÔ∏è –ê–¥–º–∏–Ω–∫–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ –∞–≤—Ç–æ–∫–æ–≤—Ä–∏–∫–æ–≤
# ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ Excel
# üîß –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∞–¥–º–∏–Ω–∫—É

from django.contrib import admin
from django.utils.html import mark_safe, format_html
from django.urls import path, reverse
from django.shortcuts import redirect
from django.http import HttpResponseRedirect
from django import forms
from django.core.exceptions import ValidationError
from django.db import models

from .models import *
from .forms import ProductImportForm

# üÜï –ù–û–í–´–ô –ò–ú–ü–û–†–¢: –§—É–Ω–∫—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
from .export_views import get_export_button_html, get_export_context


# üñºÔ∏è –°–£–©–ï–°–¢–í–£–Æ–©–ê–Ø –∏–Ω–ª–∞–π–Ω –∞–¥–º–∏–Ω–∫–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
class ProductImageInline(admin.TabularInline):
    """üñºÔ∏è –ò–Ω–ª–∞–π–Ω –∞–¥–º–∏–Ω–∫–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π OverwriteStorage"""

    model = ProductImage
    verbose_name = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
    verbose_name_plural = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"
    extra = 1

    # üéØ –ü–æ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    fields = ('image', 'img_preview', 'is_main', 'storage_info')
    readonly_fields = ('img_preview', 'storage_info')

    # üé® –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
    class Media:
        css = {
            'all': ('admin/css/product_images.css',)
        }
        js = ('admin/js/product_images.js',)

    def img_preview(self, obj):
        """üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –≥–ª–∞–≤–Ω–æ–≥–æ"""
        if obj.image:
            main_badge = '<span style="color: #f39c12; font-weight: bold;">üåü –ì–õ–ê–í–ù–û–ï</span>' if obj.is_main else ''
            return format_html(
                '<div style="text-align: center; padding: 5px;">'
                '<img src="{}" style="max-width: 120px; max-height: 120px; object-fit: contain; border-radius: 5px; border: 2px solid {};">'
                '<br><small>{}</small>'
                '</div>',
                obj.image.url,
                '#f39c12' if obj.is_main else '#ddd',
                main_badge
            )
        return "üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ"

    img_preview.short_description = "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä"

    def storage_info(self, obj):
        """üíæ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ñ–∞–π–ª–∞"""
        if obj.image:
            # üéØ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ OverwriteStorage
            storage_type = obj.image.storage.__class__.__name__
            if storage_type == 'OverwriteStorage':
                return format_html(
                    '<small style="color: #28a745;">‚úÖ OverwriteStorage<br>'
                    '–¢–æ—á–Ω–æ–µ –∏–º—è: <code>{}</code></small>',
                    obj.image.name
                )
            else:
                return format_html(
                    '<small style="color: #ffc107;">‚ö†Ô∏è {}<br>'
                    '–ò–º—è —Ñ–∞–π–ª–∞: <code>{}</code></small>',
                    storage_type,
                    obj.image.name
                )
        return "‚Äî"

    storage_info.short_description = "–•—Ä–∞–Ω–∏–ª–∏—â–µ"


# üìÇ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–¥–º–∏–Ω–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± OverwriteStorage (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
class CategoryAdminForm(forms.ModelForm):
    """üìù –§–æ—Ä–º–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π SEO-–ø–æ–ª–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""

    class Meta:
        model = Category
        fields = "__all__"

    def clean_meta_title(self):
        meta_title = self.cleaned_data.get("meta_title")
        if meta_title and len(meta_title) > 60:
            raise ValidationError(
                f"‚ö†Ô∏è SEO-–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ({len(meta_title)} —Å–∏–º–≤.). "
                f"–ú–∞–∫—Å–∏–º—É–º 60."
            )
        return meta_title

    def clean_meta_description(self):
        meta_description = self.cleaned_data.get("meta_description")
        if meta_description and len(meta_description) > 160:
            raise ValidationError(
                f"‚ö†Ô∏è SEO-–æ–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ ({len(meta_description)} —Å–∏–º–≤.). "
                f"–ú–∞–∫—Å–∏–º—É–º 160."
            )
        return meta_description


@admin.register(Category)
class CategoryAdmin(admin.ModelAdmin):
    """üìÇ –ê–¥–º–∏–Ω–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤ —Å SEO, –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""

    form = CategoryAdminForm

    # üìä –°–ø–∏—Å–æ–∫
    list_display = [
        "category_name",
        "category_sku",
        "slug",
        "get_products_count",
        "display_order",
        "is_active",
        "image_preview_small",
        "storage_status",
        "seo_status",
    ]
    list_filter = ["is_active", "created_at", "updated_at"]
    search_fields = ["category_name", "slug", "category_sku", "meta_title"]
    list_editable = ["display_order", "is_active", "category_sku"]
    prepopulated_fields = {"slug": ("category_name",)}
    list_per_page = 20

    # üóÇÔ∏è –°–µ–∫—Ü–∏–∏ —Ñ–æ—Ä–º—ã
    fieldsets = (
        ("üìã –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", {
            "fields": (
                "category_name",
                "category_sku",
                "slug",
                "category_image",
                "image_preview",
                "storage_info",
            ),
            "description": "üè∑Ô∏è –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
        }),
        ("üìù –ö–æ–Ω—Ç–µ–Ω—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", {
            "fields": ("description", "additional_content"),
            "classes": ("wide",),
            "description": "‚úçÔ∏è –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã",
        }),
        ("üîç SEO-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏", {
            "fields": (
                "page_title",
                ("meta_title", "meta_title_length"),
                ("meta_description", "meta_description_length"),
                "google_preview",
            ),
            "description": "üéØ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º",
        }),
        ("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", {
            "fields": ("display_order", "is_active"),
            "classes": ("collapse",),
            "description": "üîß –ü–æ—Ä—è–¥–æ–∫ –∏ –≤–∏–¥–∏–º–æ—Å—Ç—å",
        }),
        ("üìä –°–ª—É–∂–µ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", {
            "fields": ("created_at", "updated_at"),
            "classes": ("collapse",),
            "description": "üïê –î–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
        }),
    )

    # üîí –¢–æ–ª—å–∫–æ-—á—Ç–µ–Ω–∏–µ
    readonly_fields = [
        "image_preview",
        "storage_info",
        "meta_title_length",
        "meta_description_length",
        "google_preview",
        "created_at",
        "updated_at",
    ]

    # ---------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ----------

    def get_products_count(self, obj):
        count = obj.products.count()
        if count == 0:
            return mark_safe('<span style="color:red;">üö´ –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤</span>')
        if count < 5:
            return mark_safe(f'<span style="color:orange;">üì¶ {count} —Ç–æ–≤.</span>')
        return mark_safe(f'<span style="color:green;">üì¶ {count} —Ç–æ–≤.</span>')

    get_products_count.short_description = "–¢–æ–≤–∞—Ä—ã"

    def image_preview(self, obj):
        if obj.category_image:
            return mark_safe(
                f'<img src="{obj.category_image.url}" '
                f'style="max-height:200px;max-width:400px;object-fit:contain;'
                f'border-radius:8px;box-shadow:0 2px 8px rgba(0,0,0,0.1);"/>'
            )
        return "üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ"

    image_preview.short_description = "–ü—Ä–µ–≤—å—é"

    def storage_info(self, obj):
        """üíæ –ù–û–í–´–ô –ú–ï–¢–û–î: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        if obj.category_image:
            storage_type = obj.category_image.storage.__class__.__name__
            if storage_type == 'OverwriteStorage':
                return format_html(
                    '<small style="color: #28a745;">‚úÖ OverwriteStorage<br>'
                    '–§–∞–π–ª: <code>{}</code></small>',
                    obj.category_image.name
                )
            else:
                return format_html(
                    '<small style="color: #ffc107;">‚ö†Ô∏è {}</small>',
                    storage_type
                )
        return "‚Äî"

    storage_info.short_description = "–•—Ä–∞–Ω–∏–ª–∏—â–µ"

    def image_preview_small(self, obj):
        if obj.category_image:
            return mark_safe(
                f'<img src="{obj.category_image.url}" '
                f'style="height:40px;width:40px;object-fit:cover;border-radius:4px;"/>'
            )
        return "‚Äî"

    image_preview_small.short_description = "–§–æ—Ç–æ"

    def storage_status(self, obj):
        """üíæ –ù–û–í–´–ô –ú–ï–¢–û–î: –°—Ç–∞—Ç—É—Å —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –≤ —Å–ø–∏—Å–∫–µ"""
        if obj.category_image:
            storage_type = obj.category_image.storage.__class__.__name__
            if storage_type == 'OverwriteStorage':
                return mark_safe('<span style="color:green;">‚úÖ OverwriteStorage</span>')
            else:
                return mark_safe(f'<span style="color:orange;">‚ö†Ô∏è {storage_type}</span>')
        return "‚Äî"

    storage_status.short_description = "–•—Ä–∞–Ω–∏–ª–∏—â–µ"

    def meta_title_length(self, obj):
        if obj.meta_title:
            length = len(obj.meta_title)
            color = "green" if length <= 60 else "red"
            return mark_safe(f'<span style="color:{color};">{length}/60</span>')
        return "‚Äî"

    meta_title_length.short_description = "–î–ª–∏–Ω–∞"

    def meta_description_length(self, obj):
        if obj.meta_description:
            length = len(obj.meta_description)
            color = "green" if length <= 160 else "red"
            return mark_safe(f'<span style="color:{color};">{length}/160</span>')
        return "‚Äî"

    meta_description_length.short_description = "–î–ª–∏–Ω–∞"

    def seo_status(self, obj):
        has_title = bool(obj.meta_title)
        has_desc = bool(obj.meta_description)
        has_image = bool(obj.category_image)
        if has_title and has_desc and has_image:
            return mark_safe('<span style="color:green;">‚úÖ –ü–æ–ª–Ω–∞—è</span>')
        if has_title or has_desc:
            return mark_safe('<span style="color:orange;">‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–∞—è</span>')
        return mark_safe('<span style="color:red;">‚ùå –ù–µ—Ç</span>')

    seo_status.short_description = "SEO"

    def google_preview(self, obj):
        title = obj.get_meta_title()[:60]
        description = obj.get_meta_description()[:160]
        url = f"example.com/products/category/{obj.slug}/"
        return mark_safe(f"""
        <div style="font-family:Arial;max-width:600px;border:1px solid #ddd;
                    padding:15px;border-radius:8px;background:#f9f9f9;">
            <div style="color:#1a0dab;font-size:18px;margin-bottom:3px;">{title}</div>
            <div style="color:#006621;font-size:14px;margin-bottom:5px;">{url}</div>
            <div style="color:#545454;font-size:13px;line-height:1.4;">{description}</div>
        </div>""")

    google_preview.short_description = "Google preview"

    # üéØ –ú–∞—Å—Å–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    actions = ["activate_categories", "deactivate_categories", "optimize_seo", "check_storage"]

    def activate_categories(self, request, queryset):
        updated = queryset.update(is_active=True)
        self.message_user(request, f"‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {updated}")

    activate_categories.short_description = "‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"

    def deactivate_categories(self, request, queryset):
        updated = queryset.update(is_active=False)
        self.message_user(request, f"üö´ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {updated}")

    deactivate_categories.short_description = "üö´ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"

    def optimize_seo(self, request, queryset):
        optimized = 0
        for category in queryset:
            changed = False
            if not category.meta_title:
                category.meta_title = (
                                          f"{category.category_name} ‚Äì –∫—É–ø–∏—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–µ"
                                      )[:60]
                changed = True
            if not category.meta_description:
                category.meta_description = (
                                                f"–ë–æ–ª—å—à–æ–π –≤—ã–±–æ—Ä {category.category_name.lower()}. "
                                                f"–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –†–ë. –ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞."
                                            )[:160]
                changed = True
            if changed:
                category.save()
                optimized += 1
        self.message_user(request, f"üîç SEO –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è {optimized} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")

    optimize_seo.short_description = "üîç –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å SEO"

    def check_storage(self, request, queryset):
        """üÜï –ù–û–í–û–ï –î–ï–ô–°–¢–í–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
        overwrite_count = 0
        standard_count = 0

        for category in queryset:
            if category.category_image:
                storage_type = category.category_image.storage.__class__.__name__
                if storage_type == 'OverwriteStorage':
                    overwrite_count += 1
                else:
                    standard_count += 1

        self.message_user(
            request,
            f"üíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {overwrite_count} —Å OverwriteStorage, {standard_count} —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º"
        )

    check_storage.short_description = "üíæ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"

    def get_queryset(self, request):
        return super().get_queryset(request).prefetch_related("products")


# üõçÔ∏è –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –∞–¥–º–∏–Ω–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ò –ö–ù–û–ü–ö–û–ô –≠–ö–°–ü–û–†–¢–ê
@admin.register(Product)
class ProductAdmin(admin.ModelAdmin):
    """üõçÔ∏è –ê–¥–º–∏–Ω–∫–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–º–ø–æ—Ä—Ç–∞, —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"""

    list_display = [
        'get_main_image_preview',
        'product_name',
        'product_sku',
        'category',
        'display_price',
        'has_main_image_status',
        'storage_status',
        'newest_product'
    ]
    list_display_links = ['get_main_image_preview', 'product_name']
    list_filter = ['category', 'newest_product', 'created_at']
    search_fields = ['product_name', 'product_sku', 'product_desription']
    list_editable = ['newest_product']
    list_per_page = 25

    # üñºÔ∏è –ò–Ω–ª–∞–π–Ω –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π OverwriteStorage
    inlines = [ProductImageInline]

    # üìù –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ–ª–µ–π –≤ –∞–¥–º–∏–Ω–∫–µ
    fieldsets = (
        ('üõçÔ∏è –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('product_sku', 'product_name', 'slug', 'category', 'price')
        }),
        ('üìù –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', {
            'fields': ('product_desription',),
            'description': 'üé® –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π',
            'classes': ('wide',)
        }),
        ('üîç SEO –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', {
            'fields': ('page_title', 'meta_description'),
            'description': 'üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º',
            'classes': ('collapse',)
        }),
        ('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', {
            'fields': ('newest_product',),
            'classes': ('collapse',)
        }),
        ('üíæ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–∞—Ö', {
            'fields': ('get_main_image_display', 'get_storage_summary'),
            'description': 'üñºÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ',
            'classes': ('collapse',)
        }),
    )

    # üîí –ü–æ–ª—è —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
    readonly_fields = ['get_main_image_display', 'get_storage_summary']

    # üÜï –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –•–†–ê–ù–ò–õ–ò–©–ï–ú

    def get_main_image_preview(self, obj):
        """üñºÔ∏è –ü—Ä–µ–≤—å—é –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–æ–≤"""
        main_image = obj.get_main_image()
        if main_image and main_image.image:
            return format_html(
                '<img src="{}" style="width: 60px; height: 60px; object-fit: cover; border-radius: 5px; border: 2px solid #f39c12;">',
                main_image.image.url
            )
        return format_html(
            '<div style="width: 60px; height: 60px; background: #f8f9fa; border: 1px dashed #ddd; border-radius: 5px; display: flex; align-items: center; justify-content: center; font-size: 12px; color: #6c757d;">üì∑<br>–ù–µ—Ç</div>'
        )

    get_main_image_preview.short_description = "–§–æ—Ç–æ"

    def has_main_image_status(self, obj):
        """‚úÖ –°—Ç–∞—Ç—É—Å –Ω–∞–ª–∏—á–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if obj.has_main_image():
            return mark_safe('<span style="color: green;">‚úÖ –ï—Å—Ç—å</span>')
        else:
            return mark_safe('<span style="color: red;">‚ùå –ù–µ—Ç</span>')

    has_main_image_status.short_description = "–ì–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ"

    def storage_status(self, obj):
        """üíæ –ù–û–í–´–ô –ú–ï–¢–û–î: –°—Ç–∞—Ç—É—Å —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        main_image = obj.get_main_image()
        if main_image and main_image.image:
            storage_type = main_image.image.storage.__class__.__name__
            if storage_type == 'OverwriteStorage':
                return mark_safe('<span style="color:green;">‚úÖ OverwriteStorage</span>')
            else:
                return mark_safe(f'<span style="color:orange;">‚ö†Ô∏è {storage_type}</span>')
        return "‚Äî"

    storage_status.short_description = "–•—Ä–∞–Ω–∏–ª–∏—â–µ"

    def get_main_image_display(self, obj):
        """üñºÔ∏è –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        main_image = obj.get_main_image()
        if main_image and main_image.image:
            storage_type = main_image.image.storage.__class__.__name__
            storage_info = ""
            if storage_type == 'OverwriteStorage':
                storage_info = '<p style="color: #28a745;">‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç OverwriteStorage (—Ç–æ—á–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤)</p>'
            else:
                storage_info = f'<p style="color: #ffc107;">‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç {storage_type}</p>'

            return format_html(
                '<div style="text-align: center; margin: 10px 0;">'
                '<p><strong>üåü –ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</strong></p>'
                '<img src="{}" style="max-width: 300px; max-height: 300px; object-fit: contain; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">'
                '<p><code>{}</code></p>'
                '{}'
                '</div>',
                main_image.image.url,
                main_image.image.name,
                storage_info
            )
        return format_html(
            '<div style="text-align: center; margin: 10px 0; padding: 20px; background: #f8f9fa; border-radius: 8px;">'
            '<p style="color: #6c757d;">üì∑ –ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</p>'
            '<small>–î–æ–±–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∏–∂–µ –∏ –æ—Ç–º–µ—Ç—å—Ç–µ –æ–¥–Ω–æ –∫–∞–∫ –≥–ª–∞–≤–Ω–æ–µ</small>'
            '</div>'
        )

    get_main_image_display.short_description = "–ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"

    def get_storage_summary(self, obj):
        """üíæ –ù–û–í–´–ô –ú–ï–¢–û–î: –°–≤–æ–¥–∫–∞ –ø–æ —Ö—Ä–∞–Ω–∏–ª–∏—â—É –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        images = obj.product_images.all()
        if not images:
            return "–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"

        overwrite_count = 0
        standard_count = 0

        for image in images:
            storage_type = image.image.storage.__class__.__name__
            if storage_type == 'OverwriteStorage':
                overwrite_count += 1
            else:
                standard_count += 1

        summary = f"–í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {images.count()}<br>"
        if overwrite_count > 0:
            summary += f'‚úÖ OverwriteStorage: {overwrite_count}<br>'
        if standard_count > 0:
            summary += f'‚ö†Ô∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ: {standard_count}'

        return mark_safe(summary)

    get_storage_summary.short_description = "–°–≤–æ–¥–∫–∞ –ø–æ —Ö—Ä–∞–Ω–∏–ª–∏—â—É"

    # üéØ –ú–∞—Å—Å–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
    actions = ['mark_as_new', 'mark_as_regular', 'set_first_image_as_main', 'generate_missing_slugs',
               'check_images_storage']

    def mark_as_new(self, request, queryset):
        """üÜï –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã"""
        updated = queryset.update(newest_product=True)
        self.message_user(request, f"‚úÖ –û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –Ω–æ–≤—ã–µ: {updated} —Ç–æ–≤–∞—Ä–æ–≤")

    def mark_as_regular(self, request, queryset):
        """üì¶ –£–±—Ä–∞—Ç—å –æ—Ç–º–µ—Ç–∫—É '–Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä'"""
        updated = queryset.update(newest_product=False)
        self.message_user(request, f"‚úÖ –£–±—Ä–∞–Ω–∞ –æ—Ç–º–µ—Ç–∫–∞ '–Ω–æ–≤—ã–π': {updated} —Ç–æ–≤–∞—Ä–æ–≤")

    def set_first_image_as_main(self, request, queryset):
        """üñºÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –≥–ª–∞–≤–Ω–æ–µ"""
        updated = 0
        for product in queryset:
            if not product.has_main_image():
                first_image = product.product_images.first()
                if first_image:
                    first_image.is_main = True
                    first_image.save()
                    updated += 1
        self.message_user(request, f"üñºÔ∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≥–ª–∞–≤–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {updated}")

    def generate_missing_slugs(self, request, queryset):
        """üîó –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö slug"""
        updated = 0
        for product in queryset:
            if not product.slug:
                from django.utils.text import slugify
                product.slug = slugify(product.product_name)
                product.save()
                updated += 1
        self.message_user(request, f"üîó –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ slug: {updated}")

    def check_images_storage(self, request, queryset):
        """üÜï –ù–û–í–û–ï –î–ï–ô–°–¢–í–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        total_images = 0
        overwrite_images = 0
        standard_images = 0

        for product in queryset:
            for image in product.product_images.all():
                total_images += 1
                storage_type = image.image.storage.__class__.__name__
                if storage_type == 'OverwriteStorage':
                    overwrite_images += 1
                else:
                    standard_images += 1

        self.message_user(
            request,
            f"üíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {total_images} –≤—Å–µ–≥–æ, "
            f"{overwrite_images} —Å OverwriteStorage, {standard_images} —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º"
        )

    mark_as_new.short_description = "üÜï –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã"
    mark_as_regular.short_description = "üì¶ –£–±—Ä–∞—Ç—å –æ—Ç–º–µ—Ç–∫—É '–Ω–æ–≤—ã–π'"
    set_first_image_as_main.short_description = "üñºÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –∫–∞–∫ –≥–ª–∞–≤–Ω–æ–µ"
    generate_missing_slugs.short_description = "üîó –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ slug"
    check_images_storage.short_description = "üíæ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"

    # üÜï –î–û–ë–ê–í–õ–Ø–ï–ú –ö–û–ù–¢–ï–ö–°–¢ –≠–ö–°–ü–û–†–¢–ê –í –ê–î–ú–ò–ù–ö–£ –¢–û–í–ê–†–û–í
    def changelist_view(self, request, extra_context=None):
        """üé® –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        # üìä –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_context = get_export_context()

        # üé® –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ (–∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ —à–∞–±–ª–æ–Ω)
        extra_context = extra_context or {}
        extra_context.update({
            'export_context': export_context,
            'has_export_permission': request.user.is_staff,
        })

        return super().changelist_view(request, extra_context=extra_context)


# üîß –í–°–ï –û–°–¢–ê–õ–¨–ù–´–ï –ê–î–ú–ò–ù–ö–ò –û–°–¢–ê–Æ–¢–°–Ø –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô

@admin.register(KitVariant)
class KitVariantAdmin(admin.ModelAdmin):
    """üì¶ –ê–¥–º–∏–Ω–∫–∞ –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–π —Ç–æ–≤–∞—Ä–æ–≤"""
    list_display = ['name', 'code', 'price_modifier', 'order', 'is_option', 'formatted_price']
    list_filter = ['is_option']
    search_fields = ['name', 'code']
    list_editable = ['price_modifier', 'order', 'is_option']
    ordering = ['is_option', 'order']

    def formatted_price(self, obj):
        """üí∞ –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ü–µ–Ω—É –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        return f"{obj.price_modifier} —Ä—É–±."

    formatted_price.short_description = "–¶–µ–Ω–∞"

    fieldsets = (
        ('üì¶ –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('name', 'code', 'price_modifier')
        }),
        ('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è', {
            'fields': ('order', 'is_option', 'image')
        }),
    )

    actions = ['make_option', 'make_kit']

    def make_option(self, request, queryset):
        """üîß –ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –æ–ø—Ü–∏–∏"""
        queryset.update(is_option=True, order=100)
        self.message_user(request, f"‚úÖ –ü—Ä–µ–≤—Ä–∞—â–µ–Ω–æ –≤ –æ–ø—Ü–∏–∏: {queryset.count()} –∑–∞–ø–∏—Å–µ–π")

    def make_kit(self, request, queryset):
        """üì¶ –ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏"""
        queryset.update(is_option=False)
        self.message_user(request, f"‚úÖ –ü—Ä–µ–≤—Ä–∞—â–µ–Ω–æ –≤ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏: {queryset.count()} –∑–∞–ø–∏—Å–µ–π")

    make_option.short_description = "üîß –°–¥–µ–ª–∞—Ç—å –æ–ø—Ü–∏—è–º–∏"
    make_kit.short_description = "üì¶ –°–¥–µ–ª–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è–º–∏"


@admin.register(Color)
class ColorAdmin(admin.ModelAdmin):
    """üé® –ê–¥–º–∏–Ω–∫–∞ –¥–ª—è —Ü–≤–µ—Ç–æ–≤ –∫–æ–≤—Ä–∏–∫–æ–≤ –∏ –æ–∫–∞–Ω—Ç–æ–≤–∫–∏"""
    list_display = ['name', 'color_type', 'hex_code', 'color_preview', 'is_available', 'display_order']
    list_filter = ['color_type', 'is_available']
    list_editable = ['display_order', 'is_available']
    search_fields = ['name']
    ordering = ['color_type', 'display_order']

    def color_preview(self, obj):
        """üé® –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ü–≤–µ—Ç–Ω–æ–π –∫–≤–∞–¥—Ä–∞—Ç —Å —Ü–≤–µ—Ç–æ–º –≤ –∞–¥–º–∏–Ω–∫–µ"""
        return mark_safe(
            f'<div style="width:20px; height:20px; background-color:{obj.hex_code}; border:1px solid #666; border-radius:3px; display:inline-block;"></div>'
        )

    color_preview.short_description = "–¶–≤–µ—Ç"

    fieldsets = (
        ('üé® –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('name', 'hex_code', 'color_type', 'display_order')
        }),
        ('üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', {
            'fields': ('carpet_image', 'border_image', 'carpet_preview', 'border_preview'),
            'description': 'üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ü–≤–µ—Ç–∞'
        }),
        ('‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å', {
            'fields': ('is_available',),
            'description': 'üîì –ï—Å–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Ç–∫–ª—é—á–∏—Ç–µ —ç—Ç–æ—Ç —Ñ–ª–∞–≥'
        }),
    )

    readonly_fields = ['carpet_preview', 'border_preview']


@admin.register(Coupon)
class CouponAdmin(admin.ModelAdmin):
    """üé´ –ê–¥–º–∏–Ω–∫–∞ –¥–ª—è –∫—É–ø–æ–Ω–æ–≤ –∏ —Å–∫–∏–¥–æ–∫"""
    list_display = ['coupon_code', 'discount_amount', 'minimum_amount', 'is_expired', 'get_status']
    list_filter = ['is_expired', 'created_at']
    list_editable = ['is_expired', 'discount_amount', 'minimum_amount']
    search_fields = ['coupon_code']

    def get_status(self, obj):
        """üîç –°—Ç–∞—Ç—É—Å –∫—É–ø–æ–Ω–∞ —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π"""
        if obj.is_expired:
            return mark_safe('<span style="color: red;">‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω</span>')
        else:
            return mark_safe('<span style="color: green;">‚úÖ –ê–∫—Ç–∏–≤–µ–Ω</span>')

    get_status.short_description = "–°—Ç–∞—Ç—É—Å"


@admin.register(ProductReview)
class ProductReviewAdmin(admin.ModelAdmin):
    """üìù –ê–¥–º–∏–Ω–∫–∞ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤ –æ —Ç–æ–≤–∞—Ä–∞—Ö"""
    list_display = ['product', 'user', 'stars', 'get_content_preview', 'date_added', 'get_likes_info']
    list_filter = ['stars', 'date_added']
    search_fields = ['content', 'user__username', 'product__product_name']
    readonly_fields = ['likes', 'dislikes', 'date_added']

    def get_content_preview(self, obj):
        """üìù –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞"""
        if obj.content:
            preview = obj.content[:50] + "..." if len(obj.content) > 50 else obj.content
            return preview
        return "üìù –ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"

    def get_likes_info(self, obj):
        """üëç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∞–π–∫–∞—Ö/–¥–∏–∑–ª–∞–π–∫–∞—Ö"""
        likes = obj.like_count()
        dislikes = obj.dislike_count()
        return f"üëç {likes} / üëé {dislikes}"

    get_content_preview.short_description = "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
    get_likes_info.short_description = "–†–µ–∞–∫—Ü–∏–∏"


@admin.register(Wishlist)
class WishlistAdmin(admin.ModelAdmin):
    """‚ù§Ô∏è –ê–¥–º–∏–Ω–∫–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
    list_display = ['user', 'product', 'kit_variant', 'get_colors_info', 'has_podpyatnik', 'added_on']
    list_filter = ['added_on', 'has_podpyatnik', 'kit_variant']
    search_fields = ['user__username', 'product__product_name']
    readonly_fields = ['added_on', 'get_total_price']

    def get_colors_info(self, obj):
        """üé® –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ü–≤–µ—Ç–∞—Ö"""
        colors = []
        if obj.carpet_color:
            colors.append(f"üßΩ {obj.carpet_color.name}")
        if obj.border_color:
            colors.append(f"üñºÔ∏è {obj.border_color.name}")
        return " | ".join(colors) if colors else "üé® –¶–≤–µ—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã"

    get_colors_info.short_description = "–¶–≤–µ—Ç–∞"

    fieldsets = (
        ('‚ù§Ô∏è –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('user', 'product', 'kit_variant', 'added_on')
        }),
        ('üé® –¶–≤–µ—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', {
            'fields': ('carpet_color', 'border_color'),
            'classes': ('collapse',)
        }),
        ('üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏', {
            'fields': ('has_podpyatnik', 'get_total_price'),
            'classes': ('collapse',)
        }),
    )


# üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∫–∏
admin.site.site_header = "üõí –ê–≤—Ç–æ–∫–æ–≤—Ä–∏–∫–∏ - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (–ò–º–ø–æ—Ä—Ç + –≠–∫—Å–ø–æ—Ä—Ç)"
admin.site.site_title = "–ê–≤—Ç–æ–∫–æ–≤—Ä–∏–∫–∏"
admin.site.index_title = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–æ–º —Å –∏–º–ø–æ—Ä—Ç–æ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–æ–º –¥–∞–Ω–Ω—ã—Ö"

# üîß –ö–õ–Æ–ß–ï–í–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø –í –≠–¢–û–ú –§–ê–ô–õ–ï:
#
# ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç export_views —Ñ—É–Ω–∫—Ü–∏–π
# ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: get_export_button_html() –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–Ω–æ–ø–∫–∏
# ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: changelist_view() –≤ ProductAdmin –¥–ª—è –∫–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
# ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∞–¥–º–∏–Ω–∫–∏ (—Ç–µ–ø–µ—Ä—å —É–ø–æ–º–∏–Ω–∞–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç)
# ‚úÖ –°–û–•–†–ê–ù–ï–ù–û: –í—Å—è –æ—Å—Ç–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
#
# üéØ –†–ï–ó–£–õ–¨–¢–ê–¢:
# - –í –∞–¥–º–∏–Ω–∫–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –∑–µ–ª–µ–Ω–∞—è –∫–Ω–æ–ø–∫–∞ "üìä –≠–∫—Å–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ Excel"
# - –ö–Ω–æ–ø–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è staff –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# - –ü—Ä–∏ –∫–ª–∏–∫–µ —Å—Ä–∞–∑—É —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è Excel —Ñ–∞–π–ª
# - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞