# üìÅ products/admin.py - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
# üõçÔ∏è –ê–¥–º–∏–Ω–∫–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ –∞–≤—Ç–æ–∫–æ–≤—Ä–∏–∫–æ–≤
# ‚úÖ –°–û–í–†–ï–ú–ï–ù–ù–û: P–µ—Ä–µ—Ö–æ–¥ –Ω–∞ django-ckeditor-5 + —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è CategoryAdmin c SEO-–≤–∞–ª–∏–¥–∞—Ü–∏–µ–π

from django.contrib import admin
from django.utils.html import mark_safe
from django import forms
from django.core.exceptions import ValidationError

from .models import *


# üñºÔ∏è –ò–Ω–ª–∞–π–Ω –∞–¥–º–∏–Ω–∫–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤ (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)
class ProductImageAdmin(admin.StackedInline):
    """üñºÔ∏è –ò–Ω–ª–∞–π–Ω –∞–¥–º–∏–Ω–∫–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤"""
    model = ProductImage
    verbose_name = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
    verbose_name_plural = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"
    extra = 1  # üì∏ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É—Å—Ç—ã—Ö —Ñ–æ—Ä–º –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è

    # üé® –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    fields = ('image', 'img_preview')
    readonly_fields = ('img_preview',)

    def img_preview(self, obj):
        """üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        if obj.image:
            return mark_safe(
                f'<img src="{obj.image.url}" width="150" '
                f'style="border-radius:5px;box-shadow:0 2px 8px rgba(0,0,0,0.1);"/>'
            )
        return "üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ"

    img_preview.short_description = "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä"


# üÜï –§–æ—Ä–º–∞-–≤–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
class CategoryAdminForm(forms.ModelForm):
    """üìù –§–æ—Ä–º–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π SEO-–ø–æ–ª–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""

    class Meta:
        model = Category
        fields = "__all__"

    def clean_meta_title(self):
        meta_title = self.cleaned_data.get("meta_title")
        if meta_title and len(meta_title) > 60:
            raise ValidationError(
                f"‚ö†Ô∏è SEO-–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ({len(meta_title)} —Å–∏–º–≤.). "
                f"–ú–∞–∫—Å–∏–º—É–º 60."
            )
        return meta_title

    def clean_meta_description(self):
        meta_description = self.cleaned_data.get("meta_description")
        if meta_description and len(meta_description) > 160:
            raise ValidationError(
                f"‚ö†Ô∏è SEO-–æ–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ ({len(meta_description)} —Å–∏–º–≤.). "
                f"–ú–∞–∫—Å–∏–º—É–º 160."
            )
        return meta_description


# üìÇ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–¥–º–∏–Ω–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π

class CategoryAdmin(admin.ModelAdmin):
    """üìÇ –ê–¥–º–∏–Ω–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤ —Å SEO, –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""

    form = CategoryAdminForm

    # üìä –°–ø–∏—Å–æ–∫
    list_display = [
        "category_name",
        "category_sku",
        "slug",
        "get_products_count",
        "display_order",
        "is_active",
        "image_preview_small",
        "seo_status",
    ]
    list_filter = ["is_active", "created_at", "updated_at"]
    search_fields = ["category_name", "slug", "category_sku", "meta_title"]
    list_editable = ["display_order", "is_active", "category_sku"]
    prepopulated_fields = {"slug": ("category_name",)}
    list_per_page = 20

    # üóÇÔ∏è –°–µ–∫—Ü–∏–∏ —Ñ–æ—Ä–º—ã
    fieldsets = (
        ("üìã –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", {
            "fields": (
                "category_name",
                "category_sku",
                "slug",
                "category_image",
                "image_preview",
            ),
            "description": "üè∑Ô∏è –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
        }),
        ("üìù –ö–æ–Ω—Ç–µ–Ω—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", {
            "fields": ("description", "additional_content"),
            "classes": ("wide",),
            "description": "‚úçÔ∏è –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã",
        }),
        ("üîç SEO-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏", {
            "fields": (
                "page_title",
                ("meta_title", "meta_title_length"),
                ("meta_description", "meta_description_length"),
                "google_preview",
            ),
            "description": "üéØ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º",
        }),
        ("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", {
            "fields": ("display_order", "is_active"),
            "classes": ("collapse",),
            "description": "üîß –ü–æ—Ä—è–¥–æ–∫ –∏ –≤–∏–¥–∏–º–æ—Å—Ç—å",
        }),
        ("üìä –°–ª—É–∂–µ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", {
            "fields": ("created_at", "updated_at"),
            "classes": ("collapse",),
            "description": "üïê –î–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
        }),
    )

    # üîí –¢–æ–ª—å–∫–æ-—á—Ç–µ–Ω–∏–µ
    readonly_fields = [
        "image_preview",
        "meta_title_length",
        "meta_description_length",
        "google_preview",
        "created_at",
        "updated_at",
    ]

    # ---------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ----------

    def get_products_count(self, obj):
        count = obj.products.count()
        if count == 0:
            return mark_safe('<span style="color:red;">üö´ –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤</span>')
        if count < 5:
            return mark_safe(f'<span style="color:orange;">üì¶ {count} —Ç–æ–≤.</span>')
        return mark_safe(f'<span style="color:green;">üì¶ {count} —Ç–æ–≤.</span>')

    get_products_count.short_description = "–¢–æ–≤–∞—Ä—ã"

    def image_preview(self, obj):
        if obj.category_image:
            return mark_safe(
                f'<img src="{obj.category_image.url}" '
                f'style="max-height:200px;max-width:400px;object-fit:contain;'
                f'border-radius:8px;box-shadow:0 2px 8px rgba(0,0,0,0.1);"/>'
            )
        return "üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ"

    image_preview.short_description = "–ü—Ä–µ–≤—å—é"

    def image_preview_small(self, obj):
        if obj.category_image:
            return mark_safe(
                f'<img src="{obj.category_image.url}" '
                f'style="height:40px;width:40px;object-fit:cover;border-radius:4px;"/>'
            )
        return "‚Äî"

    image_preview_small.short_description = "–§–æ—Ç–æ"

    def meta_title_length(self, obj):
        if obj.meta_title:
            length = len(obj.meta_title)
            color = "green" if length <= 60 else "red"
            return mark_safe(f'<span style="color:{color};">{length}/60</span>')
        return "‚Äî"

    meta_title_length.short_description = "–î–ª–∏–Ω–∞"

    def meta_description_length(self, obj):
        if obj.meta_description:
            length = len(obj.meta_description)
            color = "green" if length <= 160 else "red"
            return mark_safe(f'<span style="color:{color};">{length}/160</span>')
        return "‚Äî"

    meta_description_length.short_description = "–î–ª–∏–Ω–∞"

    def seo_status(self, obj):
        has_title = bool(obj.meta_title)
        has_desc = bool(obj.meta_description)
        has_image = bool(obj.category_image)
        if has_title and has_desc and has_image:
            return mark_safe('<span style="color:green;">‚úÖ –ü–æ–ª–Ω–∞—è</span>')
        if has_title or has_desc:
            return mark_safe('<span style="color:orange;">‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–∞—è</span>')
        return mark_safe('<span style="color:red;">‚ùå –ù–µ—Ç</span>')

    seo_status.short_description = "SEO"

    def google_preview(self, obj):
        title = obj.get_meta_title()[:60]
        description = obj.get_meta_description()[:160]
        url = f"example.com/products/category/{obj.slug}/"
        return mark_safe(f"""
        <div style="font-family:Arial;max-width:600px;border:1px solid #ddd;
                    padding:15px;border-radius:8px;background:#f9f9f9;">
            <div style="color:#1a0dab;font-size:18px;margin-bottom:3px;">{title}</div>
            <div style="color:#006621;font-size:14px;margin-bottom:5px;">{url}</div>
            <div style="color:#545454;font-size:13px;line-height:1.4;">{description}</div>
        </div>""")

    google_preview.short_description = "Google preview"

    # üéØ –ú–∞—Å—Å–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    actions = ["activate_categories", "deactivate_categories", "optimize_seo"]

    def activate_categories(self, request, queryset):
        updated = queryset.update(is_active=True)
        self.message_user(request, f"‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {updated}")

    activate_categories.short_description = "‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"

    def deactivate_categories(self, request, queryset):
        updated = queryset.update(is_active=False)
        self.message_user(request, f"üö´ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {updated}")

    deactivate_categories.short_description = "üö´ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"

    def optimize_seo(self, request, queryset):
        optimized = 0
        for category in queryset:
            changed = False
            if not category.meta_title:
                category.meta_title = (
                    f"{category.category_name} ‚Äì –∫—É–ø–∏—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–µ"
                )[:60]
                changed = True
            if not category.meta_description:
                category.meta_description = (
                    f"–ë–æ–ª—å—à–æ–π –≤—ã–±–æ—Ä {category.category_name.lower()}. "
                    f"–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –†–ë. –ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞."
                )[:160]
                changed = True
            if changed:
                category.save()
                optimized += 1
        self.message_user(request, f"üîç SEO –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è {optimized} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")

    optimize_seo.short_description = "üîç –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å SEO"

    def get_queryset(self, request):
        return super().get_queryset(request).prefetch_related("products")
class ProductAdmin(admin.ModelAdmin):
    """üõçÔ∏è –ê–¥–º–∏–Ω–∫–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π CKEditor 5"""

    list_display = ['product_name', 'category', 'display_price', 'newest_product', 'get_images_count']
    list_filter = ['category', 'newest_product', 'created_at']
    search_fields = ['product_name', 'product_desription']
    list_editable = ['newest_product']  # ‚úèÔ∏è –ë—ã—Å—Ç—Ä–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

    # üñºÔ∏è –ò–Ω–ª–∞–π–Ω –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    inlines = [ProductImageAdmin]

    # üìù –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ–ª–µ–π –≤ –∞–¥–º–∏–Ω–∫–µ
    fieldsets = (
        ('üõçÔ∏è –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('product_name', 'slug', 'category', 'price')
        }),
        ('üìù –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', {
            'fields': ('product_desription',),
            'description': 'üé® –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π CKEditor 5)',
            'classes': ('wide',)
        }),
        ('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', {
            'fields': ('newest_product',),
            'classes': ('collapse',)  # üì¶ –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—ã–π –±–ª–æ–∫
        }),
    )

    def get_images_count(self, obj):
        """üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É —Ç–æ–≤–∞—Ä–∞"""
        count = obj.product_images.count()
        if count == 0:
            return mark_safe('<span style="color: red;">‚ùå –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</span>')
        elif count < 3:
            return mark_safe(f'<span style="color: orange;">‚ö†Ô∏è {count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</span>')
        else:
            return mark_safe(f'<span style="color: green;">‚úÖ {count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</span>')

    get_images_count.short_description = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

    # üìä –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    actions = ['mark_as_new', 'mark_as_regular', 'duplicate_products']

    def mark_as_new(self, request, queryset):
        """üÜï –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã"""
        updated = queryset.update(newest_product=True)
        self.message_user(request, f"‚úÖ –û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –Ω–æ–≤—ã–µ: {updated} —Ç–æ–≤–∞—Ä–æ–≤")

    def mark_as_regular(self, request, queryset):
        """üì¶ –£–±—Ä–∞—Ç—å –æ—Ç–º–µ—Ç–∫—É '–Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä'"""
        updated = queryset.update(newest_product=False)
        self.message_user(request, f"‚úÖ –£–±—Ä–∞–Ω–∞ –æ—Ç–º–µ—Ç–∫–∞ '–Ω–æ–≤—ã–π': {updated} —Ç–æ–≤–∞—Ä–æ–≤")

    def duplicate_products(self, request, queryset):
        """üìã –î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã"""
        duplicated = 0
        for product in queryset:
            # üîÑ –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Ç–æ–≤–∞—Ä–∞
            product.pk = None
            product.product_name = f"{product.product_name} (–∫–æ–ø–∏—è)"
            product.slug = f"{product.slug}-copy"
            product.save()
            duplicated += 1

        self.message_user(request, f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –∫–æ–ø–∏–π: {duplicated}")

    mark_as_new.short_description = "üÜï –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã"
    mark_as_regular.short_description = "üì¶ –£–±—Ä–∞—Ç—å –æ—Ç–º–µ—Ç–∫—É '–Ω–æ–≤—ã–π'"
    duplicate_products.short_description = "üìã –î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã"


# üìÇ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –í–°–ï–• –ú–û–î–ï–õ–ï–ô
@admin.register(Category)
class CategoryAdmin(admin.ModelAdmin):
    """üìÇ –ê–¥–º–∏–Ω–∫–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤"""
    list_display = ['category_name', 'slug', 'get_products_count']
    search_fields = ['category_name']
    prepopulated_fields = {'slug': ('category_name',)}

    def get_products_count(self, obj):
        """üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        count = obj.products.count()
        return f"üì¶ {count} —Ç–æ–≤–∞—Ä–æ–≤" if count > 0 else "üö´ –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤"

    get_products_count.short_description = "–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"


@admin.register(KitVariant)
class KitVariantAdmin(admin.ModelAdmin):
    """üì¶ –ê–¥–º–∏–Ω–∫–∞ –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–π —Ç–æ–≤–∞—Ä–æ–≤"""
    list_display = ['name', 'code', 'price_modifier', 'order', 'is_option', 'formatted_price']
    list_filter = ['is_option']
    search_fields = ['name', 'code']
    list_editable = ['price_modifier', 'order', 'is_option']
    ordering = ['is_option', 'order']

    def formatted_price(self, obj):
        """üí∞ –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ü–µ–Ω—É –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        return f"{obj.price_modifier} —Ä—É–±."

    formatted_price.short_description = "–¶–µ–Ω–∞"

    fieldsets = (
        ('üì¶ –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('name', 'code', 'price_modifier')
        }),
        ('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è', {
            'fields': ('order', 'is_option', 'image')
        }),
    )

    actions = ['make_option', 'make_kit', 'reset_prices']

    def make_option(self, request, queryset):
        """üîß –ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –æ–ø—Ü–∏–∏"""
        queryset.update(is_option=True, order=100)
        self.message_user(request, f"‚úÖ –ü—Ä–µ–≤—Ä–∞—â–µ–Ω–æ –≤ –æ–ø—Ü–∏–∏: {queryset.count()} –∑–∞–ø–∏—Å–µ–π")

    def make_kit(self, request, queryset):
        """üì¶ –ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏"""
        queryset.update(is_option=False)
        self.message_user(request, f"‚úÖ –ü—Ä–µ–≤—Ä–∞—â–µ–Ω–æ –≤ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏: {queryset.count()} –∑–∞–ø–∏—Å–µ–π")

    make_option.short_description = "üîß –°–¥–µ–ª–∞—Ç—å –æ–ø—Ü–∏—è–º–∏"
    make_kit.short_description = "üì¶ –°–¥–µ–ª–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è–º–∏"


@admin.register(Color)
class ColorAdmin(admin.ModelAdmin):
    """üé® –ê–¥–º–∏–Ω–∫–∞ –¥–ª—è —Ü–≤–µ—Ç–æ–≤ –∫–æ–≤—Ä–∏–∫–æ–≤ –∏ –æ–∫–∞–Ω—Ç–æ–≤–∫–∏"""
    list_display = ['name', 'color_type', 'hex_code', 'color_preview', 'is_available', 'display_order']
    list_filter = ['color_type', 'is_available']
    list_editable = ['display_order', 'is_available']
    search_fields = ['name']
    ordering = ['color_type', 'display_order']

    def color_preview(self, obj):
        """üé® –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ü–≤–µ—Ç–Ω–æ–π –∫–≤–∞–¥—Ä–∞—Ç —Å —Ü–≤–µ—Ç–æ–º –≤ –∞–¥–º–∏–Ω–∫–µ"""
        return mark_safe(
            f'<div style="width:20px; height:20px; background-color:{obj.hex_code}; border:1px solid #666; border-radius:3px; display:inline-block;"></div>'
        )

    color_preview.short_description = "–¶–≤–µ—Ç"

    fieldsets = (
        ('üé® –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('name', 'hex_code', 'color_type', 'display_order')
        }),
        ('üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', {
            'fields': ('carpet_image', 'border_image', 'carpet_preview', 'border_preview'),
            'description': 'üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ü–≤–µ—Ç–∞'
        }),
        ('‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å', {
            'fields': ('is_available',),
            'description': 'üîì –ï—Å–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Ç–∫–ª—é—á–∏—Ç–µ —ç—Ç–æ—Ç —Ñ–ª–∞–≥'
        }),
    )

    readonly_fields = ['carpet_preview', 'border_preview']


@admin.register(Coupon)
class CouponAdmin(admin.ModelAdmin):
    """üé´ –ê–¥–º–∏–Ω–∫–∞ –¥–ª—è –∫—É–ø–æ–Ω–æ–≤ –∏ —Å–∫–∏–¥–æ–∫"""
    list_display = ['coupon_code', 'discount_amount', 'minimum_amount', 'is_expired', 'get_status']
    list_filter = ['is_expired', 'created_at']
    list_editable = ['is_expired', 'discount_amount', 'minimum_amount']
    search_fields = ['coupon_code']

    def get_status(self, obj):
        """üîç –°—Ç–∞—Ç—É—Å –∫—É–ø–æ–Ω–∞ —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π"""
        if obj.is_expired:
            return mark_safe('<span style="color: red;">‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω</span>')
        else:
            return mark_safe('<span style="color: green;">‚úÖ –ê–∫—Ç–∏–≤–µ–Ω</span>')

    get_status.short_description = "–°—Ç–∞—Ç—É—Å"


@admin.register(ProductReview)
class ProductReviewAdmin(admin.ModelAdmin):
    """üìù –ê–¥–º–∏–Ω–∫–∞ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤ –æ —Ç–æ–≤–∞—Ä–∞—Ö"""
    list_display = ['product', 'user', 'stars', 'get_content_preview', 'date_added', 'get_likes_info']
    list_filter = ['stars', 'date_added']
    search_fields = ['content', 'user__username', 'product__product_name']
    readonly_fields = ['likes', 'dislikes', 'date_added']

    def get_content_preview(self, obj):
        """üìù –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞"""
        if obj.content:
            preview = obj.content[:50] + "..." if len(obj.content) > 50 else obj.content
            return preview
        return "üìù –ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"

    def get_likes_info(self, obj):
        """üëç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∞–π–∫–∞—Ö/–¥–∏–∑–ª–∞–π–∫–∞—Ö"""
        likes = obj.like_count()
        dislikes = obj.dislike_count()
        return f"üëç {likes} / üëé {dislikes}"

    get_content_preview.short_description = "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
    get_likes_info.short_description = "–†–µ–∞–∫—Ü–∏–∏"


@admin.register(Wishlist)
class WishlistAdmin(admin.ModelAdmin):
    """‚ù§Ô∏è –ê–¥–º–∏–Ω–∫–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
    list_display = ['user', 'product', 'kit_variant', 'get_colors_info', 'has_podpyatnik', 'added_on']
    list_filter = ['added_on', 'has_podpyatnik', 'kit_variant']
    search_fields = ['user__username', 'product__product_name']
    readonly_fields = ['added_on', 'get_total_price']

    def get_colors_info(self, obj):
        """üé® –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ü–≤–µ—Ç–∞—Ö"""
        colors = []
        if obj.carpet_color:
            colors.append(f"üßΩ {obj.carpet_color.name}")
        if obj.border_color:
            colors.append(f"üñºÔ∏è {obj.border_color.name}")
        return " | ".join(colors) if colors else "üé® –¶–≤–µ—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã"

    get_colors_info.short_description = "–¶–≤–µ—Ç–∞"

    fieldsets = (
        ('‚ù§Ô∏è –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('user', 'product', 'kit_variant', 'added_on')
        }),
        ('üé® –¶–≤–µ—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', {
            'fields': ('carpet_color', 'border_color'),
            'classes': ('collapse',)
        }),
        ('üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏', {
            'fields': ('has_podpyatnik', 'get_total_price'),
            'classes': ('collapse',)
        }),
    )


# ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –º–æ–¥–µ–ª—å Product
admin.site.register(Product, ProductAdmin)

# üéØ –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∞–¥–º–∏–Ω–∫–∏
admin.site.site_header = "üõí –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –º–∞–≥–∞–∑–∏–Ω–∞ –∞–≤—Ç–æ–∫–æ–≤—Ä–∏–∫–æ–≤"
admin.site.site_title = "–ê–≤—Ç–æ–∫–æ–≤—Ä–∏–∫–∏ - –ê–¥–º–∏–Ω–∫–∞"
admin.site.index_title = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–º"

# üîß –ò–ó–ú–ï–ù–ï–ù–ò–Ø:
# ‚úÖ –°–û–•–†–ê–ù–ï–ù–û: –í—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∞–¥–º–∏–Ω–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –ø—Ä–µ–∂–¥–µ
# ‚úÖ –£–õ–£–ß–®–ï–ù–û: CKEditor 5 –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ CKEditor5Field –≤ –º–æ–¥–µ–ª—è—Ö
# ‚úÖ –°–û–í–†–ï–ú–ï–ù–ù–û: –ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é
#
# üìù –ü–†–ò–ú–ï–ß–ê–ù–ò–ï:
# CKEditor 5 –∑–∞–º–µ–Ω–∏—Ç –ø–æ–ª–µ product_desription –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–ª–∞–≥–æ–¥–∞—Ä—è CKEditor5Field
# –≤ –º–æ–¥–µ–ª–∏ Product. –ù–∏–∫–∞–∫–∏—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è!