# üìÅ products/admin_views.py
# üõ†Ô∏è –§–ò–ù–ê–õ–¨–ù–ê–Ø –≤–µ—Ä—Å–∏—è –ë–ï–ó –∫–æ—Å—Ç—ã–ª—è —Å –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ–º Excel
# ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º process_structured_data() –Ω–∞–ø—Ä—è–º—É—é
# ‚úÖ –£–±—Ä–∞–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è Excel-–∫–Ω–∏–≥–∞ –≤ execute_import_view()

import logging
from django.shortcuts import render, redirect
from django.contrib.admin.views.decorators import staff_member_required
from django.contrib import messages
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_http_methods
from django import forms
from django.core.files.uploadedfile import InMemoryUploadedFile

from .import_processor import ProductImportProcessor, preview_excel_data
from .import_utils import read_excel_file, separate_categories_and_products
from .image_utils import process_images_zip

logger = logging.getLogger(__name__)


class UnifiedImportForm(forms.Form):
    """
    üìä –ï–î–ò–ù–ê–Ø —Ñ–æ—Ä–º–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ Excel + ZIP

    –ó–∞–º–µ–Ω—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ ExcelUploadForm –∏ ProductImportForm
    """

    excel_file = forms.FileField(
        label="üìä Excel —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏",
        help_text="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: .xlsx, .xls (–º–∞–∫—Å. 10 –ú–ë)",
        widget=forms.FileInput(attrs={
            'accept': '.xlsx,.xls',
            'class': 'form-control'
        })
    )

    images_zip = forms.FileField(
        label="üñºÔ∏è ZIP –∞—Ä—Ö–∏–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏",
        help_text="–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: .zip (–º–∞–∫—Å. 10 –ú–ë)",
        required=False,
        widget=forms.FileInput(attrs={
            'accept': '.zip',
            'class': 'form-control'
        })
    )

    def clean_excel_file(self):
        """üîç –í–∞–ª–∏–¥–∞—Ü–∏—è Excel —Ñ–∞–π–ª–∞"""
        file = self.cleaned_data.get('excel_file')

        if not file:
            raise forms.ValidationError("‚ùå –§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω")

        # üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if file.size > 10 * 1024 * 1024:
            raise forms.ValidationError(
                f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file.size / 1024 / 1024:.1f} –ú–ë. –ú–∞–∫—Å–∏–º—É–º: 10 –ú–ë"
            )

        # üìÅ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        allowed_extensions = ['.xlsx', '.xls']
        file_extension = file.name.lower().split('.')[-1]

        if f'.{file_extension}' not in allowed_extensions:
            raise forms.ValidationError(
                f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: .{file_extension}. –†–∞–∑—Ä–µ—à–µ–Ω—ã: {', '.join(allowed_extensions)}"
            )

        return file

    def clean_images_zip(self):
        """üÜï –í–∞–ª–∏–¥–∞—Ü–∏—è ZIP –∞—Ä—Ö–∏–≤–∞"""
        zip_file = self.cleaned_data.get('images_zip')

        if not zip_file:
            return zip_file

        # üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if zip_file.size > 10 * 1024 * 1024:
            raise forms.ValidationError(
                f"‚ùå ZIP —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {zip_file.size / 1024 / 1024:.1f} –ú–ë. –ú–∞–∫—Å–∏–º—É–º: 10 –ú–ë"
            )

        # üìÅ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        if not zip_file.name.lower().endswith('.zip'):
            raise forms.ValidationError("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç. –†–∞–∑—Ä–µ—à–µ–Ω —Ç–æ–ª—å–∫–æ .zip")

        return zip_file


@staff_member_required
def import_form_view(request):
    """üìù –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ñ–æ—Ä–º–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤"""
    if request.method == 'POST':
        form = UnifiedImportForm(request.POST, request.FILES)

        if form.is_valid():
            try:
                excel_file = form.cleaned_data['excel_file']
                images_zip = form.cleaned_data.get('images_zip')

                # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
                request.session['uploaded_file_name'] = excel_file.name
                request.session['uploaded_file_size'] = excel_file.size

                # üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –î–û –∞–Ω–∞–ª–∏–∑–∞ Excel
                images_processed = 0
                if images_zip:
                    try:
                        request.session['uploaded_zip_name'] = images_zip.name
                        request.session['uploaded_zip_size'] = images_zip.size

                        logger.info("üñºÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É ZIP –∞—Ä—Ö–∏–≤–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏...")
                        images_processed = process_images_zip(images_zip)
                        request.session['images_processed'] = images_processed

                        messages.success(request, f"üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {images_processed}")
                        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {images_processed} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

                    except Exception as e:
                        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {str(e)}"
                        logger.error(error_msg)
                        messages.warning(request, error_msg)
                        request.session['images_processed'] = 0
                else:
                    # üßπ –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ ZIP –µ—Å–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
                    request.session.pop('uploaded_zip_name', None)
                    request.session.pop('uploaded_zip_size', None)
                    request.session['images_processed'] = 0

                # üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º Excel —Ñ–∞–π–ª
                excel_file.seek(0)
                preview_result = preview_excel_data(excel_file)

                if not preview_result['success']:
                    messages.error(request, f"‚ùå {preview_result['error']}")
                    return render(request, 'admin/products/import_form.html', {'form': form})

                # üìä –ß–∏—Ç–∞–µ–º –ü–û–õ–ù–´–ï –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
                excel_file.seek(0)
                success, raw_data = read_excel_file(excel_file)

                if not success:
                    messages.error(request, f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {raw_data}")
                    return render(request, 'admin/products/import_form.html', {'form': form})

                # üîÑ –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–æ–≤–∞—Ä—ã
                categories, products, invalid_data = separate_categories_and_products(raw_data)

                # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏
                request.session['preview_data'] = preview_result  # –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                request.session['full_import_data'] = {  # üéØ –°–¢–†–£–ö–¢–£–†–ò–†–û–í–ê–ù–ù–´–ï –¥–∞–Ω–Ω—ã–µ (–Ω–µ Excel!)
                    'categories': categories,
                    'products': products,
                    'invalid_data': invalid_data,
                    'success': True
                }

                # üéâ –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                if images_zip:
                    success_msg = f"‚úÖ –§–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã: Excel –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, {images_processed} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ"
                else:
                    success_msg = "‚úÖ Excel —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"

                messages.success(request, success_msg)
                return redirect('import_preview')

            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤: {str(e)}"
                logger.error(error_msg, exc_info=True)
                messages.error(request, error_msg)

        else:
            # üìã –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            for field, errors in form.errors.items():
                for error in errors:
                    messages.error(request, error)

    else:
        form = UnifiedImportForm()

    return render(request, 'admin/products/import_form.html', {'form': form})


@staff_member_required
def import_preview_view(request):
    """üëÅÔ∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö"""
    try:
        # üìä –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        preview_data = request.session.get('preview_data')

        if not preview_data:
            messages.error(request, "‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ.")
            return redirect('import_form')

        if not preview_data['success']:
            messages.error(request, f"‚ùå {preview_data['error']}")
            return redirect('import_form')

        # üñºÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö
        images_processed = request.session.get('images_processed', 0)
        zip_name = request.session.get('uploaded_zip_name')
        zip_size = request.session.get('uploaded_zip_size', 0)

        # üìà –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–±–ª–æ–Ω–∞
        context = {
            'title': '–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–º–ø–æ—Ä—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤',
            'statistics': preview_data['statistics'],
            'categories': preview_data.get('categories', []),
            'products': preview_data.get('products', []),
            'invalid_data': preview_data['invalid_data'],
            'total_categories': preview_data.get('total_categories', 0),
            'total_products': preview_data.get('total_products', 0),
            'total_invalid': preview_data['total_invalid'],
            'file_name': request.session.get('uploaded_file_name', 'unknown.xlsx'),
            'file_size': request.session.get('uploaded_file_size', 0),
            # üñºÔ∏è –î–∞–Ω–Ω—ã–µ –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö
            'images_processed': images_processed,
            'zip_name': zip_name,
            'zip_size': zip_size,
            'has_images': images_processed > 0,
        }

        return render(request, 'admin/products/import_preview.html', context)

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {str(e)}"
        logger.error(error_msg)
        messages.error(request, error_msg)
        return redirect('import_form')


@staff_member_required
@require_http_methods(["POST"])
def execute_import_view(request):
    """
    üöÄ –ò–°–ü–†–ê–í–õ–Å–ù–ù–û–ï –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –ë–ï–ó –∫–æ—Å—Ç—ã–ª—è —Å Excel

    –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç process_structured_data() –Ω–∞–ø—Ä—è–º—É—é —Å –≥–æ—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    """
    try:
        # üìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if 'confirm_import' not in request.POST:
            messages.error(request, "‚ùå –ò–º–ø–æ—Ä—Ç –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω")
            return redirect('import_preview')

        # üìä –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Å—Å–∏–∏
        full_data = request.session.get('full_import_data')

        if not full_data or not full_data.get('success'):
            messages.error(request, "‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ.")
            return redirect('import_form')

        # üéØ –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ—Ç–æ–≤—ã–µ —Å–ø–∏—Å–∫–∏
        categories_data = full_data.get('categories', [])
        products_data = full_data.get('products', [])
        invalid_data = full_data.get('invalid_data', [])

        logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç: {len(categories_data)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π, {len(products_data)} —Ç–æ–≤–∞—Ä–æ–≤")
        messages.info(request, "üîÑ –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤...")

        # üéØ –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –±–µ–∑ Excel!
        processor = ProductImportProcessor()
        result = processor.process_structured_data(categories_data, products_data, invalid_data)

        # üìä –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        logger.info(f"üìà –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–ø–æ—Ä—Ç–∞: {result['success']}, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {result.get('statistics', {})}")

        # üßπ –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        session_keys = [
            'preview_data', 'full_import_data', 'uploaded_file_name', 'uploaded_file_size',
            'uploaded_zip_name', 'uploaded_zip_size', 'images_processed'
        ]
        for key in session_keys:
            request.session.pop(key, None)

        # üìà –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        request.session['import_results'] = result

        if result['success']:
            stats = result['statistics']
            # üñºÔ∏è –î–æ–ø–æ–ª–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö
            images_info = ""
            if stats.get('images_processed', 0) > 0:
                images_info = f", –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {stats.get('images_processed', 0)}"

            messages.success(
                request,
                f"‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! "
                f"–°–æ–∑–¥–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {stats.get('categories_created', 0)}, "
                f"—Ç–æ–≤–∞—Ä–æ–≤: {stats.get('products_created', 0)}, "
                f"–æ–±–Ω–æ–≤–ª–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {stats.get('categories_updated', 0)}, "
                f"—Ç–æ–≤–∞—Ä–æ–≤: {stats.get('products_updated', 0)}"
                f"{images_info}, "
                f"–æ—à–∏–±–æ–∫: {stats.get('errors', 0)}"
            )
        else:
            messages.error(request, f"‚ùå –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω —Å –æ—à–∏–±–∫–∞–º–∏: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")

        return redirect('import_results')

    except Exception as e:
        error_msg = f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {str(e)}"
        logger.error(error_msg, exc_info=True)
        messages.error(request, error_msg)
        return redirect('import_form')


@staff_member_required
def import_results_view(request):
    """üìà –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–º–ø–æ—Ä—Ç–∞"""
    try:
        # üìä –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ —Å–µ—Å—Å–∏–∏
        results = request.session.get('import_results')

        if not results:
            messages.warning(request, "‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–º–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return redirect('import_form')

        # üìà –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = {
            'title': '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–º–ø–æ—Ä—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤',
            'results': results,
            'statistics': results.get('statistics', {}),
            'errors': results.get('errors', []),
            'invalid_data': results.get('invalid_data', []),
        }

        # üßπ –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        request.session.pop('import_results', None)

        return render(request, 'admin/products/import_results.html', context)

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {str(e)}"
        logger.error(error_msg)
        messages.error(request, error_msg)
        return redirect('import_form')


@staff_member_required
@csrf_exempt
def ajax_validate_file(request):
    """‚ö° AJAX –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ (Excel + ZIP)"""
    if request.method != 'POST':
        return JsonResponse({'success': False, 'error': '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'})

    try:
        if 'file' not in request.FILES:
            return JsonResponse({'success': False, 'error': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'})

        file = request.FILES['file']
        file_extension = file.name.lower().split('.')[-1]

        if file_extension in ['xlsx', 'xls']:
            # ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è Excel —Ñ–∞–π–ª–∞
            form = UnifiedImportForm()
            form.cleaned_data = {'excel_file': file}

            try:
                form.clean_excel_file()

                # üìä –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                preview_result = preview_excel_data(file)

                if preview_result['success']:
                    return JsonResponse({
                        'success': True,
                        'message': 'Excel —Ñ–∞–π–ª –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω',
                        'file_type': 'excel',
                        'statistics': preview_result['statistics']
                    })
                else:
                    return JsonResponse({
                        'success': False,
                        'error': preview_result['error']
                    })

            except forms.ValidationError as e:
                return JsonResponse({'success': False, 'error': str(e)})

        elif file_extension == 'zip':
            # üñºÔ∏è –í–∞–ª–∏–¥–∞—Ü–∏—è ZIP —Ñ–∞–π–ª–∞
            form = UnifiedImportForm()
            form.cleaned_data = {'images_zip': file}

            try:
                form.clean_images_zip()

                # üìä –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                import zipfile
                with zipfile.ZipFile(file, 'r') as zip_file:
                    file_count = len([f for f in zip_file.namelist()
                                      if not f.startswith('__MACOSX') and not f.endswith('/')])

                return JsonResponse({
                    'success': True,
                    'message': f'ZIP –∞—Ä—Ö–∏–≤ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω ({file_count} —Ñ–∞–π–ª–æ–≤)',
                    'file_type': 'zip',
                    'file_count': file_count
                })

            except forms.ValidationError as e:
                return JsonResponse({'success': False, 'error': str(e)})
        else:
            return JsonResponse({
                'success': False,
                'error': f'–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: .{file_extension}'
            })

    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}'
        })

# üîß –ö–†–ò–¢–ò–ß–ù–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø –í –≠–¢–û–ú –§–ê–ô–õ–ï:
#
# ‚úÖ –°–û–ó–î–ê–ù–û: UnifiedImportForm - –µ–¥–∏–Ω–∞—è —Ñ–æ—Ä–º–∞ –≤–º–µ—Å—Ç–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
# ‚úÖ –£–ë–†–ê–ù–û: –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π Excel-–∫–Ω–∏–≥–∏ –≤ execute_import_view()
# ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ processor.process_structured_data()
# ‚úÖ –£–ü–†–û–©–ï–ù–û: –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö - –º–µ–Ω—å—à–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —à–∞–≥–æ–≤
# ‚úÖ –°–û–•–†–ê–ù–ï–ù–û: –í—Å—è –ª–æ–≥–∏–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
#
# üéØ –†–ï–ó–£–õ–¨–¢–ê–¢:
# - –ù–ï–¢ –∫–æ—Å—Ç—ã–ª—è —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º Excel —Ñ–∞–π–ª–æ–º
# - –û–¥–Ω–∞ —Ñ–æ—Ä–º–∞ –≤–º–µ—Å—Ç–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
# - –ü—Ä—è–º–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
# - –ë–æ–ª–µ–µ —á–∏—Å—Ç–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞