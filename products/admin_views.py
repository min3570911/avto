# üìÅ products/admin_views.py
# üîß View-—Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∏–º–ø–æ—Ä—Ç–∞ –≤ Django –∞–¥–º–∏–Ω–∫–µ

import json
import logging
from typing import Dict, Any
from django.shortcuts import render, redirect
from django.contrib.admin.views.decorators import staff_member_required
from django.contrib import messages
from django.http import JsonResponse, HttpResponse, Http404
from django.urls import reverse
from django.utils.decorators import method_decorator
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_POST
from django.core.cache import cache
from django.conf import settings
import uuid

from .forms import ProductImportForm, ImportPreviewForm, CategoryImportForm, ImportTemplateDownloadForm
from .import_processor import ImportProcessor
from .import_utils import ImportStats
from .models import Product, Category

logger = logging.getLogger(__name__)


@staff_member_required
def import_products_view(request):
    """
    üìä –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤

    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ñ–æ—Ä–º—É –∑–∞–≥—Ä—É–∑–∫–∏ Excel —Ñ–∞–π–ª–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    """

    if request.method == 'POST':
        form = ProductImportForm(request.POST, request.FILES)

        if form.is_valid():
            try:
                # üìÅ –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                excel_file = form.cleaned_data['excel_file']

                # üîß –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏–º–ø–æ—Ä—Ç–∞
                processor = ImportProcessor(excel_file, request.user)

                # ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
                is_valid, validation_errors = processor.validate_file()

                if not is_valid:
                    for error in validation_errors:
                        messages.error(request, error)
                    return render(request, 'admin/products/import_form.html', {'form': form})

                # üëÅÔ∏è –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö
                preview_data = processor.preview_data(rows_count=10)
                file_info = processor.get_file_info()

                # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –≤ –∫–µ—à–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
                session_key = str(uuid.uuid4())
                cache_key = f"import_session_{session_key}"

                cache.set(cache_key, {
                    'processor_data': {
                        'filename': excel_file.name,
                        'file_size': excel_file.size,
                        'column_mapping': processor.column_mapping,
                        'preview_data': preview_data,
                        'file_info': file_info
                    },
                    'import_settings': form.get_import_settings(),
                    'user_id': request.user.id
                }, timeout=3600)  # 1 —á–∞—Å

                # üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
                return redirect('products:import_preview', session_key=session_key)

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
                messages.error(request, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")

        else:
            # üìù –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã
            for field, errors in form.errors.items():
                for error in errors:
                    messages.error(request, f"{field}: {error}")

    else:
        form = ProductImportForm()

    # üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —à–∞–±–ª–æ–Ω–∞
    context = {
        'form': form,
        'title': 'üìä –ò–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤',
        'total_products': Product.objects.count(),
        'total_categories': Category.objects.count(),
    }

    return render(request, 'admin/products/import_form.html', context)


@staff_member_required
def import_preview_view(request, session_key):
    """
    üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º

    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    """

    # üîç –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞
    cache_key = f"import_session_{session_key}"
    session_data = cache.get(cache_key)

    if not session_data:
        messages.error(request, "–°–µ—Å—Å–∏—è –∏–º–ø–æ—Ä—Ç–∞ –∏—Å—Ç–µ–∫–ª–∞. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ.")
        return redirect('products:import_products')

    # üîí –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if session_data['user_id'] != request.user.id:
        messages.error(request, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏ –∏–º–ø–æ—Ä—Ç–∞.")
        return redirect('products:import_products')

    if request.method == 'POST':
        preview_form = ImportPreviewForm(request.POST)

        if preview_form.is_valid():
            # ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∏–º–ø–æ—Ä—Ç
            return redirect('products:import_process', session_key=session_key)
        else:
            # ‚ùå –û—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            for field, errors in preview_form.errors.items():
                for error in errors:
                    messages.error(request, error)

    else:
        preview_form = ImportPreviewForm(initial={
            'file_session_key': session_key,
            'import_settings': json.dumps(session_data['import_settings'])
        })

    # üìä –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    processor_data = session_data['processor_data']
    preview_data = processor_data['preview_data']

    # üìà –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    valid_rows = sum(1 for row in preview_data if row.get('_is_valid', False))
    invalid_rows = len(preview_data) - valid_rows

    # üéØ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã
    categories_to_create = set()
    for row in preview_data:
        if row.get('_parsed_category_sku'):
            try:
                Category.objects.get(category_sku=row['_parsed_category_sku'])
            except Category.DoesNotExist:
                categories_to_create.add(row['_parsed_category_sku'])

    context = {
        'preview_form': preview_form,
        'preview_data': preview_data[:10],  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫
        'file_info': processor_data['file_info'],
        'import_settings': session_data['import_settings'],
        'session_key': session_key,
        'title': 'üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–º–ø–æ—Ä—Ç–∞',
        'stats': {
            'total_rows': processor_data['file_info']['total_rows'],
            'valid_rows': valid_rows,
            'invalid_rows': invalid_rows,
            'categories_to_create': len(categories_to_create),
            'preview_count': len(preview_data)
        }
    }

    return render(request, 'admin/products/import_preview.html', context)


@staff_member_required
def import_process_view(request, session_key):
    """
    üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö

    –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ Excel —Ñ–∞–π–ª–∞
    """

    # üîç –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞
    cache_key = f"import_session_{session_key}"
    session_data = cache.get(cache_key)

    if not session_data:
        messages.error(request, "–°–µ—Å—Å–∏—è –∏–º–ø–æ—Ä—Ç–∞ –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return redirect('products:import_products')

    # üîí –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if session_data['user_id'] != request.user.id:
        messages.error(request, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏ –∏–º–ø–æ—Ä—Ç–∞.")
        return redirect('products:import_products')

    if request.method != 'POST':
        messages.error(request, "–ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞.")
        return redirect('products:import_preview', session_key=session_key)

    try:
        # üìÅ –í–æ—Å—Å–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏ (–¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª)
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Celery

        # üîÑ –≠–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∏–º–ø–æ—Ä—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –∫–µ—à–∞
        processor_data = session_data['processor_data']
        import_settings = session_data['import_settings']

        # üìä –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–º–ø–æ—Ä—Ç–∞
        stats = ImportStats()
        stats.total_rows = processor_data['file_info']['total_rows']

        # üîÑ –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –ø–æ–ª–Ω—ã–π ImportProcessor)
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        preview_data = processor_data['preview_data']

        for row_num, row_data in enumerate(preview_data, start=2):
            stats.processed_rows += 1

            if row_data.get('_is_valid', False):
                # ‚úÖ –≠–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                product_name = row_data.get('_parsed_product_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä')
                stats.add_success(row_num, 'create', product_name)
            else:
                # ‚ùå –≠–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                errors = row_data.get('_validation_errors', ['–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'])
                for error in errors:
                    stats.add_error(row_num, error)

        # üìä –ü–æ–ª—É—á–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        final_stats = stats.get_summary()

        # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–µ—à–µ –¥–ª—è –ø–æ–∫–∞–∑–∞
        results_key = f"import_results_{session_key}"
        cache.set(results_key, {
            'stats': final_stats,
            'import_settings': import_settings,
            'file_info': processor_data['file_info'],
            'completed_at': str(timezone.now()),
            'user_id': request.user.id
        }, timeout=7200)  # 2 —á–∞—Å–∞

        # üßπ –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –∏–º–ø–æ—Ä—Ç–∞
        cache.delete(cache_key)

        # ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if final_stats['error_count'] == 0:
            messages.success(
                request,
                f"üéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ! –°–æ–∑–¥–∞–Ω–æ: {final_stats['created_count']}, "
                f"–æ–±–Ω–æ–≤–ª–µ–Ω–æ: {final_stats['updated_count']}"
            )
        else:
            messages.warning(
                request,
                f"‚ö†Ô∏è –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏. –£—Å–ø–µ—à–Ω–æ: {final_stats['created_count'] + final_stats['updated_count']}, "
                f"–æ—à–∏–±–æ–∫: {final_stats['error_count']}"
            )

        return redirect('products:import_results', session_key=session_key)

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {str(e)}")
        messages.error(request, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {str(e)}")
        return redirect('products:import_products')


@staff_member_required
def import_results_view(request, session_key):
    """
    üìä –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–º–ø–æ—Ä—Ç–∞

    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
    """

    # üîç –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –∫–µ—à–∞
    results_key = f"import_results_{session_key}"
    results_data = cache.get(results_key)

    if not results_data:
        messages.error(request, "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–º–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∏.")
        return redirect('products:import_products')

    # üîí –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if results_data['user_id'] != request.user.id:
        messages.error(request, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —ç—Ç–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞.")
        return redirect('products:import_products')

    context = {
        'stats': results_data['stats'],
        'import_settings': results_data['import_settings'],
        'file_info': results_data['file_info'],
        'completed_at': results_data['completed_at'],
        'session_key': session_key,
        'title': 'üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–º–ø–æ—Ä—Ç–∞'
    }

    return render(request, 'admin/products/import_results.html', context)


@staff_member_required
def download_template_view(request):
    """
    üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ Excel —Ñ–∞–π–ª–æ–≤

    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —à–∞–±–ª–æ–Ω Excel —Ñ–∞–π–ª–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
    """

    if request.method == 'POST':
        form = ImportTemplateDownloadForm(request.POST)

        if form.is_valid():
            template_type = form.cleaned_data['template_type']
            include_examples = form.cleaned_data['include_examples']

            try:
                # üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel —à–∞–±–ª–æ–Ω
                excel_content = generate_excel_template(template_type, include_examples)

                # üìÅ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                response = HttpResponse(
                    excel_content,
                    content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
                )

                filename = f"template_{template_type}_{timezone.now().strftime('%Y%m%d')}.xlsx"
                response['Content-Disposition'] = f'attachment; filename="{filename}"'

                logger.info(f"üì• –°–∫–∞—á–∞–Ω —à–∞–±–ª–æ–Ω: {filename} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {request.user.username}")
                return response

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞: {str(e)}")
                messages.error(request, f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞: {str(e)}")

        else:
            for field, errors in form.errors.items():
                for error in errors:
                    messages.error(request, error)

    else:
        form = ImportTemplateDownloadForm()

    context = {
        'form': form,
        'title': 'üì• –°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞'
    }

    return render(request, 'admin/products/download_template.html', context)


@staff_member_required
@require_POST
def import_progress_ajax(request, session_key):
    """
    üìä AJAX endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–º–ø–æ—Ä—Ç–∞

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–º–ø–æ—Ä—Ç–∞
    """

    try:
        # üîç –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–∑ –∫–µ—à–∞
        progress_key = f"import_progress_{session_key}"
        progress_data = cache.get(progress_key)

        if not progress_data:
            return JsonResponse({
                'status': 'not_found',
                'message': '–ü—Ä–æ–≥—Ä–µ—Å—Å –∏–º–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω'
            })

        # üîí –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if progress_data.get('user_id') != request.user.id:
            return JsonResponse({
                'status': 'forbidden',
                'message': '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∏–º–ø–æ—Ä—Ç—É'
            })

        return JsonResponse({
            'status': 'success',
            'progress': progress_data
        })

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–º–ø–æ—Ä—Ç–∞: {str(e)}")
        return JsonResponse({
            'status': 'error',
            'message': str(e)
        })


def generate_excel_template(template_type: str, include_examples: bool = True) -> bytes:
    """
    üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞

    Args:
        template_type: –¢–∏–ø —à–∞–±–ª–æ–Ω–∞ ('products', 'categories', 'full')
        include_examples: –í–∫–ª—é—á–∞—Ç—å –ª–∏ –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö

    Returns:
        bytes: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ Excel —Ñ–∞–π–ª–∞
    """

    import openpyxl
    from openpyxl.styles import Font, PatternFill, Alignment
    from io import BytesIO

    # üìä –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–Ω–∏–≥—É
    workbook = openpyxl.Workbook()
    worksheet = workbook.active

    if template_type in ['products', 'full']:
        # üõçÔ∏è –®–∞–±–ª–æ–Ω –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
        worksheet.title = "–¢–æ–≤–∞—Ä—ã"

        # üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
        headers = [
            '–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞',
            '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
            'Title —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
            '–¶–µ–Ω–∞',
            '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
            '–ú–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏–µ',
            '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
        ]

        # üé® –û—Ñ–æ—Ä–º–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        header_font = Font(bold=True, color="FFFFFF")
        header_fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
        header_alignment = Alignment(horizontal="center", vertical="center")

        for col, header in enumerate(headers, 1):
            cell = worksheet.cell(row=1, column=col)
            cell.value = header
            cell.font = header_font
            cell.fill = header_fill
            cell.alignment = header_alignment

        # üìù –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        if include_examples:
            examples = [
                [
                    'CARPET001',
                    '1.BMW 3 —Å–µ—Ä–∏—è (E90/E91/E92/E93) 2005-2012',
                    '–ö–æ–≤—Ä–∏–∫–∏ BMW 3 —Å–µ—Ä–∏—è - –∑–∞–∫–∞–∑–∞—Ç—å –æ–Ω–ª–∞–π–Ω',
                    '85.00',
                    '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ –∫–æ–≤—Ä–∏–∫–∏ –¥–ª—è BMW 3 —Å–µ—Ä–∏—è. –¢–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–æ—Ä–º–µ –ø–æ–ª–∞.',
                    '–ê–≤—Ç–æ–∫–æ–≤—Ä–∏–∫–∏ BMW 3 —Å–µ—Ä–∏—è E90-E93 (2005-2012). –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ë–µ–ª–∞—Ä—É—Å–∏. –ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞.',
                    'bmw_3_series.jpg'
                ],
                [
                    'CARPET002',
                    '2.Audi A4 (B8) 2008-2015',
                    '–ö–æ–≤—Ä–∏–∫–∏ Audi A4 B8 - –∫—É–ø–∏—Ç—å —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π',
                    '90.00',
                    '–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–µ –∫–æ–≤—Ä–∏–∫–∏ –¥–ª—è Audi A4. –í—ã—Å–æ–∫–∏–µ –±–æ—Ä—Ç—ã, –ø—Ä–æ—Ç–∏–≤–æ—Å–∫–æ–ª—å–∑—è—â–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å.',
                    '–ê–≤—Ç–æ–∫–æ–≤—Ä–∏–∫–∏ Audi A4 B8 (2008-2015). –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞. –õ—É—á—à–∏–µ —Ü–µ–Ω—ã –≤ –ë–µ–ª–∞—Ä—É—Å–∏.',
                    'audi_a4_b8.jpg'
                ]
            ]

            for row_num, example in enumerate(examples, 2):
                for col_num, value in enumerate(example, 1):
                    worksheet.cell(row=row_num, column=col_num, value=value)

        # üìè –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        for column in worksheet.columns:
            max_length = 0
            column_letter = column[0].column_letter
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = min(max_length + 2, 50)
            worksheet.column_dimensions[column_letter].width = adjusted_width

    # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ BytesIO
    excel_buffer = BytesIO()
    workbook.save(excel_buffer)
    excel_buffer.seek(0)

    return excel_buffer.getvalue()


# üîß –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï UTILITY –§–£–ù–ö–¶–ò–ò

def clear_expired_import_sessions():
    """
    üßπ –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ –∫–µ—à–∞

    –ú–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ Celery –∏–ª–∏ cron
    """

    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞
    # –°–µ–π—á–∞—Å –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π –∏–º–ø–æ—Ä—Ç–∞")


def get_import_statistics() -> Dict[str, Any]:
    """
    üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–º–ø–æ—Ä—Ç–æ–≤

    Returns:
        Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è
    """

    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –ë–î
    return {
        'total_imports_today': 0,
        'total_products_imported': 0,
        'average_import_time': '0:00:00',
        'success_rate': 100.0
    }

# üîß –ü–†–ò–ú–ï–ù–ï–ù–ò–ï:
# –≠—Ç–∏ view-—Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É—é—Ç—Å—è —Å URL-–∞–º–∏ –≤ products/urls.py
# –∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —à–∞–±–ª–æ–Ω—ã –∏–∑ templates/admin/products/