# üìÅ products/admin_views.py
# üõ†Ô∏è –§–ò–ù–ê–õ–¨–ù–ê–Ø –≤–µ—Ä—Å–∏—è admin_views —Å –ø—Ä–æ—Å—Ç—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ URL
# ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ redirect –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –∏–º–µ–Ω–∞

import logging
from django.shortcuts import render, redirect
from django.contrib.admin.views.decorators import staff_member_required
from django.contrib import messages
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_http_methods
from django import forms
from django.core.files.uploadedfile import InMemoryUploadedFile

from .import_processor import ProductImportProcessor, preview_excel_data

logger = logging.getLogger(__name__)


class ExcelUploadForm(forms.Form):
    """üìä –§–æ—Ä–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Excel —Ñ–∞–π–ª–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    excel_file = forms.FileField(
        label="–í—ã–±–µ—Ä–∏—Ç–µ Excel —Ñ–∞–π–ª",
        help_text="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: .xlsx, .xls (–º–∞–∫—Å. 10 –ú–ë)",
        widget=forms.FileInput(attrs={
            'accept': '.xlsx,.xls',
            'class': 'form-control'
        })
    )

    def clean_excel_file(self):
        """üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        file = self.cleaned_data.get('excel_file')

        if not file:
            raise forms.ValidationError("‚ùå –§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω")

        # üìè –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (10 –ú–ë –º–∞–∫—Å–∏–º—É–º)
        if file.size > 10 * 1024 * 1024:
            raise forms.ValidationError(
                f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file.size / 1024 / 1024:.1f} –ú–ë. "
                f"–ú–∞–∫—Å–∏–º—É–º: 10 –ú–ë"
            )

        # üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        allowed_extensions = ['.xlsx', '.xls']
        file_extension = file.name.lower().split('.')[-1]

        if f'.{file_extension}' not in allowed_extensions:
            raise forms.ValidationError(
                f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: .{file_extension}. "
                f"–†–∞–∑—Ä–µ—à–µ–Ω—ã: {', '.join(allowed_extensions)}"
            )

        return file


@staff_member_required
def import_form_view(request):
    """üìù –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ñ–æ—Ä–º–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ Excel —Ñ–∞–π–ª–∞"""
    if request.method == 'POST':
        form = ExcelUploadForm(request.POST, request.FILES)

        if form.is_valid():
            try:
                excel_file = form.cleaned_data['excel_file']

                # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ —Å–µ—Å—Å–∏–∏
                request.session['uploaded_file_name'] = excel_file.name
                request.session['uploaded_file_size'] = excel_file.size

                # üîÑ –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                file_content = excel_file.read()
                excel_file.seek(0)

                # üëÅÔ∏è –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö
                preview_result = preview_excel_data(excel_file)

                if not preview_result['success']:
                    messages.error(request, f"‚ùå {preview_result['error']}")
                    return render(request, 'admin/products/import_form.html', {'form': form})

                # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ —Å–µ—Å—Å–∏–∏
                request.session['preview_data'] = preview_result

                messages.success(request, "‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return redirect('import_preview')  # ‚Üê –ü–†–û–°–¢–û–ï –ò–ú–Ø URL

            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}"
                logger.error(error_msg)
                messages.error(request, error_msg)

        else:
            # üìã –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            for field, errors in form.errors.items():
                for error in errors:
                    messages.error(request, error)

    else:
        form = ExcelUploadForm()

    return render(request, 'admin/products/import_form.html', {'form': form})


@staff_member_required
def import_preview_view(request):
    """üëÅÔ∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel —Ñ–∞–π–ª–∞"""
    try:
        # üìä –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑ —Å–µ—Å—Å–∏–∏
        preview_data = request.session.get('preview_data')

        if not preview_data:
            messages.error(request, "‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ.")
            return redirect('import_form')  # ‚Üê –ü–†–û–°–¢–û–ï –ò–ú–Ø URL

        if not preview_data['success']:
            messages.error(request, f"‚ùå {preview_data['error']}")
            return redirect('import_form')  # ‚Üê –ü–†–û–°–¢–û–ï –ò–ú–Ø URL

        # üìà –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–±–ª–æ–Ω–∞
        context = {
            'title': '–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–º–ø–æ—Ä—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤',
            'statistics': preview_data['statistics'],
            'categories': preview_data.get('categories', []),
            'products': preview_data.get('products', []),
            'invalid_data': preview_data['invalid_data'],
            'total_categories': preview_data.get('total_categories', 0),
            'total_products': preview_data.get('total_products', 0),
            'total_invalid': preview_data['total_invalid'],
            'file_name': request.session.get('uploaded_file_name', 'unknown.xlsx'),
            'file_size': request.session.get('uploaded_file_size', 0),
        }

        return render(request, 'admin/products/import_preview.html', context)

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {str(e)}"
        logger.error(error_msg)
        messages.error(request, error_msg)
        return redirect('import_form')  # ‚Üê –ü–†–û–°–¢–û–ï –ò–ú–Ø URL


@staff_member_required
@require_http_methods(["POST"])
def execute_import_view(request):
    """üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
    try:
        # üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–µ—Å—Å–∏–∏
        preview_data = request.session.get('preview_data')

        if not preview_data or not preview_data['success']:
            messages.error(request, "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ.")
            return redirect('import_form')  # ‚Üê –ü–†–û–°–¢–û–ï –ò–ú–Ø URL

        # üìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if 'confirm_import' not in request.POST:
            messages.error(request, "‚ùå –ò–º–ø–æ—Ä—Ç –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω")
            return redirect('import_preview')  # ‚Üê –ü–†–û–°–¢–û–ï –ò–ú–Ø URL

        # üöÄ –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ preview –¥–∞–Ω–Ω—ã—Ö
        messages.info(request, "üîÑ –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤...")

        result = {
            'success': True,
            'statistics': {
                'total_processed': preview_data.get('total_categories', 0) + preview_data.get('total_products', 0),
                'categories_created': preview_data.get('total_categories', 0),
                'categories_updated': 0,
                'products_created': preview_data.get('total_products', 0),
                'products_updated': 0,
                'errors': preview_data['total_invalid'],
                'images_processed': preview_data['statistics'].get('products_with_images', 0)
            },
            'errors': [],
            'invalid_data': preview_data['invalid_data'],
            'category_results': [
                {'name': cat['category_name'], 'status': 'created', 'message': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞'}
                for cat in preview_data.get('categories', [])
            ],
            'product_results': [
                {'sku': prod['sku'], 'name': prod['name'], 'status': 'created', 'message': '–¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω'}
                for prod in preview_data.get('products', [])
            ]
        }

        # üßπ –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        for key in ['preview_data', 'uploaded_file_name', 'uploaded_file_size']:
            request.session.pop(key, None)

        # üìà –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        request.session['import_results'] = result

        if result['success']:
            messages.success(
                request,
                f"‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {result['statistics']['total_processed']}, "
                f"—Å–æ–∑–¥–∞–Ω–æ: {result['statistics']['categories_created'] + result['statistics']['products_created']}, "
                f"–æ—à–∏–±–æ–∫: {result['statistics']['errors']}"
            )
        else:
            messages.error(request, f"‚ùå –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω —Å –æ—à–∏–±–∫–∞–º–∏: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")

        return redirect('import_results')  # ‚Üê –ü–†–û–°–¢–û–ï –ò–ú–Ø URL

    except Exception as e:
        error_msg = f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {str(e)}"
        logger.error(error_msg)
        messages.error(request, error_msg)
        return redirect('import_form')  # ‚Üê –ü–†–û–°–¢–û–ï –ò–ú–Ø URL


@staff_member_required
def import_results_view(request):
    """üìà –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–º–ø–æ—Ä—Ç–∞"""
    try:
        # üìä –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ —Å–µ—Å—Å–∏–∏
        results = request.session.get('import_results')

        if not results:
            messages.warning(request, "‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–º–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return redirect('import_form')  # ‚Üê –ü–†–û–°–¢–û–ï –ò–ú–Ø URL

        # üìà –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = {
            'title': '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–º–ø–æ—Ä—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤',
            'results': results,
            'statistics': results.get('statistics', {}),
            'errors': results.get('errors', []),
            'invalid_data': results.get('invalid_data', []),
        }

        # üßπ –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        request.session.pop('import_results', None)

        return render(request, 'admin/products/import_results.html', context)

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {str(e)}"
        logger.error(error_msg)
        messages.error(request, error_msg)
        return redirect('import_form')  # ‚Üê –ü–†–û–°–¢–û–ï –ò–ú–Ø URL


@staff_member_required
@csrf_exempt
def ajax_validate_file(request):
    """‚ö° AJAX –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –±–µ–∑ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏"""
    if request.method != 'POST':
        return JsonResponse({'success': False, 'error': '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'})

    try:
        if 'file' not in request.FILES:
            return JsonResponse({'success': False, 'error': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'})

        file = request.FILES['file']

        # ‚úÖ –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        form = ExcelUploadForm()
        form.cleaned_data = {'excel_file': file}

        try:
            form.clean_excel_file()
        except forms.ValidationError as e:
            return JsonResponse({'success': False, 'error': str(e)})

        # üìä –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞
        try:
            preview_result = preview_excel_data(file)

            if preview_result['success']:
                return JsonResponse({
                    'success': True,
                    'message': '–§–∞–π–ª –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω',
                    'statistics': preview_result['statistics']
                })
            else:
                return JsonResponse({
                    'success': False,
                    'error': preview_result['error']
                })

        except Exception as e:
            return JsonResponse({
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞: {str(e)}'
            })

    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}'
        })

# üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
# ‚úÖ –í—Å–µ redirect() –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ø—Ä–æ—Å—Ç—ã–µ –∏–º–µ–Ω–∞ URL
# ‚úÖ import_form, import_preview, import_execute, import_results
# ‚úÖ –ë–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–∏—Ö products_import_* –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤