# üìÅ products/export_utils.py
# üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel —Ñ–∞–π–ª–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
# üîÑ –û–±—Ä–∞—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –∫ import_utils.py

import logging
import openpyxl
from openpyxl.styles import Font, PatternFill, Alignment
from typing import List, Dict, Optional
from io import BytesIO
from django.db.models import Q

from .models import Category, Product

logger = logging.getLogger(__name__)

# üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫ Excel (–∫–∞–∫ –≤ –∏–º–ø–æ—Ä—Ç–µ)
EXCEL_HEADERS = [
    '–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä',  # A: –ö–∞—Ç–µ–≥–æ—Ä–∏—è (1.BMW) –∏–ª–∏ SKU —Ç–æ–≤–∞—Ä–∞ (10001)
    '–ù–∞–∑–≤–∞–Ω–∏–µ',  # B: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ —Ç–æ–≤–∞—Ä–∞
    'Title —Å—Ç—Ä–∞–Ω–∏—Ü—ã',  # C: SEO –∑–∞–≥–æ–ª–æ–≤–æ–∫
    '–¶–µ–Ω–∞',  # D: –¶–µ–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤)
    '–û–ø–∏—Å–∞–Ω–∏–µ',  # E: –û–ø–∏—Å–∞–Ω–∏–µ —Å HTML
    '–ú–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏–µ',  # F: SEO –æ–ø–∏—Å–∞–Ω–∏–µ
    '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'  # G: –ò–º—è —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
]


def generate_excel_export() -> BytesIO:
    """
    üöÄ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel —Ñ–∞–π–ª–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏

    –°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ, —á—Ç–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–º–ø–æ—Ä—Ç:
    - –ö–∞—Ç–µ–≥–æ—Ä–∏—è ‚Üí –≤—Å–µ –µ—ë —Ç–æ–≤–∞—Ä—ã ‚Üí —Å–ª–µ–¥—É—é—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è ‚Üí –µ—ë —Ç–æ–≤–∞—Ä—ã
    - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–ª—å–∫–æ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–±–µ–∑ –ø—É—Ç–µ–π)

    Returns:
        BytesIO: Excel —Ñ–∞–π–ª –≥–æ—Ç–æ–≤—ã–π –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    """
    try:
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é Excel —ç–∫—Å–ø–æ—Ä—Ç–∞")

        # üìä –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é Excel –∫–Ω–∏–≥—É
        workbook = openpyxl.Workbook()
        worksheet = workbook.active
        worksheet.title = "–¢–æ–≤–∞—Ä—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"

        # üé® –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏
        _setup_excel_styles(worksheet)

        # üìù –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        _add_headers(worksheet)

        # üìä –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        export_data = _collect_export_data()

        # ‚úçÔ∏è –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        row_number = _fill_excel_data(worksheet, export_data)

        # üìè –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        _auto_resize_columns(worksheet)

        # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
        excel_buffer = BytesIO()
        workbook.save(excel_buffer)
        excel_buffer.seek(0)

        logger.info(f"‚úÖ Excel —ç–∫—Å–ø–æ—Ä—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {row_number - 1} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö")
        return excel_buffer

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}", exc_info=True)
        raise


def _setup_excel_styles(worksheet):
    """üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π Excel"""
    # üìè –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    column_widths = {
        'A': 15,  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        'B': 30,  # –ù–∞–∑–≤–∞–Ω–∏–µ
        'C': 25,  # Title
        'D': 10,  # –¶–µ–Ω–∞
        'E': 40,  # –û–ø–∏—Å–∞–Ω–∏–µ
        'F': 30,  # –ú–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏–µ
        'G': 20  # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    }

    for col_letter, width in column_widths.items():
        worksheet.column_dimensions[col_letter].width = width


def _add_headers(worksheet):
    """üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ Excel"""
    # üé® –°—Ç–∏–ª—å –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    header_font = Font(bold=True, color="FFFFFF")
    header_fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
    header_alignment = Alignment(horizontal="center", vertical="center")

    # ‚úçÔ∏è –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    for col_num, header in enumerate(EXCEL_HEADERS, 1):
        cell = worksheet.cell(row=1, column=col_num, value=header)
        cell.font = header_font
        cell.fill = header_fill
        cell.alignment = header_alignment


def _collect_export_data() -> List[Dict]:
    """
    üìä –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏–∑ –ë–î

    –ü–æ—Ä—è–¥–æ–∫: –∫–∞—Ç–µ–≥–æ—Ä–∏—è ‚Üí –≤—Å–µ –µ—ë —Ç–æ–≤–∞—Ä—ã ‚Üí —Å–ª–µ–¥—É—é—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è

    Returns:
        List[Dict]: –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –¥–ª—è Excel
    """
    try:
        export_rows = []

        # üìÇ –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
        categories = Category.objects.filter(is_active=True).order_by('display_order', 'category_name')

        logger.info(f"üìÇ –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞: {categories.count()}")

        for category in categories:
            # üè∑Ô∏è –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category_row = _build_category_row(category)
            export_rows.append(category_row)

            # üõçÔ∏è –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            products = Product.objects.filter(category=category).order_by('product_name')

            logger.debug(f"üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏—è {category.category_name}: {products.count()} —Ç–æ–≤–∞—Ä–æ–≤")

            # üõçÔ∏è –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
            for product in products:
                product_row = _build_product_row(product)
                export_rows.append(product_row)

        logger.info(f"üìä –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞: {len(export_rows)}")
        return export_rows

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise


def _build_category_row(category: Category) -> Dict:
    """
    üìÇ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è Excel

    Args:
        category: –û–±—ä–µ–∫—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    Returns:
        Dict: –î–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    """
    try:
        # üî¢ –§–æ—Ä–º–∏—Ä—É–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (SKU.–ù–∞–∑–≤–∞–Ω–∏–µ)
        category_identifier = f"{category.category_sku}.{category.category_name}"

        # üñºÔ∏è –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–±–µ–∑ –ø—É—Ç–∏)
        image_name = ""
        if category.category_image:
            import os
            image_name = os.path.basename(category.category_image.name)

        # üìù –û—á–∏—â–∞–µ–º HTML –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è (–±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç)
        description = _clean_html_content(category.description)

        return {
            'identifier': category_identifier,
            'name': category.category_name,
            'title': category.page_title or category.category_name,
            'price': '',  # üí∞ –£ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç —Ü–µ–Ω—ã
            'description': description,
            'meta_description': category.meta_description or '',
            'image': image_name
        }

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category.category_name}: {e}")
        raise


def _build_product_row(product: Product) -> Dict:
    """
    üõçÔ∏è –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è Excel

    Args:
        product: –û–±—ä–µ–∫—Ç —Ç–æ–≤–∞—Ä–∞

    Returns:
        Dict: –î–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —Ç–æ–≤–∞—Ä–∞
    """
    try:
        # üî¢ SKU —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è
        product_sku = product.product_sku
        if not product_sku:
            # üÜï –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SKU –ø–æ —Ñ–æ—Ä–º—É–ª–µ category_sku * 10000 + 1
            category_sku = product.category.category_sku or 1
            product_sku = str(category_sku * 10000 + 1)
            logger.warning(f"‚ö†Ô∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω SKU –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product.product_name}: {product_sku}")

        # üñºÔ∏è –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞)
        image_name = ""
        main_image = product.get_main_image()
        if main_image and main_image.image:
            import os
            image_name = os.path.basename(main_image.image.name)

        # üìù –û—á–∏—â–∞–µ–º HTML –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
        description = _clean_html_content(product.product_desription)

        # üí∞ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ (–±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞)
        price = product.price or 0

        return {
            'identifier': str(product_sku),
            'name': product.product_name,
            'title': product.page_title or '',
            'price': price,
            'description': description,
            'meta_description': product.meta_description or '',
            'image': image_name
        }

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ —Ç–æ–≤–∞—Ä–∞ {product.product_name}: {e}")
        raise


def _clean_html_content(html_content: Optional[str]) -> str:
    """
    üßπ –û—á–∏—Å—Ç–∫–∞ HTML –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è Excel

    –£–¥–∞–ª—è–µ—Ç HTML —Ç–µ–≥–∏, –æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç

    Args:
        html_content: HTML –∫–æ–Ω—Ç–µ–Ω—Ç

    Returns:
        str: –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    if not html_content:
        return ""

    try:
        # üßπ –ü—Ä–æ—Å—Ç–∞—è –æ—á–∏—Å—Ç–∫–∞ HTML —Ç–µ–≥–æ–≤
        import re

        # –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏
        clean_text = re.sub(r'<[^>]+>', '', str(html_content))

        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
        clean_text = re.sub(r'\s+', ' ', clean_text).strip()

        # üìè –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è Excel (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤)
        if len(clean_text) > 1000:
            clean_text = clean_text[:997] + "..."

        return clean_text

    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ HTML: {e}")
        return str(html_content)[:100] if html_content else ""


def _fill_excel_data(worksheet, export_data: List[Dict]) -> int:
    """
    ‚úçÔ∏è –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ Excel –¥–∞–Ω–Ω—ã–º–∏

    Args:
        worksheet: –õ–∏—Å—Ç Excel
        export_data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏

    Returns:
        int: –ù–æ–º–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    """
    try:
        current_row = 2  # üìù –ù–∞—á–∏–Ω–∞–µ–º —Å–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏ (–ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)

        for row_data in export_data:
            # ‚úçÔ∏è –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–æ–ª–æ–Ω–∫–∏
            worksheet.cell(row=current_row, column=1, value=row_data['identifier'])
            worksheet.cell(row=current_row, column=2, value=row_data['name'])
            worksheet.cell(row=current_row, column=3, value=row_data['title'])
            worksheet.cell(row=current_row, column=4, value=row_data['price'])
            worksheet.cell(row=current_row, column=5, value=row_data['description'])
            worksheet.cell(row=current_row, column=6, value=row_data['meta_description'])
            worksheet.cell(row=current_row, column=7, value=row_data['image'])

            current_row += 1

        logger.info(f"‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö: {current_row - 2}")
        return current_row

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è Excel: {e}")
        raise


def _auto_resize_columns(worksheet):
    """üìè –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫"""
    try:
        # üìä –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–ª–æ–Ω–∫–∏
        optimal_widths = {
            'A': 18,  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä (1.BMW, 10001)
            'B': 35,  # –ù–∞–∑–≤–∞–Ω–∏–µ
            'C': 25,  # Title —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            'D': 12,  # –¶–µ–Ω–∞
            'E': 50,  # –û–ø–∏—Å–∞–Ω–∏–µ (—Å–∞–º–∞—è —à–∏—Ä–æ–∫–∞—è)
            'F': 35,  # –ú–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏–µ
            'G': 25  # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        }

        for col_letter, width in optimal_widths.items():
            worksheet.column_dimensions[col_letter].width = width

        logger.debug("üìè –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")

    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫: {e}")


def get_export_statistics() -> Dict:
    """
    üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UI)

    Returns:
        Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
    """
    try:
        # üìÇ –°—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        active_categories = Category.objects.filter(is_active=True).count()

        # üõçÔ∏è –°—á–∏—Ç–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
        products_in_active_categories = Product.objects.filter(
            category__is_active=True
        ).count()

        # üñºÔ∏è –°—á–∏—Ç–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å –≥–ª–∞–≤–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        products_with_images = Product.objects.filter(
            category__is_active=True,
            product_images__is_main=True
        ).count()

        # üìÇ –°—á–∏—Ç–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        categories_with_images = Category.objects.filter(
            is_active=True,
            category_image__isnull=False
        ).exclude(category_image='').count()

        return {
            'total_categories': active_categories,
            'total_products': products_in_active_categories,
            'products_with_images': products_with_images,
            'categories_with_images': categories_with_images,
            'estimated_rows': active_categories + products_in_active_categories,
        }

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {
            'total_categories': 0,
            'total_products': 0,
            'products_with_images': 0,
            'categories_with_images': 0,
            'estimated_rows': 0,
            'error': str(e)
        }

# üéØ –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –≠–¢–û–ì–û –§–ê–ô–õ–ê:
#
# ‚úÖ generate_excel_export() - –≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
# ‚úÖ _collect_export_data() - —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
# ‚úÖ _build_category_row() - —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
# ‚úÖ _build_product_row() - —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ç–æ–≤–∞—Ä–∞
# ‚úÖ _clean_html_content() - –æ—á–∏—Å—Ç–∫–∞ HTML –¥–ª—è Excel
# ‚úÖ get_export_statistics() - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è UI
#
# üîÑ –õ–û–ì–ò–ö–ê –≠–ö–°–ü–û–†–¢–ê:
# 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
# 2. –î–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: –∫–∞—Ç–µ–≥–æ—Ä–∏—è ‚Üí –≤—Å–µ –µ—ë —Ç–æ–≤–∞—Ä—ã
# 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SKU –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
# 4. –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
# 5. –û—á–∏—â–∞–µ–º HTML –æ—Ç —Ç–µ–≥–æ–≤
# 6. –°–æ–∑–¥–∞–µ–º Excel –∏ –æ—Ç–¥–∞–µ–º –∫–∞–∫ BytesIO