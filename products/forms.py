# üìÅ products/forms.py - –î–û–ü–û–õ–ù–ï–ù–ò–ï –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ñ–æ—Ä–º–∞–º
# üîß –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—ã –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö

from django import forms
from django.core.exceptions import ValidationError
from django.core.files.uploadedfile import UploadedFile
import os

# –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∏–º–ø–æ—Ä—Ç ReviewForm, –æ—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ
try:
    from .forms import ReviewForm
except ImportError:
    # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ forms.py –µ—â–µ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º ReviewForm
    from .models import ProductReview


    class ReviewForm(forms.ModelForm):
        class Meta:
            model = ProductReview
            fields = ['stars', 'content']
            widgets = {
                "stars": forms.NumberInput(attrs={"class": "form-control", "min": 1, "max": 5}),
                "content": forms.Textarea(
                    attrs={"class": "form-control", "rows": 4, "placeholder": "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –∑–¥–µ—Å—å..."}),
            }
            labels = {
                "stars": "–û—Ü–µ–Ω–∫–∞",
                "content": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
            }


class ProductImportForm(forms.Form):
    """
    üìä –§–æ—Ä–º–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ Excel —Ñ–∞–π–ª–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏

    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - –í–∞–ª–∏–¥–∞—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞
    - –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–º–ø–æ—Ä—Ç–∞
    """

    excel_file = forms.FileField(
        label="üìä Excel —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏",
        help_text="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: .xlsx, .xls. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB",
        widget=forms.FileInput(attrs={
            'class': 'form-control',
            'accept': '.xlsx,.xls',
            'style': 'margin-bottom: 10px;'
        })
    )

    update_existing = forms.BooleanField(
        label="üîÑ –û–±–Ω–æ–≤–ª—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã",
        help_text="–ï—Å–ª–∏ —Ç–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º SKU —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ –¥–∞–Ω–Ω—ã–µ",
        required=False,
        initial=True,
        widget=forms.CheckboxInput(attrs={
            'class': 'form-check-input'
        })
    )

    create_categories = forms.BooleanField(
        label="üìÇ –°–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
        help_text="–°–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ SKU",
        required=False,
        initial=True,
        widget=forms.CheckboxInput(attrs={
            'class': 'form-check-input'
        })
    )

    process_images = forms.BooleanField(
        label="üñºÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤",
        help_text="–ò—Å–∫–∞—Ç—å –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∏–º–µ–Ω–∞–º —Ñ–∞–π–ª–æ–≤",
        required=False,
        initial=True,
        widget=forms.CheckboxInput(attrs={
            'class': 'form-check-input'
        })
    )

    skip_errors = forms.BooleanField(
        label="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ —Å –æ—à–∏–±–∫–∞–º–∏",
        help_text="–ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∏–º–ø–æ—Ä—Ç –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –æ—à–∏–±–æ–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö",
        required=False,
        initial=True,
        widget=forms.CheckboxInput(attrs={
            'class': 'form-check-input'
        })
    )

    def clean_excel_file(self):
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""

        excel_file = self.cleaned_data.get('excel_file')

        if not excel_file:
            raise ValidationError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")

        # üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        file_extension = os.path.splitext(excel_file.name)[1].lower()
        allowed_extensions = ['.xlsx', '.xls']

        if file_extension not in allowed_extensions:
            raise ValidationError(
                f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {file_extension}. "
                f"–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ: {', '.join(allowed_extensions)}"
            )

        # üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 10MB)
        max_size = 10 * 1024 * 1024  # 10MB –≤ –±–∞–π—Ç–∞—Ö
        if excel_file.size > max_size:
            raise ValidationError(
                f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {excel_file.size / 1024 / 1024:.1f}MB. "
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {max_size / 1024 / 1024:.0f}MB"
            )

        # üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
        if excel_file.size == 0:
            raise ValidationError("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π")

        return excel_file

    def get_import_settings(self) -> dict:
        """‚öôÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–º–ø–æ—Ä—Ç–∞ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è"""

        return {
            'update_existing': self.cleaned_data.get('update_existing', True),
            'create_categories': self.cleaned_data.get('create_categories', True),
            'process_images': self.cleaned_data.get('process_images', True),
            'skip_errors': self.cleaned_data.get('skip_errors', True),
        }


class ImportPreviewForm(forms.Form):
    """
    üëÅÔ∏è –§–æ—Ä–º–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∞ –ø–æ—Å–ª–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º
    """

    confirm_import = forms.BooleanField(
        label="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö",
        help_text="–Ø –ø—Ä–æ–≤–µ—Ä–∏–ª –¥–∞–Ω–Ω—ã–µ –∏ –≥–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å –∏–º–ø–æ—Ä—Ç",
        required=True,
        widget=forms.CheckboxInput(attrs={
            'class': 'form-check-input'
        })
    )

    # üîí –°–∫—Ä—ã—Ç—ã–µ –ø–æ–ª—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–º–ø–æ—Ä—Ç–∞
    file_session_key = forms.CharField(
        widget=forms.HiddenInput(),
        required=True
    )

    import_settings = forms.CharField(
        widget=forms.HiddenInput(),
        required=False
    )

    def clean_confirm_import(self):
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""

        confirm = self.cleaned_data.get('confirm_import')

        if not confirm:
            raise ValidationError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–º–ø–æ—Ä—Ç –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")

        return confirm


class CategoryImportForm(forms.Form):
    """
    üìÇ –§–æ—Ä–º–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç —Ç–æ–≤–∞—Ä–æ–≤)

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    """

    excel_file = forms.FileField(
        label="üìÇ Excel —Ñ–∞–π–ª —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏",
        help_text="–§–æ—Ä–º–∞—Ç: SKU –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ | –ù–∞–∑–≤–∞–Ω–∏–µ | –û–ø–∏—Å–∞–Ω–∏–µ | –ê–∫—Ç–∏–≤–Ω–∞",
        widget=forms.FileInput(attrs={
            'class': 'form-control',
            'accept': '.xlsx,.xls'
        })
    )

    update_existing_categories = forms.BooleanField(
        label="üîÑ –û–±–Ω–æ–≤–ª—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
        help_text="–û–±–Ω–æ–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –µ—Å–ª–∏ –æ–Ω–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç",
        required=False,
        initial=True,
        widget=forms.CheckboxInput(attrs={
            'class': 'form-check-input'
        })
    )

    activate_new_categories = forms.BooleanField(
        label="‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
        help_text="–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ñ–ª–∞–≥ '–∞–∫—Ç–∏–≤–Ω–∞' –¥–ª—è –Ω–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
        required=False,
        initial=True,
        widget=forms.CheckboxInput(attrs={
            'class': 'form-check-input'
        })
    )

    def clean_excel_file(self):
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""

        excel_file = self.cleaned_data.get('excel_file')

        if not excel_file:
            raise ValidationError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏")

        # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–∫ –≤ ProductImportForm
        file_extension = os.path.splitext(excel_file.name)[1].lower()
        if file_extension not in ['.xlsx', '.xls']:
            raise ValidationError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {file_extension}")

        max_size = 5 * 1024 * 1024  # 5MB –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        if excel_file.size > max_size:
            raise ValidationError(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {excel_file.size / 1024 / 1024:.1f}MB")

        return excel_file


class ImportTemplateDownloadForm(forms.Form):
    """
    üì• –§–æ—Ä–º–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ Excel —Ñ–∞–π–ª–æ–≤

    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å–∫–∞—á–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
    """

    TEMPLATE_CHOICES = [
        ('products', 'üõçÔ∏è –®–∞–±–ª–æ–Ω –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤'),
        ('categories', 'üìÇ –®–∞–±–ª–æ–Ω –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π'),
        ('full', 'üóÇÔ∏è –ü–æ–ª–Ω—ã–π —à–∞–±–ª–æ–Ω (—Ç–æ–≤–∞—Ä—ã + –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)'),
    ]

    template_type = forms.ChoiceField(
        label="üìÑ –¢–∏–ø —à–∞–±–ª–æ–Ω–∞",
        choices=TEMPLATE_CHOICES,
        initial='products',
        widget=forms.Select(attrs={
            'class': 'form-control'
        })
    )

    include_examples = forms.BooleanField(
        label="üìù –í–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö",
        help_text="–î–æ–±–∞–≤–∏—Ç—å –≤ —à–∞–±–ª–æ–Ω –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è",
        required=False,
        initial=True,
        widget=forms.CheckboxInput(attrs={
            'class': 'form-check-input'
        })
    )


class BulkProductUpdateForm(forms.Form):
    """
    üîÑ –§–æ—Ä–º–∞ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤

    –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è —É –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
    """

    excel_file = forms.FileField(
        label="üìä Excel —Ñ–∞–π–ª —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏",
        help_text="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å SKU —Ç–æ–≤–∞—Ä–æ–≤ –∏ –ø–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
        widget=forms.FileInput(attrs={
            'class': 'form-control',
            'accept': '.xlsx,.xls'
        })
    )

    UPDATE_FIELD_CHOICES = [
        ('price', 'üí∞ –¢–æ–ª—å–∫–æ —Ü–µ–Ω—ã'),
        ('descriptions', 'üìù –¢–æ–ª—å–∫–æ –æ–ø–∏—Å–∞–Ω–∏—è'),
        ('seo', 'üîç –¢–æ–ª—å–∫–æ SEO –ø–æ–ª—è (title, meta)'),
        ('all', 'üîÑ –í—Å–µ –ø–æ–ª—è'),
    ]

    update_fields = forms.ChoiceField(
        label="üéØ –ö–∞–∫–∏–µ –ø–æ–ª—è –æ–±–Ω–æ–≤–ª—è—Ç—å",
        choices=UPDATE_FIELD_CHOICES,
        initial='price',
        widget=forms.Select(attrs={
            'class': 'form-control'
        })
    )

    dry_run = forms.BooleanField(
        label="üîç –†–µ–∂–∏–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞",
        help_text="–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–æ, –Ω–æ –Ω–µ –ø—Ä–∏–º–µ–Ω—è—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è",
        required=False,
        initial=False,
        widget=forms.CheckboxInput(attrs={
            'class': 'form-check-input'
        })
    )

    def clean_excel_file(self):
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""

        excel_file = self.cleaned_data.get('excel_file')

        if not excel_file:
            raise ValidationError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏")

        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è Excel —Ñ–∞–π–ª–∞
        file_extension = os.path.splitext(excel_file.name)[1].lower()
        if file_extension not in ['.xlsx', '.xls']:
            raise ValidationError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {file_extension}")

        return excel_file


# üé® –ö–∞—Å—Ç–æ–º–Ω—ã–µ –≤–∏–¥–∂–µ—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è UI

class FileUploadWidget(forms.FileInput):
    """üìÅ –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–∏–¥–∂–µ—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤"""

    template_name = 'admin/widgets/file_upload.html'

    def __init__(self, attrs=None):
        default_attrs = {
            'class': 'form-control',
            'style': 'margin-bottom: 10px;'
        }
        if attrs:
            default_attrs.update(attrs)
        super().__init__(default_attrs)


class ImportSettingsWidget(forms.Widget):
    """‚öôÔ∏è –í–∏–¥–∂–µ—Ç –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–º–ø–æ—Ä—Ç–∞"""

    template_name = 'admin/widgets/import_settings.html'

    def format_value(self, value):
        if value is None:
            return {}
        return value

# üîß –ü–†–ò–ú–ï–ù–ï–ù–ò–ï:
# –≠—Ç–∏ —Ñ–æ—Ä–º—ã –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ admin_views.py –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏–º–ø–æ—Ä—Ç–∞
# –§–æ—Ä–º—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∏ —É–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π