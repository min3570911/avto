# üìÅ products/forms.py - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å —Ñ–æ—Ä–º–æ–π –∑–≤–µ–∑–¥–æ—á–µ–∫
# ‚≠ê –î–û–ë–ê–í–õ–ï–ù–û: –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Ñ–æ—Ä–º–∞ –æ—Ç–∑—ã–≤–æ–≤ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏
# üîí –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–æ–≤ (is_approved=False –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)

from django import forms
from django.core.exceptions import ValidationError
from django.core.files.uploadedfile import UploadedFile
import os
import zipfile

# üìù –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤
from common.models import ProductReview


class StarRatingWidget(forms.Widget):
    """‚≠ê –ö–∞—Å—Ç–æ–º–Ω—ã–π –≤–∏–¥–∂–µ—Ç –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏"""

    template_name = 'widgets/star_rating.html'

    def __init__(self, attrs=None):
        default_attrs = {
            'class': 'star-rating-input',
            'data-max-rating': '5',
        }
        if attrs:
            default_attrs.update(attrs)
        super().__init__(default_attrs)

    def format_value(self, value):
        """üî¢ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if value is None:
            return '0'
        return str(value)

    def render(self, name, value, attrs=None, renderer=None):
        """üé® –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ HTML –¥–ª—è –∑–≤–µ–∑–¥–æ—á–µ–∫"""
        if value is None:
            value = 0
        else:
            value = int(value)

        if attrs is None:
            attrs = {}

        attrs.update(self.attrs)

        # üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –¥–ª—è –∑–≤–µ–∑–¥–æ—á–µ–∫
        html = f'<div class="star-rating-widget" data-field-name="{name}">'
        html += f'<input type="hidden" name="{name}" value="{value}" id="id_{name}">'

        for i in range(1, 6):  # 5 –∑–≤–µ–∑–¥–æ—á–µ–∫
            active_class = 'active' if i <= value else ''
            html += f'''<span class="star {active_class}" data-value="{i}" title="{i} –∑–≤–µ–∑–¥{'—ã' if i in [2, 3, 4] else ('–∞' if i == 1 else '')}">
                        <i class="fas fa-star"></i>
                    </span>'''

        html += '</div>'

        return html

    def value_from_datadict(self, data, files, name):
        """üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ POST –¥–∞–Ω–Ω—ã—Ö"""
        value = data.get(name, '0')
        try:
            return int(value)
        except (ValueError, TypeError):
            return 0


class ReviewForm(forms.ModelForm):
    """üìù –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø —Ñ–æ—Ä–º–∞ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏"""

    class Meta:
        model = ProductReview
        fields = ['stars', 'content']
        widgets = {
            "stars": StarRatingWidget(attrs={
                "class": "star-rating-input",
                "data-required": "true"
            }),
            "content": forms.Textarea(
                attrs={
                    "class": "form-control review-content-textarea",
                    "rows": 4,
                    "placeholder": "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –º–Ω–µ–Ω–∏–µ–º –æ —Ç–æ–≤–∞—Ä–µ...",
                    "maxlength": "1000"
                }
            ),
        }
        labels = {
            "stars": "–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞",
            "content": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
        }

    def __init__(self, *args, **kwargs):
        """üèóÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã"""
        super().__init__(*args, **kwargs)

        # üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª–µ–π
        self.fields['stars'].required = True
        self.fields['content'].required = True

        # üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.fields['stars'].help_text = "–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∑–≤–µ–∑–¥–æ—á–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ü–µ–Ω–∫–∏"
        self.fields['content'].help_text = "–ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤, –º–∞–∫—Å–∏–º—É–º 1000"

    def clean_stars(self):
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ü–µ–Ω–∫–∏"""
        stars = self.cleaned_data.get('stars')

        if not stars or stars < 1:
            raise ValidationError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥")

        if stars > 5:
            raise ValidationError("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ - 5 –∑–≤–µ–∑–¥")

        return stars

    def clean_content(self):
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
        content = self.cleaned_data.get('content', '').strip()

        if not content:
            raise ValidationError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—Ç–∑—ã–≤—É")

        if len(content) < 10:
            raise ValidationError("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤")

        if len(content) > 1000:
            raise ValidationError("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤")

        # üö´ –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
        spam_words = ['—Å–ø–∞–º', '—Ä–µ–∫–ª–∞–º–∞', '–∫—É–ø–∏—Ç—å –¥–µ—à–µ–≤–æ', '—Å–∫–∏–¥–∫–∞ 90%']
        content_lower = content.lower()

        for spam_word in spam_words:
            if spam_word in content_lower:
                raise ValidationError("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç")

        return content

    def save(self, commit=True):
        """üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π"""
        instance = super().save(commit=False)

        # üîí –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ù–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã —Ç—Ä–µ–±—É—é—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        if not instance.pk:  # –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤
            instance.is_approved = False

        if commit:
            instance.save()
        return instance


# ============== –û–°–¢–ê–õ–¨–ù–´–ï –§–û–†–ú–´ (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô) ==============

class ProductImportForm(forms.Form):
    """üìä –ï–î–ò–ù–ê–Ø –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø —Ñ–æ—Ä–º–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤"""

    excel_file = forms.FileField(
        label="üìä Excel —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏",
        help_text="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: .xlsx, .xls. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB",
        widget=forms.FileInput(attrs={
            'class': 'form-control',
            'accept': '.xlsx,.xls',
            'style': 'margin-bottom: 10px;'
        })
    )

    images_zip = forms.FileField(
        label="üñºÔ∏è ZIP –∞—Ä—Ö–∏–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏",
        help_text="–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: .zip. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB",
        required=False,
        widget=forms.FileInput(attrs={
            'class': 'form-control',
            'accept': '.zip',
            'style': 'margin-bottom: 10px;'
        })
    )

    update_existing = forms.BooleanField(
        label="üîÑ –û–±–Ω–æ–≤–ª—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã",
        help_text="–ï—Å–ª–∏ —Ç–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º SKU —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ –¥–∞–Ω–Ω—ã–µ",
        required=False,
        initial=True,
        widget=forms.CheckboxInput(attrs={
            'class': 'form-check-input'
        })
    )

    create_categories = forms.BooleanField(
        label="üìÇ –°–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
        help_text="–°–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ SKU",
        required=False,
        initial=True,
        widget=forms.CheckboxInput(attrs={
            'class': 'form-check-input'
        })
    )

    process_images = forms.BooleanField(
        label="üñºÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤",
        help_text="–ò—Å–∫–∞—Ç—å –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∏–º–µ–Ω–∞–º —Ñ–∞–π–ª–æ–≤",
        required=False,
        initial=True,
        widget=forms.CheckboxInput(attrs={
            'class': 'form-check-input'
        })
    )

    skip_errors = forms.BooleanField(
        label="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ —Å –æ—à–∏–±–∫–∞–º–∏",
        help_text="–ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∏–º–ø–æ—Ä—Ç –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –æ—à–∏–±–æ–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö",
        required=False,
        initial=True,
        widget=forms.CheckboxInput(attrs={
            'class': 'form-check-input'
        })
    )

    def clean_excel_file(self):
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ Excel —Ñ–∞–π–ª–∞"""
        excel_file = self.cleaned_data.get('excel_file')

        if not excel_file:
            raise ValidationError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")

        file_extension = os.path.splitext(excel_file.name)[1].lower()
        allowed_extensions = ['.xlsx', '.xls']

        if file_extension not in allowed_extensions:
            raise ValidationError(
                f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {file_extension}. "
                f"–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ: {', '.join(allowed_extensions)}"
            )

        max_size = 10 * 1024 * 1024  # 10MB –≤ –±–∞–π—Ç–∞—Ö
        if excel_file.size > max_size:
            raise ValidationError(
                f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {excel_file.size / 1024 / 1024:.1f}MB. "
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {max_size / 1024 / 1024:.0f}MB"
            )

        if excel_file.size == 0:
            raise ValidationError("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π")

        return excel_file

    def clean_images_zip(self):
        """üñºÔ∏è –í–∞–ª–∏–¥–∞—Ü–∏—è ZIP –∞—Ä—Ö–∏–≤–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏"""
        images_zip = self.cleaned_data.get('images_zip')

        if not images_zip:
            return images_zip

        file_extension = os.path.splitext(images_zip.name)[1].lower()
        if file_extension != '.zip':
            raise ValidationError(
                f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—Ä—Ö–∏–≤–∞: {file_extension}. "
                f"–†–∞–∑—Ä–µ—à–µ–Ω —Ç–æ–ª—å–∫–æ: .zip"
            )

        max_size = 10 * 1024 * 1024  # 10MB –≤ –±–∞–π—Ç–∞—Ö
        if images_zip.size > max_size:
            raise ValidationError(
                f"–ê—Ä—Ö–∏–≤ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {images_zip.size / 1024 / 1024:.1f}MB. "
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {max_size / 1024 / 1024:.0f}MB"
            )

        if images_zip.size == 0:
            raise ValidationError("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤ –ø—É—Å—Ç–æ–π")

        images_zip.seek(0)
        return images_zip

    def get_import_settings(self) -> dict:
        """‚öôÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–º–ø–æ—Ä—Ç–∞ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è"""
        return {
            'update_existing': self.cleaned_data.get('update_existing', True),
            'create_categories': self.cleaned_data.get('create_categories', True),
            'process_images': self.cleaned_data.get('process_images', True),
            'skip_errors': self.cleaned_data.get('skip_errors', True),
        }


class ImportPreviewForm(forms.Form):
    """üëÅÔ∏è –§–æ—Ä–º–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∞ –ø–æ—Å–ª–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""

    confirm_import = forms.BooleanField(
        label="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö",
        help_text="–Ø –ø—Ä–æ–≤–µ—Ä–∏–ª –¥–∞–Ω–Ω—ã–µ –∏ –≥–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å –∏–º–ø–æ—Ä—Ç",
        required=True,
        widget=forms.CheckboxInput(attrs={
            'class': 'form-check-input'
        })
    )

    file_session_key = forms.CharField(
        widget=forms.HiddenInput(),
        required=True
    )

    import_settings = forms.CharField(
        widget=forms.HiddenInput(),
        required=False
    )

    def clean_confirm_import(self):
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        confirm = self.cleaned_data.get('confirm_import')

        if not confirm:
            raise ValidationError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–º–ø–æ—Ä—Ç –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")

        return confirm


class CategoryImportForm(forms.Form):
    """üìÇ –§–æ—Ä–º–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""

    excel_file = forms.FileField(
        label="üìÇ Excel —Ñ–∞–π–ª —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏",
        help_text="–§–æ—Ä–º–∞—Ç: SKU –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ | –ù–∞–∑–≤–∞–Ω–∏–µ | –û–ø–∏—Å–∞–Ω–∏–µ | –ê–∫—Ç–∏–≤–Ω–∞",
        widget=forms.FileInput(attrs={
            'class': 'form-control',
            'accept': '.xlsx,.xls'
        })
    )

    update_existing_categories = forms.BooleanField(
        label="üîÑ –û–±–Ω–æ–≤–ª—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
        help_text="–û–±–Ω–æ–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –µ—Å–ª–∏ –æ–Ω–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç",
        required=False,
        initial=True,
        widget=forms.CheckboxInput(attrs={
            'class': 'form-check-input'
        })
    )

    activate_new_categories = forms.BooleanField(
        label="‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
        help_text="–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ñ–ª–∞–≥ '–∞–∫—Ç–∏–≤–Ω–∞' –¥–ª—è –Ω–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
        required=False,
        initial=True,
        widget=forms.CheckboxInput(attrs={
            'class': 'form-check-input'
        })
    )

    def clean_excel_file(self):
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        excel_file = self.cleaned_data.get('excel_file')

        if not excel_file:
            raise ValidationError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏")

        file_extension = os.path.splitext(excel_file.name)[1].lower()
        if file_extension not in ['.xlsx', '.xls']:
            raise ValidationError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {file_extension}")

        max_size = 5 * 1024 * 1024  # 5MB –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        if excel_file.size > max_size:
            raise ValidationError(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {excel_file.size / 1024 / 1024:.1f}MB")

        return excel_file


class ImportTemplateDownloadForm(forms.Form):
    """üì• –§–æ—Ä–º–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ Excel —Ñ–∞–π–ª–æ–≤"""

    TEMPLATE_CHOICES = [
        ('products', 'üõçÔ∏è –®–∞–±–ª–æ–Ω –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤'),
        ('categories', 'üìÇ –®–∞–±–ª–æ–Ω –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π'),
        ('full', 'üóÇÔ∏è –ü–æ–ª–Ω—ã–π —à–∞–±–ª–æ–Ω (—Ç–æ–≤–∞—Ä—ã + –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)'),
    ]

    template_type = forms.ChoiceField(
        label="üìÑ –¢–∏–ø —à–∞–±–ª–æ–Ω–∞",
        choices=TEMPLATE_CHOICES,
        initial='products',
        widget=forms.Select(attrs={
            'class': 'form-control'
        })
    )

    include_examples = forms.BooleanField(
        label="üìù –í–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö",
        help_text="–î–æ–±–∞–≤–∏—Ç—å –≤ —à–∞–±–ª–æ–Ω –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è",
        required=False,
        initial=True,
        widget=forms.CheckboxInput(attrs={
            'class': 'form-check-input'
        })
    )


class BulkProductUpdateForm(forms.Form):
    """üîÑ –§–æ—Ä–º–∞ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤"""

    excel_file = forms.FileField(
        label="üìä Excel —Ñ–∞–π–ª —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏",
        help_text="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å SKU —Ç–æ–≤–∞—Ä–æ–≤ –∏ –ø–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
        widget=forms.FileInput(attrs={
            'class': 'form-control',
            'accept': '.xlsx,.xls'
        })
    )

    UPDATE_FIELD_CHOICES = [
        ('price', 'üí∞ –¢–æ–ª—å–∫–æ —Ü–µ–Ω—ã'),
        ('descriptions', 'üìù –¢–æ–ª—å–∫–æ –æ–ø–∏—Å–∞–Ω–∏—è'),
        ('seo', 'üîç –¢–æ–ª—å–∫–æ SEO –ø–æ–ª—è (title, meta)'),
        ('all', 'üîÑ –í—Å–µ –ø–æ–ª—è'),
    ]

    update_fields = forms.ChoiceField(
        label="üéØ –ö–∞–∫–∏–µ –ø–æ–ª—è –æ–±–Ω–æ–≤–ª—è—Ç—å",
        choices=UPDATE_FIELD_CHOICES,
        initial='price',
        widget=forms.Select(attrs={
            'class': 'form-control'
        })
    )

    dry_run = forms.BooleanField(
        label="üîç –†–µ–∂–∏–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞",
        help_text="–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–æ, –Ω–æ –Ω–µ –ø—Ä–∏–º–µ–Ω—è—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è",
        required=False,
        initial=False,
        widget=forms.CheckboxInput(attrs={
            'class': 'form-check-input'
        })
    )

    def clean_excel_file(self):
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        excel_file = self.cleaned_data.get('excel_file')

        if not excel_file:
            raise ValidationError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏")

        file_extension = os.path.splitext(excel_file.name)[1].lower()
        if file_extension not in ['.xlsx', '.xls']:
            raise ValidationError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {file_extension}")

        return excel_file

# üîß –û–°–ù–û–í–ù–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø –í –≠–¢–û–ú –§–ê–ô–õ–ï:
#
# ‚≠ê –î–û–ë–ê–í–õ–ï–ù–û: StarRatingWidget - –∫–∞—Å—Ç–æ–º–Ω—ã–π –≤–∏–¥–∂–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–µ–∑–¥–æ—á–µ–∫
# üîí –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –≤ ReviewForm.save()
# ‚úÖ –£–õ–£–ß–®–ï–ù–û: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –æ—Ç–∑—ã–≤–æ–≤ (–∞–Ω—Ç–∏-—Å–ø–∞–º, –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞)
# üé® –î–û–ë–ê–í–õ–ï–ù–û: CSS –∫–ª–∞—Å—Å—ã –∏ –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
# üìù –°–û–•–†–ê–ù–ï–ù–û: –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º—ã –∏–º–ø–æ—Ä—Ç–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
#
# üéØ –†–ï–ó–£–õ–¨–¢–ê–¢:
# - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–∏ –≤–º–µ—Å—Ç–æ —á–∏—Å–ª–æ–≤–æ–≥–æ –ø–æ–ª—è
# - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
# - –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞
# - –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ CSS/JS