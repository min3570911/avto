# üìÅ products/forms.py - –û–ß–ò–©–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å –µ–¥–∏–Ω–æ–π —Ñ–æ—Ä–º–æ–π –∏–º–ø–æ—Ä—Ç–∞
# üîß –£–ë–†–ê–ù–û: –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ ExcelUploadForm –∏ ProductImportForm
# ‚úÖ –û–°–¢–ê–í–õ–ï–ù–û: –û–¥–Ω–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞ + —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–æ—Ä–º—ã –æ—Ç–∑—ã–≤–æ–≤

from django import forms
from django.core.exceptions import ValidationError
from django.core.files.uploadedfile import UploadedFile
import os
import zipfile

# üìù –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤
from common.models import ProductReview


class ReviewForm(forms.ModelForm):
    """üìù –§–æ—Ä–º–∞ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤ –æ —Ç–æ–≤–∞—Ä–∞—Ö"""

    class Meta:
        model = ProductReview
        fields = ['stars', 'content']
        widgets = {
            "stars": forms.NumberInput(attrs={"class": "form-control", "min": 1, "max": 5}),
            "content": forms.Textarea(
                attrs={"class": "form-control", "rows": 4, "placeholder": "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –∑–¥–µ—Å—å..."}
            ),
        }
        labels = {
            "stars": "–û—Ü–µ–Ω–∫–∞",
            "content": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
        }


class ProductImportForm(forms.Form):
    """
    üìä –ï–î–ò–ù–ê–Ø –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø —Ñ–æ—Ä–º–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤

    –ó–∞–º–µ–Ω—è–µ—Ç –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ñ–æ—Ä–º—ã –∏–º–ø–æ—Ä—Ç–∞:
    - ExcelUploadForm ‚ùå
    - ProductImportForm (—Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è) ‚ùå
    - UnifiedImportForm ‚ùå

    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - Excel —Ñ–∞–π–ª—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    - ZIP –∞—Ä—Ö–∏–≤—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–º–ø–æ—Ä—Ç–∞
    """

    excel_file = forms.FileField(
        label="üìä Excel —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏",
        help_text="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: .xlsx, .xls. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB",
        widget=forms.FileInput(attrs={
            'class': 'form-control',
            'accept': '.xlsx,.xls',
            'style': 'margin-bottom: 10px;'
        })
    )

    images_zip = forms.FileField(
        label="üñºÔ∏è ZIP –∞—Ä—Ö–∏–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏",
        help_text="–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: .zip. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB",
        required=False,
        widget=forms.FileInput(attrs={
            'class': 'form-control',
            'accept': '.zip',
            'style': 'margin-bottom: 10px;'
        })
    )

    # ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–º–ø–æ—Ä—Ç–∞
    update_existing = forms.BooleanField(
        label="üîÑ –û–±–Ω–æ–≤–ª—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã",
        help_text="–ï—Å–ª–∏ —Ç–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º SKU —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ –¥–∞–Ω–Ω—ã–µ",
        required=False,
        initial=True,
        widget=forms.CheckboxInput(attrs={
            'class': 'form-check-input'
        })
    )

    create_categories = forms.BooleanField(
        label="üìÇ –°–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
        help_text="–°–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ SKU",
        required=False,
        initial=True,
        widget=forms.CheckboxInput(attrs={
            'class': 'form-check-input'
        })
    )

    process_images = forms.BooleanField(
        label="üñºÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤",
        help_text="–ò—Å–∫–∞—Ç—å –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∏–º–µ–Ω–∞–º —Ñ–∞–π–ª–æ–≤",
        required=False,
        initial=True,
        widget=forms.CheckboxInput(attrs={
            'class': 'form-check-input'
        })
    )

    skip_errors = forms.BooleanField(
        label="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ —Å –æ—à–∏–±–∫–∞–º–∏",
        help_text="–ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∏–º–ø–æ—Ä—Ç –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –æ—à–∏–±–æ–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö",
        required=False,
        initial=True,
        widget=forms.CheckboxInput(attrs={
            'class': 'form-check-input'
        })
    )

    def clean_excel_file(self):
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ Excel —Ñ–∞–π–ª–∞"""
        excel_file = self.cleaned_data.get('excel_file')

        if not excel_file:
            raise ValidationError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")

        # üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        file_extension = os.path.splitext(excel_file.name)[1].lower()
        allowed_extensions = ['.xlsx', '.xls']

        if file_extension not in allowed_extensions:
            raise ValidationError(
                f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {file_extension}. "
                f"–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ: {', '.join(allowed_extensions)}"
            )

        # üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 10MB)
        max_size = 10 * 1024 * 1024  # 10MB –≤ –±–∞–π—Ç–∞—Ö
        if excel_file.size > max_size:
            raise ValidationError(
                f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {excel_file.size / 1024 / 1024:.1f}MB. "
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {max_size / 1024 / 1024:.0f}MB"
            )

        # üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
        if excel_file.size == 0:
            raise ValidationError("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π")

        return excel_file

    def clean_images_zip(self):
        """üñºÔ∏è –í–∞–ª–∏–¥–∞—Ü–∏—è ZIP –∞—Ä—Ö–∏–≤–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏"""
        images_zip = self.cleaned_data.get('images_zip')

        # üéØ –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ (–ø–æ–ª–µ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ)
        if not images_zip:
            return images_zip

        # üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        file_extension = os.path.splitext(images_zip.name)[1].lower()
        if file_extension != '.zip':
            raise ValidationError(
                f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—Ä—Ö–∏–≤–∞: {file_extension}. "
                f"–†–∞–∑—Ä–µ—à–µ–Ω —Ç–æ–ª—å–∫–æ: .zip"
            )

        # üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 10MB)
        max_size = 10 * 1024 * 1024  # 10MB –≤ –±–∞–π—Ç–∞—Ö
        if images_zip.size > max_size:
            raise ValidationError(
                f"–ê—Ä—Ö–∏–≤ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {images_zip.size / 1024 / 1024:.1f}MB. "
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {max_size / 1024 / 1024:.0f}MB"
            )

        # üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
        if images_zip.size == 0:
            raise ValidationError("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤ –ø—É—Å—Ç–æ–π")

        # üóúÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ ZIP –∞—Ä—Ö–∏–≤
        try:
            with zipfile.ZipFile(images_zip, 'r') as zip_file:
                # üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–∞–π–ª–æ–≤ –≤ –∞—Ä—Ö–∏–≤–µ
                file_list = zip_file.namelist()
                max_files = 100

                if len(file_list) > max_files:
                    raise ValidationError(
                        f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ñ–∞–π–ª–æ–≤ –≤ –∞—Ä—Ö–∏–≤–µ: {len(file_list)}. "
                        f"–ú–∞–∫—Å–∏–º—É–º: {max_files} —Ñ–∞–π–ª–æ–≤"
                    )

                # üñºÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                allowed_image_extensions = ['.jpg', '.jpeg', '.png', '.webp']
                invalid_files = []

                for filename in file_list:
                    # üö´ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏
                    if filename.startswith('__MACOSX') or filename.endswith('/'):
                        continue

                    file_ext = os.path.splitext(filename)[1].lower()
                    if file_ext and file_ext not in allowed_image_extensions:
                        invalid_files.append(filename)

                # ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–∞–π–ª–∞—Ö (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç)
                if invalid_files:
                    files_sample = invalid_files[:3]
                    if len(invalid_files) > 3:
                        files_sample.append(f"... –∏ –µ—â–µ {len(invalid_files) - 3}")

                    # üîÑ –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º
                    import logging
                    logger = logging.getLogger(__name__)
                    logger.warning(
                        f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤: {', '.join(files_sample)}. "
                        f"–û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã."
                    )

        except zipfile.BadZipFile:
            raise ValidationError("–§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è ZIP –∞—Ä—Ö–∏–≤–æ–º")
        except Exception as e:
            raise ValidationError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞—Ä—Ö–∏–≤–∞: {str(e)}")

        # üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–π–ª –≤ –Ω–∞—á–∞–ª–æ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        images_zip.seek(0)
        return images_zip

    def get_import_settings(self) -> dict:
        """‚öôÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–º–ø–æ—Ä—Ç–∞ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è"""
        return {
            'update_existing': self.cleaned_data.get('update_existing', True),
            'create_categories': self.cleaned_data.get('create_categories', True),
            'process_images': self.cleaned_data.get('process_images', True),
            'skip_errors': self.cleaned_data.get('skip_errors', True),
        }


class ImportPreviewForm(forms.Form):
    """üëÅÔ∏è –§–æ—Ä–º–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∞ –ø–æ—Å–ª–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""

    confirm_import = forms.BooleanField(
        label="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö",
        help_text="–Ø –ø—Ä–æ–≤–µ—Ä–∏–ª –¥–∞–Ω–Ω—ã–µ –∏ –≥–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å –∏–º–ø–æ—Ä—Ç",
        required=True,
        widget=forms.CheckboxInput(attrs={
            'class': 'form-check-input'
        })
    )

    # üîí –°–∫—Ä—ã—Ç—ã–µ –ø–æ–ª—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–º–ø–æ—Ä—Ç–∞
    file_session_key = forms.CharField(
        widget=forms.HiddenInput(),
        required=True
    )

    import_settings = forms.CharField(
        widget=forms.HiddenInput(),
        required=False
    )

    def clean_confirm_import(self):
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        confirm = self.cleaned_data.get('confirm_import')

        if not confirm:
            raise ValidationError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–º–ø–æ—Ä—Ç –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")

        return confirm


class CategoryImportForm(forms.Form):
    """üìÇ –§–æ—Ä–º–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""

    excel_file = forms.FileField(
        label="üìÇ Excel —Ñ–∞–π–ª —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏",
        help_text="–§–æ—Ä–º–∞—Ç: SKU –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ | –ù–∞–∑–≤–∞–Ω–∏–µ | –û–ø–∏—Å–∞–Ω–∏–µ | –ê–∫—Ç–∏–≤–Ω–∞",
        widget=forms.FileInput(attrs={
            'class': 'form-control',
            'accept': '.xlsx,.xls'
        })
    )

    update_existing_categories = forms.BooleanField(
        label="üîÑ –û–±–Ω–æ–≤–ª—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
        help_text="–û–±–Ω–æ–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –µ—Å–ª–∏ –æ–Ω–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç",
        required=False,
        initial=True,
        widget=forms.CheckboxInput(attrs={
            'class': 'form-check-input'
        })
    )

    activate_new_categories = forms.BooleanField(
        label="‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
        help_text="–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ñ–ª–∞–≥ '–∞–∫—Ç–∏–≤–Ω–∞' –¥–ª—è –Ω–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
        required=False,
        initial=True,
        widget=forms.CheckboxInput(attrs={
            'class': 'form-check-input'
        })
    )

    def clean_excel_file(self):
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        excel_file = self.cleaned_data.get('excel_file')

        if not excel_file:
            raise ValidationError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏")

        # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–∫ –≤ ProductImportForm
        file_extension = os.path.splitext(excel_file.name)[1].lower()
        if file_extension not in ['.xlsx', '.xls']:
            raise ValidationError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {file_extension}")

        max_size = 5 * 1024 * 1024  # 5MB –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        if excel_file.size > max_size:
            raise ValidationError(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {excel_file.size / 1024 / 1024:.1f}MB")

        return excel_file


class ImportTemplateDownloadForm(forms.Form):
    """üì• –§–æ—Ä–º–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ Excel —Ñ–∞–π–ª–æ–≤"""

    TEMPLATE_CHOICES = [
        ('products', 'üõçÔ∏è –®–∞–±–ª–æ–Ω –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤'),
        ('categories', 'üìÇ –®–∞–±–ª–æ–Ω –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π'),
        ('full', 'üóÇÔ∏è –ü–æ–ª–Ω—ã–π —à–∞–±–ª–æ–Ω (—Ç–æ–≤–∞—Ä—ã + –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)'),
    ]

    template_type = forms.ChoiceField(
        label="üìÑ –¢–∏–ø —à–∞–±–ª–æ–Ω–∞",
        choices=TEMPLATE_CHOICES,
        initial='products',
        widget=forms.Select(attrs={
            'class': 'form-control'
        })
    )

    include_examples = forms.BooleanField(
        label="üìù –í–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö",
        help_text="–î–æ–±–∞–≤–∏—Ç—å –≤ —à–∞–±–ª–æ–Ω –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è",
        required=False,
        initial=True,
        widget=forms.CheckboxInput(attrs={
            'class': 'form-check-input'
        })
    )


class BulkProductUpdateForm(forms.Form):
    """üîÑ –§–æ—Ä–º–∞ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤"""

    excel_file = forms.FileField(
        label="üìä Excel —Ñ–∞–π–ª —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏",
        help_text="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å SKU —Ç–æ–≤–∞—Ä–æ–≤ –∏ –ø–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
        widget=forms.FileInput(attrs={
            'class': 'form-control',
            'accept': '.xlsx,.xls'
        })
    )

    UPDATE_FIELD_CHOICES = [
        ('price', 'üí∞ –¢–æ–ª—å–∫–æ —Ü–µ–Ω—ã'),
        ('descriptions', 'üìù –¢–æ–ª—å–∫–æ –æ–ø–∏—Å–∞–Ω–∏—è'),
        ('seo', 'üîç –¢–æ–ª—å–∫–æ SEO –ø–æ–ª—è (title, meta)'),
        ('all', 'üîÑ –í—Å–µ –ø–æ–ª—è'),
    ]

    update_fields = forms.ChoiceField(
        label="üéØ –ö–∞–∫–∏–µ –ø–æ–ª—è –æ–±–Ω–æ–≤–ª—è—Ç—å",
        choices=UPDATE_FIELD_CHOICES,
        initial='price',
        widget=forms.Select(attrs={
            'class': 'form-control'
        })
    )

    dry_run = forms.BooleanField(
        label="üîç –†–µ–∂–∏–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞",
        help_text="–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–æ, –Ω–æ –Ω–µ –ø—Ä–∏–º–µ–Ω—è—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è",
        required=False,
        initial=False,
        widget=forms.CheckboxInput(attrs={
            'class': 'form-check-input'
        })
    )

    def clean_excel_file(self):
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        excel_file = self.cleaned_data.get('excel_file')

        if not excel_file:
            raise ValidationError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏")

        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è Excel —Ñ–∞–π–ª–∞
        file_extension = os.path.splitext(excel_file.name)[1].lower()
        if file_extension not in ['.xlsx', '.xls']:
            raise ValidationError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {file_extension}")

        return excel_file


# üé® –ö–∞—Å—Ç–æ–º–Ω—ã–µ –≤–∏–¥–∂–µ—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è UI

class FileUploadWidget(forms.FileInput):
    """üìÅ –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–∏–¥–∂–µ—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤"""

    template_name = 'admin/widgets/file_upload.html'

    def __init__(self, attrs=None):
        default_attrs = {
            'class': 'form-control',
            'style': 'margin-bottom: 10px;'
        }
        if attrs:
            default_attrs.update(attrs)
        super().__init__(default_attrs)


class ImportSettingsWidget(forms.Widget):
    """‚öôÔ∏è –í–∏–¥–∂–µ—Ç –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–º–ø–æ—Ä—Ç–∞"""

    template_name = 'admin/widgets/import_settings.html'

    def format_value(self, value):
        if value is None:
            return {}
        return value

# üîß –û–°–ù–û–í–ù–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø –í –≠–¢–û–ú –§–ê–ô–õ–ï:
#
# ‚úÖ –£–ë–†–ê–ù–û: ExcelUploadForm (–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ)
# ‚úÖ –£–ë–†–ê–ù–û: –°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è ProductImportForm
# ‚úÖ –£–ë–†–ê–ù–û: UnifiedImportForm –∏–∑ admin_views
# ‚úÖ –°–û–ó–î–ê–ù–û: –ù–æ–≤–∞—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è ProductImportForm —Å –ø–æ–ª–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
# ‚úÖ –°–û–•–†–ê–ù–ï–ù–û: –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º—ã (ReviewForm, ImportPreviewForm, etc.)
# ‚úÖ –£–õ–£–ß–®–ï–ù–û: –í–∞–ª–∏–¥–∞—Ü–∏—è ZIP —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏ –≤–º–µ—Å—Ç–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
#
# üéØ –†–ï–ó–£–õ–¨–¢–ê–¢:
# - –û–¥–Ω–∞ —Ñ–æ—Ä–º–∞ –∏–º–ø–æ—Ä—Ç–∞ –≤–º–µ—Å—Ç–æ —Ç—Ä—ë—Ö —Ä–∞–∑–Ω—ã—Ö
# - –ü–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è Excel –∏ ZIP —Ñ–∞–π–ª–æ–≤
# - –ì–∏–±–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–º–ø–æ—Ä—Ç–∞
# - –ß–∏—Å—Ç–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ñ–æ—Ä–º