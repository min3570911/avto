# üìÅ products/image_utils.py
# üÜï –ù–û–í–´–ô —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ ZIP –∞—Ä—Ö–∏–≤–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
# üñºÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ –ø–∞–ø–∫–∞–º categories/ –∏ product/

import os
import zipfile
import logging
from typing import Tuple, List, Dict
from django.conf import settings
from django.core.files.uploadedfile import InMemoryUploadedFile
from products.models import Category

logger = logging.getLogger(__name__)

# üñºÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
SUPPORTED_IMAGE_EXTENSIONS = ['.jpg', '.jpeg', '.png', '.webp']

# üìÇ –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å
SYSTEM_FILES_TO_SKIP = [
    '__MACOSX',
    '.DS_Store',
    'Thumbs.db',
    'desktop.ini'
]


def process_images_zip(zip_file: InMemoryUploadedFile) -> int:
    """
    üñºÔ∏è –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ ZIP –∞—Ä—Ö–∏–≤–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏

    –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç ZIP –∞—Ä—Ö–∏–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:
    - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Üí media/categories/
    - –¢–æ–≤–∞—Ä—ã ‚Üí media/product/

    Args:
        zip_file: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π ZIP —Ñ–∞–π–ª

    Returns:
        int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

    Raises:
        Exception: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—Ä—Ö–∏–≤–∞
    """
    try:
        logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É ZIP –∞—Ä—Ö–∏–≤–∞: {zip_file.name}")

        # üìä –°—á–µ—Ç—á–∏–∫–∏
        processed_count = 0
        categories_count = 0
        products_count = 0
        skipped_count = 0

        # üìÇ –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        _ensure_media_directories()

        # üóÇÔ∏è –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–º–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        existing_categories = _get_existing_categories()

        # üóúÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ZIP –∞—Ä—Ö–∏–≤
        with zipfile.ZipFile(zip_file, 'r') as zip_archive:
            file_list = zip_archive.namelist()

            logger.info(f"üì¶ –§–∞–π–ª–æ–≤ –≤ –∞—Ä—Ö–∏–≤–µ: {len(file_list)}")

            for filename in file_list:
                try:
                    # üö´ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏
                    if _should_skip_file(filename):
                        logger.debug(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {filename}")
                        skipped_count += 1
                        continue

                    # üñºÔ∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    if not _is_supported_image(filename):
                        logger.warning(f"‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {filename}")
                        skipped_count += 1
                        continue

                    # üìÇ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É
                    target_folder = _determine_target_folder(filename, existing_categories)

                    # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                    success = _save_image_file(zip_archive, filename, target_folder)

                    if success:
                        processed_count += 1
                        if target_folder == 'categories':
                            categories_count += 1
                        else:
                            products_count += 1

                        logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename} ‚Üí {target_folder}/")
                    else:
                        skipped_count += 1

                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")
                    skipped_count += 1
                    continue

        # üìä –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        logger.info(
            f"üìà –û–±—Ä–∞–±–æ—Ç–∫–∞ ZIP –∑–∞–≤–µ—Ä—à–µ–Ω–∞: "
            f"–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count}, "
            f"–∫–∞—Ç–µ–≥–æ—Ä–∏–π {categories_count}, "
            f"—Ç–æ–≤–∞—Ä–æ–≤ {products_count}, "
            f"–ø—Ä–æ–ø—É—â–µ–Ω–æ {skipped_count}"
        )

        return processed_count

    except zipfile.BadZipFile:
        error_msg = "‚ùå –§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è ZIP –∞—Ä—Ö–∏–≤–æ–º"
        logger.error(error_msg)
        raise Exception(error_msg)

    except Exception as e:
        error_msg = f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ZIP –∞—Ä—Ö–∏–≤–∞: {str(e)}"
        logger.error(error_msg)
        raise Exception(error_msg)


def _ensure_media_directories():
    """üìÇ –°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    try:
        categories_dir = os.path.join(settings.MEDIA_ROOT, 'categories')
        products_dir = os.path.join(settings.MEDIA_ROOT, 'product')

        os.makedirs(categories_dir, exist_ok=True)
        os.makedirs(products_dir, exist_ok=True)

        logger.debug(f"üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã: {categories_dir}, {products_dir}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {e}")
        raise


def _get_existing_categories() -> List[str]:
    """üìÇ –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    try:
        # üîç –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        categories = Category.objects.values_list('category_name', flat=True)
        category_names = [name.upper() for name in categories if name]

        logger.debug(f"üìÇ –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(category_names)}")
        return category_names

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        return []


def _should_skip_file(filename: str) -> bool:
    """üö´ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª"""

    # üìÅ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞–ø–∫–∏
    if filename.endswith('/'):
        return True

    # üö´ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã
    for system_file in SYSTEM_FILES_TO_SKIP:
        if system_file in filename:
            return True

    # üìÑ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã
    basename = os.path.basename(filename)
    if basename.startswith('.'):
        return True

    return False


def _is_supported_image(filename: str) -> bool:
    """üñºÔ∏è –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    file_extension = os.path.splitext(filename)[1].lower()
    return file_extension in SUPPORTED_IMAGE_EXTENSIONS


def _determine_target_folder(filename: str, existing_categories: List[str]) -> str:
    """
    üìÇ –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

    –õ–æ–≥–∏–∫–∞:
    1. –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
    3. –ï—Å–ª–∏ –µ—Å—Ç—å ‚Üí categories/, –∏–Ω–∞—á–µ ‚Üí product/

    Args:
        filename: –ò–º—è —Ñ–∞–π–ª–∞ –≤ –∞—Ä—Ö–∏–≤–µ
        existing_categories: –°–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π

    Returns:
        str: 'categories' –∏–ª–∏ 'product'
    """
    try:
        # üìÑ –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        basename = os.path.basename(filename)
        name_without_ext = os.path.splitext(basename)[0].upper()

        # üîç –ò—â–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        if name_without_ext in existing_categories:
            logger.debug(f"üìÇ {filename} ‚Üí categories (–Ω–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è {name_without_ext})")
            return 'categories'

        # üîç –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (–∏–º—è —Ñ–∞–π–ª–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
        for category in existing_categories:
            if category in name_without_ext or name_without_ext in category:
                logger.debug(f"üìÇ {filename} ‚Üí categories (—á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å {category})")
                return 'categories'

        # üõçÔ∏è –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ç–æ–≤–∞—Ä—ã
        logger.debug(f"üì¶ {filename} ‚Üí product (–∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞)")
        return 'product'

    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏ –¥–ª—è {filename}: {e}. –ò—Å–ø–æ–ª—å–∑—É–µ–º product/")
        return 'product'


def _save_image_file(zip_archive: zipfile.ZipFile, filename: str, target_folder: str) -> bool:
    """
    üíæ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É

    Args:
        zip_archive: –û—Ç–∫—Ä—ã—Ç—ã–π ZIP –∞—Ä—Ö–∏–≤
        filename: –ò–º—è —Ñ–∞–π–ª–∞ –≤ –∞—Ä—Ö–∏–≤–µ
        target_folder: –¶–µ–ª–µ–≤–∞—è –ø–∞–ø–∫–∞ ('categories' –∏–ª–∏ 'product')

    Returns:
        bool: True –µ—Å–ª–∏ —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω
    """
    try:
        # üìÇ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        target_dir = os.path.join(settings.MEDIA_ROOT, target_folder)
        basename = os.path.basename(filename)
        target_path = os.path.join(target_dir, basename)

        # üìñ –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∏–∑ –∞—Ä—Ö–∏–≤–∞
        with zip_archive.open(filename) as source_file:
            file_data = source_file.read()

        # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        with open(target_path, 'wb') as target_file:
            target_file.write(file_data)

        # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–ª—Å—è –∏ –Ω–µ –ø—É—Å—Ç–æ–π
        if os.path.exists(target_path) and os.path.getsize(target_path) > 0:
            logger.debug(f"üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {target_path}")
            return True
        else:
            logger.error(f"‚ùå –§–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è –∏–ª–∏ –ø—É—Å—Ç–æ–π: {target_path}")
            return False

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filename}: {e}")
        return False


def get_images_statistics(zip_file: InMemoryUploadedFile) -> Dict:
    """
    üìä –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ ZIP –∞—Ä—Ö–∏–≤–µ –±–µ–∑ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π

    Args:
        zip_file: ZIP —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

    Returns:
        Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ñ–∞–π–ª–æ–≤ –ø–æ —Ç–∏–ø–∞–º
    """
    try:
        stats = {
            'total_files': 0,
            'image_files': 0,
            'categories_files': 0,
            'products_files': 0,
            'unsupported_files': 0,
            'file_formats': {},
            'largest_file': {'name': '', 'size': 0},
            'errors': []
        }

        # üìÇ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        existing_categories = _get_existing_categories()

        with zipfile.ZipFile(zip_file, 'r') as zip_archive:
            for filename in zip_archive.namelist():
                # üö´ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã
                if _should_skip_file(filename):
                    continue

                stats['total_files'] += 1

                # üñºÔ∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
                if _is_supported_image(filename):
                    stats['image_files'] += 1

                    # üìÇ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø
                    target_folder = _determine_target_folder(filename, existing_categories)
                    if target_folder == 'categories':
                        stats['categories_files'] += 1
                    else:
                        stats['products_files'] += 1

                    # üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤
                    ext = os.path.splitext(filename)[1].lower()
                    stats['file_formats'][ext] = stats['file_formats'].get(ext, 0) + 1

                    # üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                    try:
                        file_info = zip_archive.getinfo(filename)
                        if file_info.file_size > stats['largest_file']['size']:
                            stats['largest_file'] = {
                                'name': os.path.basename(filename),
                                'size': file_info.file_size
                            }
                    except:
                        pass

                else:
                    stats['unsupported_files'] += 1

        return stats

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ ZIP –∞—Ä—Ö–∏–≤–∞: {e}")
        return {
            'total_files': 0,
            'image_files': 0,
            'categories_files': 0,
            'products_files': 0,
            'unsupported_files': 0,
            'file_formats': {},
            'largest_file': {'name': '', 'size': 0},
            'errors': [str(e)]
        }


def validate_images_zip(zip_file: InMemoryUploadedFile) -> Tuple[bool, List[str]]:
    """
    ‚úÖ –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç ZIP –∞—Ä—Ö–∏–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏

    Args:
        zip_file: ZIP —Ñ–∞–π–ª –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏

    Returns:
        Tuple[bool, List[str]]: (is_valid, list_of_errors)
    """
    errors = []

    try:
        with zipfile.ZipFile(zip_file, 'r') as zip_archive:
            file_list = zip_archive.namelist()

            # üìä –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            if not file_list:
                errors.append("–ê—Ä—Ö–∏–≤ –ø—É—Å—Ç–æ–π")
                return False, errors

            # üñºÔ∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            image_files = [f for f in file_list
                           if not _should_skip_file(f) and _is_supported_image(f)]

            if not image_files:
                errors.append("–í –∞—Ä—Ö–∏–≤–µ –Ω–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                return False, errors

            # üìè –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
            max_file_size = 5 * 1024 * 1024  # 5MB –Ω–∞ —Ñ–∞–π–ª
            for filename in image_files:
                try:
                    file_info = zip_archive.getinfo(filename)
                    if file_info.file_size > max_file_size:
                        errors.append(
                            f"–§–∞–π–ª {os.path.basename(filename)} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: "
                            f"{file_info.file_size / 1024 / 1024:.1f}MB (–º–∞–∫—Å. 5MB)"
                        )
                except:
                    pass

            # ‚úÖ –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
            if errors:
                return False, errors

            return True, []

    except zipfile.BadZipFile:
        errors.append("–§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è ZIP –∞—Ä—Ö–∏–≤–æ–º")
        return False, errors

    except Exception as e:
        errors.append(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}")
        return False, errors


# üéØ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –±—É–¥—É—â–µ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è

def cleanup_old_images(days_old: int = 30):
    """
    üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

    Args:
        days_old: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è "—Å—Ç–∞—Ä—ã—Ö" —Ñ–∞–π–ª–æ–≤
    """
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—á–∏—Å—Ç–∫—É –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    pass


def optimize_images(target_size: int = 800):
    """
    ‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—Å–∂–∞—Ç–∏–µ, –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞)

    Args:
        target_size: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
    """
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    pass


def generate_thumbnails():
    """üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∏–Ω–∏–∞—Ç—é—Ä –¥–ª—è –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –º–∏–Ω–∏–∞—Ç—é—Ä
    pass

# üîß –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –≠–¢–û–ì–û –§–ê–ô–õ–ê:
#
# ‚úÖ –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò:
# - process_images_zip() - –≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ ZIP –∞—Ä—Ö–∏–≤–∞
# - _determine_target_folder() - —É–º–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–∞–ø–∫–∞–º
# - _save_image_file() - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å—é
#
# ‚úÖ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò:
# - get_images_statistics() - –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ ZIP –±–µ–∑ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏
# - validate_images_zip() - –≤–∞–ª–∏–¥–∞—Ü–∏—è –∞—Ä—Ö–∏–≤–∞
# - _ensure_media_directories() - —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫
#
# ‚úÖ –£–ú–ù–ê–Ø –õ–û–ì–ò–ö–ê:
# - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∫–∞—Ç–µ–≥–æ—Ä–∏—è/—Ç–æ–≤–∞—Ä)
# - –ü—Ä–æ–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (__MACOSX, .DS_Store)
# - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫ –≤ ZIP
# - –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
#
# üéØ –†–ï–ó–£–õ–¨–¢–ê–¢:
# - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ø–∞–¥–∞—é—Ç –≤ media/categories/
# - –¢–æ–≤–∞—Ä—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ø–∞–¥–∞—é—Ç –≤ media/product/
# - –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è
# - –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏