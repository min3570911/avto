# üìÅ products/import_processor.py
# üõ†Ô∏è –§–ò–ù–ê–õ–¨–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä—è–º–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
# ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –º–µ—Ç–æ–¥ process_structured_data –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ Excel
# ‚úÖ –£–±–∏—Ä–∞–µ–º –∫–æ—Å—Ç—ã–ª—å —Å –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ Excel —Ñ–∞–π–ª–∞

import logging
from typing import Dict, List, Tuple, Optional
from django.db import transaction, IntegrityError, models
from django.utils.text import slugify
from django.core.files import File
from django.conf import settings
import os
from decimal import Decimal

from products.models import Product, Category, ProductImage
from .import_utils import (
    read_excel_file,
    separate_categories_and_products,
    get_import_statistics
)

logger = logging.getLogger(__name__)


class ProductImportProcessor:
    """
    üöÄ –û–ë–ù–û–í–õ–Å–ù–ù–´–ô –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏–º–ø–æ—Ä—Ç–∞ —Å –¥–≤—É–º—è —Ä–µ–∂–∏–º–∞–º–∏ —Ä–∞–±–æ—Ç—ã:

    1. process_excel_file() - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º (Excel ‚Üí —Ä–∞–∑–±–æ—Ä ‚Üí –∏–º–ø–æ—Ä—Ç)
    2. process_structured_data() - –Ω–æ–≤—ã–π —Ä–µ–∂–∏–º (–≥–æ—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ ‚Üí –∏–º–ø–æ—Ä—Ç)

    –í—Ç–æ—Ä–æ–π —Ä–µ–∂–∏–º —É–±–∏—Ä–∞–µ—Ç –∫–æ—Å—Ç—ã–ª—å —Å –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ–º Excel —Ñ–∞–π–ª–∞
    """

    def __init__(self):
        self.statistics = {
            'total_processed': 0,
            'categories_created': 0,
            'categories_updated': 0,
            'products_created': 0,
            'products_updated': 0,
            'errors': 0,
            'images_processed': 0,
            'sku_generated': 0
        }
        self.errors = []
        self.category_cache = {}  # üíæ –ö—ç—à —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π

    def process_excel_file(self, file) -> Dict:
        """
        üìä –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel —Ñ–∞–π–ª–∞

        –û—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏ –≤–Ω–µ—à–Ω–∏—Ö API
        """
        try:
            logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞: {file.name}")

            # üìñ –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
            success, result = read_excel_file(file)
            if not success:
                return self._create_error_result(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {result}")

            raw_data = result
            logger.info(f"üìã –ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(raw_data)} —Å—Ç—Ä–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞")

            # üîÑ –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–æ–≤–∞—Ä—ã
            categories, products, invalid_data = separate_categories_and_products(raw_data)

            if not categories and not products:
                return self._create_error_result("–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞")

            logger.info(f"üìÇ –ù–∞–π–¥–µ–Ω–æ: {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π, {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")

            # üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            return self.process_structured_data(categories, products, invalid_data)

        except Exception as e:
            error_msg = f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {str(e)}"
            logger.error(error_msg)
            return self._create_error_result(error_msg)

    def process_structured_data(self, categories: List[Dict], products: List[Dict],
                                invalid_data: List[Dict] = None) -> Dict:
        """
        üÜï –ù–û–í–´–ô –ú–ï–¢–û–î: –ü—Ä—è–º–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

        –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–µ —Å–ø–∏—Å–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Ç–æ–≤–∞—Ä–æ–≤, –º–∏–Ω—É—è —ç—Ç–∞–ø —Ä–∞–∑–±–æ—Ä–∞ Excel.
        –£–±–∏—Ä–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –≤ –∫–æ—Å—Ç—ã–ª–µ —Å –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.

        Args:
            categories: –°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            products: –°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
            invalid_data: –°–ø–∏—Å–æ–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–º–ø–æ—Ä—Ç–∞ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        try:
            logger.info(f"üéØ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä—è–º—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É: {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π, {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")

            if invalid_data is None:
                invalid_data = []

            # üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º
            import_stats = get_import_statistics(categories, products, invalid_data)

            # üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            with transaction.atomic():
                # üìÇ –°–Ω–∞—á–∞–ª–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                category_results = self._import_categories(categories)

                # üõçÔ∏è –ó–∞—Ç–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã
                product_results = self._import_products(products)

            # üìà –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return {
                'success': True,
                'statistics': {
                    **self.statistics,
                    **import_stats
                },
                'errors': self.errors,
                'invalid_data': invalid_data,
                'category_results': category_results,
                'product_results': product_results
            }

        except Exception as e:
            error_msg = f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
            logger.error(error_msg)
            return self._create_error_result(error_msg)

    def _import_categories(self, categories_data: List[Dict]) -> List[Dict]:
        """üìÇ –ò–º–ø–æ—Ä—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–µ–π Category"""
        results = []

        for category_data in categories_data:
            try:
                self.statistics['total_processed'] += 1
                result = self._process_single_category(category_data)
                results.append(result)

            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_data.get('category_name', '?')}: {str(e)}"
                logger.error(error_msg)
                self.errors.append(error_msg)
                self.statistics['errors'] += 1

                results.append({
                    'name': category_data.get('category_name', '?'),
                    'status': 'error',
                    'message': str(e)
                })

        return results

    def _process_single_category(self, category_data: Dict) -> Dict:
        """üìÇ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π category_sku"""
        category_name = category_data['category_name']
        category_sku = category_data.get('category_sku', 1)

        try:
            # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è (–ø–æ SKU –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é)
            existing_category = Category.objects.filter(
                models.Q(category_sku=category_sku) | models.Q(category_name=category_name)
            ).first()

            if existing_category:
                # üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                category = self._update_category(existing_category, category_data)
                action = 'updated'
                self.statistics['categories_updated'] += 1
            else:
                # üÜï –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                category = self._create_category(category_data)
                action = 'created'
                self.statistics['categories_created'] += 1

            # üñºÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–±–µ–∑ –¥–∏—Å–∫–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π)
            if category_data.get('image'):
                self._attach_category_image(category, category_data['image'])

            # üíæ –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
            self.category_cache[category_name] = category

            logger.info(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è {category_name} (SKU: {category_sku}) {action}")

            return {
                'name': category_name,
                'status': action,
                'message': f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ {action}'
            }

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_name}: {str(e)}"
            logger.error(error_msg)
            raise

    def _create_category(self, category_data: Dict) -> Category:
        """üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π category_sku"""
        try:
            category_name = category_data['category_name']
            category_sku = category_data.get('category_sku', 1)

            # üìù –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            description = category_data.get('description', '') or f"–ê–≤—Ç–æ–∫–æ–≤—Ä–∏–∫–∏ –¥–ª—è {category_name}"
            title = category_data.get('title', '') or f"–ê–≤—Ç–æ–∫–æ–≤—Ä–∏–∫–∏ {category_name}"
            meta_description = category_data.get('meta_description', '') or \
                               f"–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞–≤—Ç–æ–∫–æ–≤—Ä–∏–∫–∏ –¥–ª—è {category_name}. –ë–æ–ª—å—à–æ–π –≤—ã–±–æ—Ä, –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ë–µ–ª–∞—Ä—É—Å–∏."

            # üÜï –°–æ–∑–¥–∞—ë–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            category = Category.objects.create(
                category_name=category_name,
                category_sku=category_sku,
                slug=slugify(category_name),
                description=description,
                page_title=title,
                meta_title=title[:60] if title else f"–ö–æ–≤—Ä–∏–∫–∏ {category_name}",
                meta_description=meta_description[:160],
                is_active=True
            )

            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name} (SKU: {category_sku})")
            return category

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_data.get('category_name', '?')}: {e}")
            raise

    def _update_category(self, category: Category, category_data: Dict) -> Category:
        """üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            # üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
            if category_data.get('description'):
                category.description = category_data['description']

            if category_data.get('title'):
                category.page_title = category_data['title']
                category.meta_title = category_data['title'][:60]

            if category_data.get('meta_description'):
                category.meta_description = category_data['meta_description'][:160]

            # üÜï –û–±–Ω–æ–≤–ª—è–µ–º SKU –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
            if category_data.get('category_sku'):
                category.category_sku = category_data['category_sku']

            category.save()

            logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category.category_name} (SKU: {category.category_sku})")
            return category

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category.category_name}: {e}")
            raise

    def _attach_category_image(self, category: Category, image_filename: str):
        """
        üñºÔ∏è –£–ü–†–û–©–Å–ù–ù–û–ï –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

        –ë–æ–ª—å—à–µ –ù–ï —á–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª —Å –¥–∏—Å–∫–∞ - –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç –ø—É—Ç—å.
        image_utils.py —É–∂–µ –ø–æ–º–µ—Å—Ç–∏–ª —Ñ–∞–π–ª –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ.
        """
        try:
            # üìÅ –ü—Ä–æ—Å—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è)
            image_path = f"categories/{image_filename}"

            # üíæ Django —Å OverwriteStorage —Å–æ—Ö—Ä–∞–Ω–∏—Ç —Å —Ç–æ—á–Ω—ã–º –∏–º–µ–Ω–µ–º
            category.category_image.name = image_path
            category.save(update_fields=['category_image'])

            logger.info(f"‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {image_filename}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {image_filename}: {e}")

    def _import_products(self, products_data: List[Dict]) -> List[Dict]:
        """üõçÔ∏è –ò–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        results = []

        for product_data in products_data:
            try:
                self.statistics['total_processed'] += 1
                result = self._process_single_product(product_data)
                results.append(result)

            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ {product_data.get('sku', '?')}: {str(e)}"
                logger.error(error_msg)
                self.errors.append(error_msg)
                self.statistics['errors'] += 1

                results.append({
                    'sku': product_data.get('sku', '?'),
                    'status': 'error',
                    'message': str(e)
                })

        return results

    def _process_single_product(self, product_data: Dict) -> Dict:
        """üõçÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ —Å –ø–æ–∏—Å–∫–æ–º –ø–æ SKU"""
        product_sku = product_data['sku']
        product_name = product_data['name']

        try:
            # üìÇ –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            category = self._get_category_for_product(product_data['category_name'])

            # üéØ –ò—â–µ–º —Ç–æ–≤–∞—Ä –ø–æ SKU
            existing_product = Product.objects.filter(product_sku=product_sku).first()

            if existing_product:
                # üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä
                product = self._update_product(existing_product, product_data, category)
                action = 'updated'
                self.statistics['products_updated'] += 1
                logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä —Å SKU: {product_sku}")
            else:
                # üÜï –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
                product = self._create_product(product_data, category)
                action = 'created'
                self.statistics['products_created'] += 1
                logger.info(f"üÜï –°–æ–∑–¥–∞–Ω —Ç–æ–≤–∞—Ä —Å SKU: {product_sku}")

            # üÜï –°—á–µ—Ç—á–∏–∫ –∞–≤—Ç–æ—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö SKU
            if not product_data.get('original_sku'):
                self.statistics['sku_generated'] += 1

            # üñºÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–±–µ–∑ –¥–∏—Å–∫–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π)
            if product_data.get('image'):
                self._attach_product_image(product, product_data['image'])

            logger.info(f"‚úÖ –¢–æ–≤–∞—Ä {product_sku} ({product_name}) {action}")

            return {
                'sku': product_sku,
                'name': product_name,
                'status': action,
                'message': f'–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ {action}'
            }

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ {product_sku}: {str(e)}"
            logger.error(error_msg)
            raise

    def _get_category_for_product(self, category_name: str) -> Category:
        """üìÇ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ (–∏–∑ –∫—ç—à–∞ –∏–ª–∏ –ë–î)"""
        # üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if category_name in self.category_cache:
            return self.category_cache[category_name]

        # üîç –ò—â–µ–º –≤ –ë–î
        category = Category.objects.filter(category_name=category_name).first()

        if not category:
            # üÜï –°–æ–∑–¥–∞—ë–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç (fallback)
            category = Category.objects.create(
                category_name=category_name,
                category_sku=1,
                slug=slugify(category_name),
                description=f"–ê–≤—Ç–æ–∫–æ–≤—Ä–∏–∫–∏ –¥–ª—è {category_name}",
                meta_title=f"–ö–æ–≤—Ä–∏–∫–∏ {category_name}",
                meta_description=f"–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞–≤—Ç–æ–∫–æ–≤—Ä–∏–∫–∏ –¥–ª—è {category_name}",
                is_active=True
            )
            self.statistics['categories_created'] += 1
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ fallback –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}")

        # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        self.category_cache[category_name] = category
        return category

    def _create_product(self, product_data: Dict, category: Category) -> Product:
        """üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º SKU"""
        try:
            product_name = product_data['name']
            product_sku = product_data['sku']

            # üí∞ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã
            price = self._normalize_price(product_data.get('price', 0))

            # üìù –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            description = product_data.get('description', '')
            if not description:
                description = f"<p>–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞–≤—Ç–æ–∫–æ–≤—Ä–∏–∫–∏ {product_name}.</p>"

            # üÜï –°–æ–∑–¥–∞—ë–º —Ç–æ–≤–∞—Ä —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º SKU
            product = Product.objects.create(
                product_name=product_name,
                product_sku=product_sku,
                slug=slugify(f"{product_name}-{product_sku}"),
                category=category,
                price=price,
                product_desription=description,
                page_title=product_data.get('title', ''),
                meta_description=product_data.get('meta_description', ''),
                newest_product=True
            )

            logger.info(
                f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–æ–≤–∞—Ä: {product_name} (SKU: {product_sku}, —Ü–µ–Ω–∞: {price}, –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category.category_name})")
            return product

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ {product_data.get('name', '?')}: {e}")
            raise

    def _update_product(self, product: Product, product_data: Dict, category: Category) -> Product:
        """üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
        try:
            # üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –í–°–ï –ø–æ–ª—è
            product.product_name = product_data['name']
            product.category = category
            product.product_sku = product_data['sku']

            # üí∞ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã
            product.price = self._normalize_price(product_data.get('price', 0))

            # üìù –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ SEO –ø–æ–ª—è
            if product_data.get('description'):
                product.product_desription = product_data['description']

            if product_data.get('title'):
                product.page_title = product_data['title']

            if product_data.get('meta_description'):
                product.meta_description = product_data['meta_description']

            # üîó –û–±–Ω–æ–≤–ª—è–µ–º slug –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
            product.slug = slugify(f"{product.product_name}-{product.product_sku}")

            product.save()

            logger.info(f"üîÑ –û–±–Ω–æ–≤–ª—ë–Ω —Ç–æ–≤–∞—Ä: {product.product_name} (SKU: {product.product_sku})")
            return product

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ {product.product_name}: {e}")
            raise

    def _normalize_price(self, price_value) -> int:
        """
        üí∞ –ù–û–í–´–ô –ú–ï–¢–û–î: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–Ω—ã

        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç Decimal ‚Üí int ‚Üí float –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ –∫–æ–ø–µ–µ–∫
        """
        try:
            if price_value is None or price_value == '':
                return 0

            # üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
            if isinstance(price_value, (int, float)):
                return max(0, int(price_value))

            if isinstance(price_value, Decimal):
                return max(0, int(price_value))

            if isinstance(price_value, str):
                # üßπ –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –æ—Ç –≤–∞–ª—é—Ç–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
                import re
                clean_price = re.sub(r'[^\d.,]', '', price_value.strip())
                if not clean_price:
                    return 0

                # üîÑ –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
                clean_price = clean_price.replace(',', '.')
                return max(0, int(float(clean_price)))

            return 0

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ü–µ–Ω—ã '{price_value}': {e}")
            return 0

    def _attach_product_image(self, product: Product, image_filename: str):
        """
        üñºÔ∏è –£–ü–†–û–©–Å–ù–ù–û–ï –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ —Ç–æ–≤–∞—Ä—É

        –ë–æ–ª—å—à–µ –ù–ï —á–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª —Å –¥–∏—Å–∫–∞ - –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å—å –≤ –ë–î.
        image_utils.py —É–∂–µ –ø–æ–º–µ—Å—Ç–∏–ª —Ñ–∞–π–ª –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ.
        """
        try:
            # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
            existing_image = ProductImage.objects.filter(
                product=product,
                image__icontains=image_filename
            ).first()

            if existing_image:
                # üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –≥–ª–∞–≤–Ω–æ–µ
                if not existing_image.is_main:
                    ProductImage.objects.filter(product=product, is_main=True).update(is_main=False)
                    existing_image.is_main = True
                    existing_image.save()
                logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_filename}")
                return existing_image

            # üÜï –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            ProductImage.objects.filter(product=product, is_main=True).update(is_main=False)

            # üìÅ –ü—Ä–æ—Å—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            image_path = f"product/{image_filename}"

            product_image = ProductImage.objects.create(
                product=product,
                is_main=True
            )

            # üíæ Django —Å OverwriteStorage —Å–æ—Ö—Ä–∞–Ω–∏—Ç —Å —Ç–æ—á–Ω—ã–º –∏–º–µ–Ω–µ–º
            product_image.image.name = image_path
            product_image.save(update_fields=['image'])

            self.statistics['images_processed'] += 1
            logger.info(f"‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {image_filename}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ {image_filename}: {e}")

    def _create_error_result(self, error_message: str) -> Dict:
        """‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –æ—à–∏–±–∫–æ–π"""
        self.errors.append(error_message)

        return {
            'success': False,
            'error': error_message,
            'statistics': self.statistics,
            'errors': self.errors
        }


def preview_excel_data(file) -> Dict:
    """üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–æ–≤–∞—Ä—ã"""
    try:
        # üìñ –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        success, result = read_excel_file(file)
        if not success:
            return {'success': False, 'error': result}

        raw_data = result

        # üîÑ –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        categories, products, invalid_data = separate_categories_and_products(raw_data)

        # üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = get_import_statistics(categories, products, invalid_data)

        # üëÅÔ∏è –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        preview_categories = categories[:5]
        preview_products = products[:10]
        preview_invalid = invalid_data[:5]

        return {
            'success': True,
            'statistics': stats,
            'categories': preview_categories,
            'products': preview_products,
            'invalid_data': preview_invalid,
            'total_categories': len(categories),
            'total_products': len(products),
            'total_invalid': len(invalid_data)
        }

    except Exception as e:
        return {
            'success': False,
            'error': f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {str(e)}"
        }

# üîß –ö–õ–Æ–ß–ï–í–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø –í –≠–¢–û–ú –§–ê–ô–õ–ï:
#
# ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: process_structured_data() - –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä—è–º–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
# ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: _normalize_price() - –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ Decimal/int/float
# ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: _attach_*_image() - —É–±—Ä–∞–Ω—ã –¥–∏—Å–∫–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏, —Ç–æ–ª—å–∫–æ –ë–î
# ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: process_excel_file() - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç process_structured_data()
# ‚úÖ –°–û–•–†–ê–ù–ï–ù–û: –í—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
#
# üéØ –†–ï–ó–£–õ–¨–¢–ê–¢:
# - –ú–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å processor.process_structured_data(categories, products)
# - –£–±–∏—Ä–∞–µ—Ç—Å—è –∫–æ—Å—Ç—ã–ª—å —Å –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ–º Excel —Ñ–∞–π–ª–∞
# - –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
# - –û–¥–∏–Ω –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –¥–≤—É—Ö —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã