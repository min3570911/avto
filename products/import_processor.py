# üìÅ products/import_processor.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
# üîÑ –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel —Ñ–∞–π–ª–æ–≤ - –ë–ï–ó –û–®–ò–ë–ö–ò 'list' object is not callable

import os
import logging
from typing import List, Dict, Any, Optional, Tuple
from django.contrib.auth.models import User
from django.core.files.uploadedfile import UploadedFile
from django.utils import timezone
from django.db import transaction
import openpyxl
from openpyxl.workbook import Workbook
from openpyxl.worksheet.worksheet import Worksheet

from .models import Product, Category, ProductImage
from .import_utils import (
    parse_product_sku,
    validate_excel_row,
    get_or_create_category_by_sku,
    process_product_image,
    clean_price_value,
    generate_product_slug,
    ImportStats,
    EXCEL_COLUMN_MAPPING,
    REQUIRED_COLUMNS
)

logger = logging.getLogger(__name__)


class ImportProcessor:
    """
    üîÑ –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–º–ø–æ—Ä—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ Excel

    –ò–°–ü–†–ê–í–õ–ï–ù–û: –£—Å—Ç—Ä–∞–Ω–µ–Ω–∞ –æ—à–∏–±–∫–∞ 'list' object is not callable
    """

    def __init__(self, excel_file: UploadedFile, user: User):
        """üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
        self.excel_file = excel_file
        self.user = user
        self.workbook: Optional[Workbook] = None
        self.worksheet: Optional[Worksheet] = None
        self.stats = ImportStats()
        self.column_mapping = {}
        self.preview_data = []

        logger.info(f"üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–º–ø–æ—Ä—Ç —Ñ–∞–π–ª–∞: {excel_file.name} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.username}")

    def validate_file(self) -> Tuple[bool, List[str]]:
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è Excel —Ñ–∞–π–ª–∞"""
        error_list = []  # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª —Å errors —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞

        try:
            # üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            file_extension = os.path.splitext(self.excel_file.name)[1].lower()
            if file_extension not in ['.xlsx', '.xls']:
                error_list.append(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {file_extension}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .xlsx –∏–ª–∏ .xls")
                return False, error_list

            # üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 10MB)
            if self.excel_file.size > 10 * 1024 * 1024:
                error_list.append(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {self.excel_file.size / 1024 / 1024:.1f}MB. –ú–∞–∫—Å–∏–º—É–º: 10MB")
                return False, error_list

            # üìñ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª
            self.workbook = openpyxl.load_workbook(self.excel_file, data_only=True)
            self.worksheet = self.workbook.active

            if not self.worksheet:
                error_list.append("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ä–∞–±–æ—á–∏–π –ª–∏—Å—Ç Excel")
                return False, error_list

            # üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö
            if self.worksheet.max_row < 2:
                error_list.append("–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å—Ç—Ä–æ–∫–∏ (–∑–∞–≥–æ–ª–æ–≤–∫–∏ + –¥–∞–Ω–Ω—ã–µ)")
                return False, error_list

            # üîç –ê–Ω–∞–ª–∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            header_validation = self._validate_headers()
            if not header_validation[0]:
                error_list.extend(header_validation[1])
                return False, error_list

            logger.info(f"‚úÖ –§–∞–π–ª {self.excel_file.name} –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é")
            return True, []

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}"
            error_list.append(error_msg)
            logger.error(f"‚ùå {error_msg}")
            return False, error_list

    def _validate_headers(self) -> Tuple[bool, List[str]]:
        """üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ Excel —Ñ–∞–π–ª–∞"""
        error_list = []  # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª —Å errors

        try:
            # üìã –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (–∑–∞–≥–æ–ª–æ–≤–∫–∏) - –ò–°–ü–†–ê–í–õ–ï–ù–û
            first_row = self.worksheet[1]  # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
            headers_values = [cell.value for cell in first_row]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è

            # üßπ –û—á–∏—â–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç None –∏ –ø—Ä–æ–±–µ–ª–æ–≤
            headers_list = [str(header).strip() if header else f"–ö–æ–ª–æ–Ω–∫–∞_{i + 1}"
                            for i, header in enumerate(headers_values)]

            logger.info(f"üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏: {headers_list}")

            # üéØ –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫
            self.column_mapping = {i: header for i, header in enumerate(headers_list)}

            # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            found_required = []
            for required_col in REQUIRED_COLUMNS:
                if required_col in headers_list:
                    found_required.append(required_col)

            missing_required = set(REQUIRED_COLUMNS) - set(found_required)
            if missing_required:
                error_list.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing_required)}")

            # üìä –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {found_required}")
            if missing_required:
                logger.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {missing_required}")

            return len(missing_required) == 0, error_list

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {str(e)}"
            error_list.append(error_msg)
            logger.error(f"‚ùå {error_msg}")
            return False, error_list

    def preview_data(self, rows_count: int = 5) -> List[Dict[str, Any]]:
        """üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º"""

        if not self.worksheet:
            logger.error("‚ùå –†–∞–±–æ—á–∏–π –ª–∏—Å—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return []

        preview_data_list = []  # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

        try:
            # üìä –ß–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–Ω–∞—á–∏–Ω–∞—è —Å–æ 2-–π —Å—Ç—Ä–æ–∫–∏) - –ò–°–ü–†–ê–í–õ–ï–ù–û
            max_row_to_read = min(rows_count + 1, self.worksheet.max_row)

            for row_num in range(2, max_row_to_read + 1):  # –ù–∞—á–∏–Ω–∞–µ–º —Å 2-–π —Å—Ç—Ä–æ–∫–∏
                row_data = {}
                current_row = self.worksheet[row_num]  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ –Ω–æ–º–µ—Ä—É

                # üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ª–æ–≤–∞—Ä—å –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
                for col_index, cell in enumerate(current_row):
                    column_name = self.column_mapping.get(col_index, f"–ö–æ–ª–æ–Ω–∫–∞_{col_index + 1}")
                    row_data[column_name] = cell.value

                # ‚ûï –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                row_data['_row_number'] = row_num

                # üîç –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                is_valid, validation_errors = validate_excel_row(row_data)
                row_data['_is_valid'] = is_valid
                row_data['_validation_errors'] = validation_errors

                # üìù –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å SKU –¥–ª—è –ø–æ–∫–∞–∑–∞
                product_name = row_data.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', '')
                category_sku, parsed_name = parse_product_sku(str(product_name))
                row_data['_parsed_category_sku'] = category_sku
                row_data['_parsed_product_name'] = parsed_name

                preview_data_list.append(row_data)

            self.preview_data = preview_data_list
            logger.info(f"üëÅÔ∏è –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä: {len(preview_data_list)} —Å—Ç—Ä–æ–∫")

            return preview_data_list

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            return []

    def process_import(self, batch_size: int = 50) -> Dict[str, Any]:
        """üöÄ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""

        if not self.worksheet:
            error_msg = "–†–∞–±–æ—á–∏–π –ª–∏—Å—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ñ–∞–π–ª–∞ —Å–Ω–∞—á–∞–ª–∞."
            logger.error(f"‚ùå {error_msg}")
            return {'success': False, 'error': error_msg}

        # üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.stats.total_rows = self.worksheet.max_row - 1  # –ú–∏–Ω—É—Å –∑–∞–≥–æ–ª–æ–≤–æ–∫

        logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç: {self.stats.total_rows} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö")

        try:
            # üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–∞–º–∏
            processed_count = 0

            with transaction.atomic():  # üîí –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

                # üìä –ß–∏—Ç–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö - –ò–°–ü–†–ê–í–õ–ï–ù–û
                for row_num in range(2, self.worksheet.max_row + 1):
                    current_row = self.worksheet[row_num]
                    row_values = [cell.value for cell in current_row]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è

                    # üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
                    result = self._process_single_row(row_num, row_values)

                    processed_count += 1
                    self.stats.processed_rows = processed_count

                    # üìä –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 50 —Å—Ç—Ä–æ–∫
                    if processed_count % batch_size == 0:
                        progress = (processed_count / self.stats.total_rows) * 100
                        logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_count}/{self.stats.total_rows} ({progress:.1f}%)")

            # üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            logger.info(f"‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {self.stats.get_summary()}")

            return {
                'success': True,
                'stats': self.stats.get_summary(),
                'message': f"–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ. –°–æ–∑–¥–∞–Ω–æ: {self.stats.created_count}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {self.stats.updated_count}"
            }

        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {str(e)}"
            logger.error(f"‚ùå {error_msg}")

            return {
                'success': False,
                'error': error_msg,
                'stats': self.stats.get_summary()
            }

    def _process_single_row(self, row_num: int, row_values: List) -> bool:
        """üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö - –ò–°–ü–†–ê–í–õ–ï–ù–û"""

        try:
            # üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ª–æ–≤–∞—Ä—å
            row_dict = {}
            for col_index, cell_value in enumerate(row_values):
                column_name = self.column_mapping.get(col_index, f"–ö–æ–ª–æ–Ω–∫–∞_{col_index + 1}")
                row_dict[column_name] = cell_value

            # ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏
            is_valid, validation_errors = validate_excel_row(row_dict)
            if not is_valid:
                for error in validation_errors:
                    self.stats.add_error(row_num, error)
                return False

            # üîç –ü–∞—Ä—Å–∏–Ω–≥ SKU
            product_name_raw = row_dict.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', '')
            category_sku, product_name = parse_product_sku(str(product_name_raw))

            if not category_sku or not product_name:
                self.stats.add_error(row_num, f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {product_name_raw}")
                return False

            # üìÇ –ü–æ–ª—É—á–µ–Ω–∏–µ/—Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            try:
                category = get_or_create_category_by_sku(category_sku, product_name.split()[0])
            except Exception as e:
                self.stats.add_error(row_num, f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π: {str(e)}")
                return False

            # üõçÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞
            product_sku = row_dict.get('–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞', '').strip()
            if not product_sku:
                self.stats.add_error(row_num, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–¥ —Ç–æ–≤–∞—Ä–∞")
                return False

            # üîç –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
            existing_product = Product.objects.filter(product_sku=product_sku).first()

            if existing_product:
                # üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
                updated = self._update_product(existing_product, row_dict, product_name, category)
                if updated:
                    self.stats.add_success(row_num, 'update', existing_product.product_name)

                    # üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    image_filename = row_dict.get('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')
                    if image_filename:
                        process_product_image(existing_product, str(image_filename))

                return updated
            else:
                # üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
                new_product = self._create_product(row_dict, product_name, category)
                if new_product:
                    self.stats.add_success(row_num, 'create', new_product.product_name)

                    # üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    image_filename = row_dict.get('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')
                    if image_filename:
                        process_product_image(new_product, str(image_filename))

                return new_product is not None

        except Exception as e:
            self.stats.add_error(row_num, f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ {row_num}: {str(e)}")
            return False

    def _create_product(self, row_dict: Dict[str, Any], product_name: str, category: Category) -> Optional[Product]:
        """üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""

        try:
            # üí∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã
            price = clean_price_value(row_dict.get('–¶–µ–Ω–∞', 0))

            # üîó –ì–µ–Ω–µ—Ä–∞—Ü–∏—è slug
            product_sku = row_dict.get('–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞', '').strip()
            slug = generate_product_slug(product_name, product_sku)

            # üÜï –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            product = Product.objects.create(
                product_sku=product_sku,
                product_name=product_name,
                slug=slug,
                category=category,
                price=price,
                product_desription=row_dict.get('–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', ''),
                page_title=row_dict.get('Title —Å—Ç—Ä–∞–Ω–∏—Ü—ã', ''),
                meta_description=row_dict.get('–ú–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏–µ', ''),
                newest_product=False  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –Ω–æ–≤—ã–π
            )

            logger.info(f"üÜï –°–æ–∑–¥–∞–Ω —Ç–æ–≤–∞—Ä: {product.product_name} (SKU: {product.product_sku})")
            return product

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ '{product_name}': {str(e)}")
            return None

    def _update_product(self, product: Product, row_dict: Dict[str, Any], product_name: str,
                        category: Category) -> bool:
        """üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞"""

        try:
            # üí∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã
            price = clean_price_value(row_dict.get('–¶–µ–Ω–∞', 0))

            # üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π
            product.product_name = product_name
            product.category = category
            product.price = price
            product.product_desription = row_dict.get('–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', '')
            product.page_title = row_dict.get('Title —Å—Ç—Ä–∞–Ω–∏—Ü—ã', '')
            product.meta_description = row_dict.get('–ú–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏–µ', '')

            # üîó –û–±–Ω–æ–≤–ª—è–µ–º slug —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
            new_slug = generate_product_slug(product_name, product.product_sku)
            if product.slug != new_slug:
                product.slug = new_slug

            product.save()

            logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä: {product.product_name} (SKU: {product.product_sku})")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ '{product.product_name}': {str(e)}")
            return False

    def get_file_info(self) -> Dict[str, Any]:
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ"""

        if not self.worksheet:
            return {'error': '–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω'}

        return {
            'filename': self.excel_file.name,
            'file_size': f"{self.excel_file.size / 1024:.1f} KB",
            'total_rows': self.worksheet.max_row - 1,  # –ú–∏–Ω—É—Å –∑–∞–≥–æ–ª–æ–≤–æ–∫
            'total_columns': self.worksheet.max_column,
            'column_mapping': self.column_mapping,
            'preview_available': len(self.preview_data) > 0
        }

    def cleanup(self):
        """üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self.workbook:
            self.workbook.close()
        logger.info("üßπ –†–µ—Å—É—Ä—Å—ã –∏–º–ø–æ—Ä—Ç–∞ –æ—á–∏—â–µ–Ω—ã")

# üîß –û–°–ù–û–í–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ errors -> error_list
# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–∑–º–µ–Ω–µ–Ω —Å–ø–æ—Å–æ–± —á—Ç–µ–Ω–∏—è —Å—Ç—Ä–æ–∫ Excel –±–µ–∑ iter_rows
# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω–∞ –ø–µ—Ä–µ–¥–∞—á–∞ tuple –≤ _process_single_row
# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ —è—á–µ–π–∫–∞–º worksheet[row_num]