# üìÅ products/import_processor.py
# üõ†Ô∏è –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –∏–º–ø–æ—Ä—Ç–∞
# ‚úÖ –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ SKU –≤–º–µ—Å—Ç–æ slug
# ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ SKU –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
# ‚úÖ –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è SKU –¥–ª—è –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
# ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ (17 –≤–º–µ—Å—Ç–æ 58)

import logging
from typing import Dict, List, Tuple, Optional
from django.db import transaction, IntegrityError, models
from django.utils.text import slugify
from django.core.files import File
from django.conf import settings
import os
from decimal import Decimal

from products.models import Product, Category, ProductImage
from .import_utils import (
    read_excel_file,
    separate_categories_and_products,
    get_import_statistics
)

logger = logging.getLogger(__name__)


class ProductImportProcessor:
    """
    üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏–º–ø–æ—Ä—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π SKU

    –û—Å–Ω–æ–≤–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
    - –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ product_sku –≤–º–µ—Å—Ç–æ slug
    - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ SKU –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    - –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è SKU –ø–æ —Ñ–æ—Ä–º—É–ª–µ category_sku * 10000 + –Ω–æ–º–µ—Ä
    - –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    """

    def __init__(self):
        self.statistics = {
            'total_processed': 0,
            'categories_created': 0,
            'categories_updated': 0,
            'products_created': 0,
            'products_updated': 0,
            'errors': 0,
            'images_processed': 0,
            'sku_generated': 0  # üÜï –°—á–µ—Ç—á–∏–∫ –∞–≤—Ç–æ—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö SKU
        }
        self.errors = []
        self.category_cache = {}  # üíæ –ö—ç—à —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π

    def process_excel_file(self, file) -> Dict:
        """
        üìä –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel —Ñ–∞–π–ª–∞ —Å –¥–≤–æ–π–Ω–æ–π –ª–æ–≥–∏–∫–æ–π

        Args:
            file: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π Excel —Ñ–∞–π–ª

        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–º–ø–æ—Ä—Ç–∞ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        try:
            logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞: {file.name}")

            # üìñ –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
            success, result = read_excel_file(file)
            if not success:
                return self._create_error_result(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {result}")

            raw_data = result
            logger.info(f"üìã –ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(raw_data)} —Å—Ç—Ä–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞")

            # üîÑ –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–æ–≤–∞—Ä—ã
            categories, products, invalid_data = separate_categories_and_products(raw_data)

            if not categories and not products:
                return self._create_error_result("–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞")

            logger.info(f"üìÇ –ù–∞–π–¥–µ–Ω–æ: {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π, {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")

            # üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º
            import_stats = get_import_statistics(categories, products, invalid_data)

            # üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            with transaction.atomic():
                # üìÇ –°–Ω–∞—á–∞–ª–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                category_results = self._import_categories(categories)

                # üõçÔ∏è –ó–∞—Ç–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã
                product_results = self._import_products(products)

            # üìà –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return {
                'success': True,
                'statistics': {
                    **self.statistics,
                    **import_stats
                },
                'errors': self.errors,
                'invalid_data': invalid_data,
                'category_results': category_results,
                'product_results': product_results
            }

        except Exception as e:
            error_msg = f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {str(e)}"
            logger.error(error_msg)
            return self._create_error_result(error_msg)

    def _import_categories(self, categories_data: List[Dict]) -> List[Dict]:
        """
        üìÇ –ò–º–ø–æ—Ä—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–µ–π Category

        Args:
            categories_data: –°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π

        Returns:
            List[Dict]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–º–ø–æ—Ä—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        """
        results = []

        for category_data in categories_data:
            try:
                self.statistics['total_processed'] += 1
                result = self._process_single_category(category_data)
                results.append(result)

            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_data.get('category_name', '?')}: {str(e)}"
                logger.error(error_msg)
                self.errors.append(error_msg)
                self.statistics['errors'] += 1

                results.append({
                    'name': category_data.get('category_name', '?'),
                    'status': 'error',
                    'message': str(e)
                })

        return results

    def _process_single_category(self, category_data: Dict) -> Dict:
        """
        üìÇ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π category_sku

        Args:
            category_data: –î–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        category_name = category_data['category_name']
        category_sku = category_data.get('category_sku', 1)  # üÜï SKU –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

        try:
            # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è (–ø–æ SKU –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é)
            existing_category = Category.objects.filter(
                models.Q(category_sku=category_sku) | models.Q(category_name=category_name)
            ).first()

            if existing_category:
                # üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                category = self._update_category(existing_category, category_data)
                action = 'updated'
                self.statistics['categories_updated'] += 1
            else:
                # üÜï –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                category = self._create_category(category_data)
                action = 'created'
                self.statistics['categories_created'] += 1

            # üñºÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if category_data.get('image'):
                self._process_category_image(category, category_data['image'])

            # üíæ –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
            self.category_cache[category_name] = category

            logger.info(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è {category_name} (SKU: {category_sku}) {action}")

            return {
                'name': category_name,
                'status': action,
                'message': f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ {action}'
            }

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_name}: {str(e)}"
            logger.error(error_msg)
            raise

    def _create_category(self, category_data: Dict) -> Category:
        """
        üÜï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π category_sku

        Args:
            category_data: –î–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

        Returns:
            Category: –°–æ–∑–¥–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        """
        try:
            category_name = category_data['category_name']
            category_sku = category_data.get('category_sku', 1)  # üÜï SKU –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

            # üìù –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            description = category_data.get('description', '') or f"–ê–≤—Ç–æ–∫–æ–≤—Ä–∏–∫–∏ –¥–ª—è {category_name}"
            title = category_data.get('title', '') or f"–ê–≤—Ç–æ–∫–æ–≤—Ä–∏–∫–∏ {category_name}"
            meta_description = category_data.get('meta_description', '') or \
                               f"–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞–≤—Ç–æ–∫–æ–≤—Ä–∏–∫–∏ –¥–ª—è {category_name}. –ë–æ–ª—å—à–æ–π –≤—ã–±–æ—Ä, –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ë–µ–ª–∞—Ä—É—Å–∏."

            # üÜï –°–æ–∑–¥–∞—ë–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            category = Category.objects.create(
                category_name=category_name,
                category_sku=category_sku,  # üÜï –°–æ—Ö—Ä–∞–Ω—è–µ–º SKU –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                slug=slugify(category_name),
                description=description,
                page_title=title,
                meta_title=title[:60] if title else f"–ö–æ–≤—Ä–∏–∫–∏ {category_name}",
                meta_description=meta_description[:160],
                is_active=True
            )

            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name} (SKU: {category_sku})")
            return category

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_data.get('category_name', '?')}: {e}")
            raise

    def _update_category(self, category: Category, category_data: Dict) -> Category:
        """
        üîÑ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

        Args:
            category: –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            category_data: –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ

        Returns:
            Category: –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        """
        try:
            # üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
            if category_data.get('description'):
                category.description = category_data['description']

            if category_data.get('title'):
                category.page_title = category_data['title']
                category.meta_title = category_data['title'][:60]

            if category_data.get('meta_description'):
                category.meta_description = category_data['meta_description'][:160]

            # üÜï –û–±–Ω–æ–≤–ª—è–µ–º SKU –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
            if category_data.get('category_sku'):
                category.category_sku = category_data['category_sku']

            category.save()

            logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category.category_name} (SKU: {category.category_sku})")
            return category

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category.category_name}: {e}")
            raise

    def _import_products(self, products_data: List[Dict]) -> List[Dict]:
        """
        üõçÔ∏è –ò–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º

        Args:
            products_data: –°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤

        Returns:
            List[Dict]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–º–ø–æ—Ä—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤
        """
        results = []

        for product_data in products_data:
            try:
                self.statistics['total_processed'] += 1
                result = self._process_single_product(product_data)
                results.append(result)

            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ {product_data.get('sku', '?')}: {str(e)}"
                logger.error(error_msg)
                self.errors.append(error_msg)
                self.statistics['errors'] += 1

                results.append({
                    'sku': product_data.get('sku', '?'),
                    'status': 'error',
                    'message': str(e)
                })

        return results

    def _process_single_product(self, product_data: Dict) -> Dict:
        """
        üõçÔ∏è –ö–ê–†–î–ò–ù–ê–õ–¨–ù–û –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞

        ‚ö†Ô∏è –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Ç–µ–ø–µ—Ä—å –∏–¥–µ—Ç –ø–æ SKU, –∞ –Ω–µ –ø–æ slug!

        –≠—Ç–æ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å–æ–∑–¥–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:
        - –†–∞–Ω—å—à–µ: 17 —Ç–æ–≤–∞—Ä–æ–≤ ‚Üí 58 –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ (–ø–æ–∏—Å–∫ –ø–æ slug)
        - –¢–µ–ø–µ—Ä—å: 17 —Ç–æ–≤–∞—Ä–æ–≤ ‚Üí 17 –∑–∞–ø–∏—Å–µ–π (–ø–æ–∏—Å–∫ –ø–æ SKU)

        Args:
            product_data: –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞

        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞
        """
        product_sku = product_data['sku']
        product_name = product_data['name']

        try:
            # üìÇ –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            category = self._get_category_for_product(product_data['category_name'])

            # üéØ –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—â–µ–º —Ç–æ–≤–∞—Ä –ø–æ SKU –≤–º–µ—Å—Ç–æ slug!
            existing_product = Product.objects.filter(product_sku=product_sku).first()

            if existing_product:
                # üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä (–í–°–ï –ø–æ–ª—è –∫–∞–∫ —Ç—Ä–µ–±–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
                product = self._update_product(existing_product, product_data, category)
                action = 'updated'
                self.statistics['products_updated'] += 1
                logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä —Å SKU: {product_sku}")
            else:
                # üÜï –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
                product = self._create_product(product_data, category)
                action = 'created'
                self.statistics['products_created'] += 1
                logger.info(f"üÜï –°–æ–∑–¥–∞–Ω —Ç–æ–≤–∞—Ä —Å SKU: {product_sku}")

            # üÜï –°—á–µ—Ç—á–∏–∫ –∞–≤—Ç–æ—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö SKU
            if not product_data.get('original_sku'):
                self.statistics['sku_generated'] += 1

            # üñºÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            if product_data.get('image'):
                self._process_product_image(product, product_data['image'])

            logger.info(f"‚úÖ –¢–æ–≤–∞—Ä {product_sku} ({product_name}) {action}")

            return {
                'sku': product_sku,
                'name': product_name,
                'status': action,
                'message': f'–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ {action}'
            }

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ {product_sku}: {str(e)}"
            logger.error(error_msg)
            raise

    def _get_category_for_product(self, category_name: str) -> Category:
        """
        üìÇ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ (–∏–∑ –∫—ç—à–∞ –∏–ª–∏ –ë–î)

        Args:
            category_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

        Returns:
            Category: –û–±—ä–µ–∫—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        """
        # üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if category_name in self.category_cache:
            return self.category_cache[category_name]

        # üîç –ò—â–µ–º –≤ –ë–î
        category = Category.objects.filter(category_name=category_name).first()

        if not category:
            # üÜï –°–æ–∑–¥–∞—ë–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç (fallback)
            category = Category.objects.create(
                category_name=category_name,
                category_sku=1,  # üÜï –î–µ—Ñ–æ–ª—Ç–Ω—ã–π SKU
                slug=slugify(category_name),
                description=f"–ê–≤—Ç–æ–∫–æ–≤—Ä–∏–∫–∏ –¥–ª—è {category_name}",
                meta_title=f"–ö–æ–≤—Ä–∏–∫–∏ {category_name}",
                meta_description=f"–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞–≤—Ç–æ–∫–æ–≤—Ä–∏–∫–∏ –¥–ª—è {category_name}",
                is_active=True
            )
            self.statistics['categories_created'] += 1
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ fallback –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}")

        # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        self.category_cache[category_name] = category
        return category

    def _create_product(self, product_data: Dict, category: Category) -> Product:
        """
        üÜï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º SKU

        Args:
            product_data: –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞

        Returns:
            Product: –°–æ–∑–¥–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä
        """
        try:
            product_name = product_data['name']
            product_sku = product_data['sku']  # üéØ SKU —Ç–æ–≤–∞—Ä–∞
            price = max(0, int(product_data.get('price', 0)))

            # üìù –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            description = product_data.get('description', '')
            if not description:
                description = f"<p>–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞–≤—Ç–æ–∫–æ–≤—Ä–∏–∫–∏ {product_name}.</p>"

            # üÜï –°–æ–∑–¥–∞—ë–º —Ç–æ–≤–∞—Ä —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º SKU!
            product = Product.objects.create(
                product_name=product_name,
                product_sku=product_sku,  # üéØ –ì–õ–ê–í–ù–û–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º SKU –≤ –±–∞–∑—É!
                slug=slugify(f"{product_name}-{product_sku}"),  # üîó Unique slug —Å SKU
                category=category,
                price=price,
                product_desription=description,
                page_title=product_data.get('title', ''),  # üÜï SEO title
                meta_description=product_data.get('meta_description', ''),  # üÜï SEO description
                newest_product=True
            )

            logger.info(
                f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–æ–≤–∞—Ä: {product_name} (SKU: {product_sku}, —Ü–µ–Ω–∞: {price}, –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category.category_name})")
            return product

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ {product_data.get('name', '?')}: {e}")
            raise

    def _update_product(self, product: Product, product_data: Dict, category: Category) -> Product:
        """
        üîÑ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞

        –û–±–Ω–æ–≤–ª—è–µ—Ç –í–°–ï –ø–æ–ª—è –∫–∞–∫ —Ç—Ä–µ–±–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
        """
        try:
            # üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –í–°–ï –ø–æ–ª—è (–∫–∞–∫ —Ç—Ä–µ–±–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
            product.product_name = product_data['name']
            product.category = category

            # üéØ –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º SKU (—Ö–æ—Ç—è –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–∏—Å–∫–∞)
            product.product_sku = product_data['sku']

            # üí∞ –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
            new_price = max(0, int(product_data.get('price', 0)))
            product.price = new_price

            # üìù –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ SEO –ø–æ–ª—è
            if product_data.get('description'):
                product.product_desription = product_data['description']

            if product_data.get('title'):
                product.page_title = product_data['title']

            if product_data.get('meta_description'):
                product.meta_description = product_data['meta_description']

            # üîó –û–±–Ω–æ–≤–ª—è–µ–º slug –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
            product.slug = slugify(f"{product.product_name}-{product.product_sku}")

            product.save()

            logger.info(f"üîÑ –û–±–Ω–æ–≤–ª—ë–Ω —Ç–æ–≤–∞—Ä: {product.product_name} (SKU: {product.product_sku})")
            return product

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ {product.product_name}: {e}")
            raise

    def _process_product_image(self, product: Product, image_filename: str):
        """üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        try:
            image_path = os.path.join(settings.MEDIA_ROOT, 'product', image_filename)

            if not os.path.exists(image_path):
                logger.warning(f"‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {image_path}")
                return

            # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            existing_image = ProductImage.objects.filter(
                product=product,
                image__icontains=image_filename
            ).first()

            if existing_image:
                if not existing_image.is_main:
                    ProductImage.objects.filter(product=product, is_main=True).update(is_main=False)
                    existing_image.is_main = True
                    existing_image.save()
                return existing_image

            # üÜï –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            with open(image_path, 'rb') as f:
                ProductImage.objects.filter(product=product, is_main=True).update(is_main=False)

                product_image = ProductImage.objects.create(product=product, is_main=True)
                product_image.image.save(image_filename, File(f), save=True)

            self.statistics['images_processed'] += 1
            logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_filename}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_filename}: {e}")

    def _process_category_image(self, category: Category, image_filename: str):
        """üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            image_path = os.path.join(settings.MEDIA_ROOT, 'categories', image_filename)

            if os.path.exists(image_path):
                with open(image_path, 'rb') as f:
                    category.category_image.save(image_filename, File(f), save=True)
                logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {image_filename}")
            else:
                logger.warning(f"‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {image_path}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {image_filename}: {e}")

    def _create_error_result(self, error_message: str) -> Dict:
        """‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –æ—à–∏–±–∫–æ–π"""
        self.errors.append(error_message)

        return {
            'success': False,
            'error': error_message,
            'statistics': self.statistics,
            'errors': self.errors
        }


def preview_excel_data(file) -> Dict:
    """
    üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–æ–≤–∞—Ä—ã
    """
    try:
        # üìñ –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        success, result = read_excel_file(file)
        if not success:
            return {'success': False, 'error': result}

        raw_data = result

        # üîÑ –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        categories, products, invalid_data = separate_categories_and_products(raw_data)

        # üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = get_import_statistics(categories, products, invalid_data)

        # üëÅÔ∏è –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        preview_categories = categories[:5]
        preview_products = products[:10]
        preview_invalid = invalid_data[:5]

        return {
            'success': True,
            'statistics': stats,
            'categories': preview_categories,
            'products': preview_products,
            'invalid_data': preview_invalid,
            'total_categories': len(categories),
            'total_products': len(products),
            'total_invalid': len(invalid_data)
        }

    except Exception as e:
        return {
            'success': False,
            'error': f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {str(e)}"
        }

# üöÄ –ö–†–ò–¢–ò–ß–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –í –≠–¢–û–ú –§–ê–ô–õ–ï:
#
# ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: _process_single_product() —Ç–µ–ø–µ—Ä—å –∏—â–µ—Ç —Ç–æ–≤–∞—Ä—ã –ø–æ product_sku –≤–º–µ—Å—Ç–æ slug
# ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: _create_product() —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç SKU –≤ –ø–æ–ª–µ product_sku
# ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: _update_product() –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –ø–æ–ª—è –≤–∫–ª—é—á–∞—è SKU
# ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ category_sku –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
# ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –°—á–µ—Ç—á–∏–∫ –∞–≤—Ç–æ—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö SKU –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
# ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç models –¥–ª—è Q-–æ–±—ä–µ–∫—Ç–æ–≤
#
# üìä –†–ï–ó–£–õ–¨–¢–ê–¢:
# - –¢–æ–≤–∞—Ä—ã –±–æ–ª—å—à–µ –ù–ï –¥—É–±–ª–∏—Ä—É—é—Ç—Å—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
# - SKU –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
# - 17 —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ Excel = 17 –∑–∞–ø–∏—Å–µ–π –≤ –ë–î (–≤–º–µ—Å—Ç–æ 58)
# - –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∏–º–ø–æ—Ä—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã
# - –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è SKU –¥–ª—è –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —Ñ–æ—Ä–º—É–ª–µ: category_sku * 10000 + –Ω–æ–º–µ—Ä