# üìÅ products/import_utils.py
# üîß –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel

import os
import re
import logging
from typing import Tuple, Optional, Dict, Any
from django.conf import settings
from django.utils.text import slugify
from django.core.files.storage import default_storage
from django.core.exceptions import ValidationError
from .models import Category, Product, ProductImage

logger = logging.getLogger(__name__)


def parse_product_sku(sku_string: str) -> Tuple[Optional[int], Optional[str]]:
    """
    üîç –ü–∞—Ä—Å–∏–Ω–≥ SKU —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è

    –§–æ—Ä–º–∞—Ç: "2.Acura MDX I" ‚Üí category_sku=2, product_name="Acura MDX I"

    Args:
        sku_string: –°—Ç—Ä–æ–∫–∞ SKU –∏–∑ Excel (–∫–æ–ª–æ–Ω–∫–∞ B)

    Returns:
        Tuple[category_sku, product_name] –∏–ª–∏ (None, None) –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π

    Examples:
        >>> parse_product_sku("2.Acura MDX I")
        (2, "Acura MDX I")

        >>> parse_product_sku("10.BMW 3 —Å–µ—Ä–∏—è")
        (10, "BMW 3 —Å–µ—Ä–∏—è")

        >>> parse_product_sku("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        (None, None)
    """

    if not sku_string or not isinstance(sku_string, str):
        logger.warning(f"üö´ –ü—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π SKU: {sku_string}")
        return None, None

    # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ—á–∫–∏
    if '.' not in sku_string:
        logger.warning(f"üö´ SKU –±–µ–∑ —Ç–æ—á–∫–∏: {sku_string}")
        return None, None

    try:
        # üìù –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–µ
        parts = sku_string.split('.', 1)

        if len(parts) != 2:
            logger.warning(f"üö´ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç SKU: {sku_string}")
            return None, None

        # üî¢ –ü–∞—Ä—Å–∏–º –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_sku_str = parts[0].strip()
        if not category_sku_str.isdigit():
            logger.warning(f"üö´ SKU –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ —á–∏—Å–ª–æ: {category_sku_str}")
            return None, None

        category_sku = int(category_sku_str)

        # üìù –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        product_name = parts[1].strip()
        if not product_name:
            logger.warning(f"üö´ –ü—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ SKU: {sku_string}")
            return None, None

        logger.debug(f"‚úÖ –†–∞—Å–ø–∞—Ä—Å–µ–Ω SKU: {sku_string} ‚Üí –∫–∞—Ç–µ–≥–æ—Ä–∏—è={category_sku}, —Ç–æ–≤–∞—Ä='{product_name}'")
        return category_sku, product_name

    except (ValueError, IndexError) as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ SKU '{sku_string}': {e}")
        return None, None


def validate_excel_row(row_data: Dict[str, Any]) -> Tuple[bool, list]:
    """
    ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∏ Excel

    Args:
        row_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Å—Ç—Ä–æ–∫–∏ {column_name: value}

    Returns:
        Tuple[is_valid, errors_list]

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
    - –ù–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ —Ü–µ–Ω—ã
    - –î–ª–∏–Ω—É —Å—Ç—Ä–æ–∫
    """

    errors = []

    # üìã –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    required_fields = {
        '–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞': 'product_sku',
        '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞': 'product_name',
        '–¶–µ–Ω–∞': 'price'
    }

    # üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    for excel_col, field_name in required_fields.items():
        value = row_data.get(excel_col)
        if not value or (isinstance(value, str) and not value.strip()):
            errors.append(f"–ü–æ–ª–µ '{excel_col}' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")

    # üí∞ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã
    price_value = row_data.get('–¶–µ–Ω–∞')
    if price_value is not None:
        try:
            # üßπ –û—á–∏—Å—Ç–∫–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            if isinstance(price_value, str):
                price_clean = re.sub(r'[^\d,.]', '', price_value)
                price_clean = price_clean.replace(',', '.')
            else:
                price_clean = str(price_value)

            price_float = float(price_clean)
            if price_float < 0:
                errors.append(f"–¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π: {price_float}")
            elif price_float > 999999:
                errors.append(f"–¶–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è: {price_float}")

        except (ValueError, TypeError):
            errors.append(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞: {price_value}")

    # üìè –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Å—Ç—Ä–æ–∫
    string_limits = {
        '–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞': 50,
        '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞': 100,
        'Title —Å—Ç—Ä–∞–Ω–∏—Ü—ã': 200,
        'Meta-–æ–ø–∏—Å–∞–Ω–∏–µ': 500
    }

    for field_name, max_length in string_limits.items():
        value = row_data.get(field_name)
        if value and isinstance(value, str) and len(value) > max_length:
            errors.append(f"–ü–æ–ª–µ '{field_name}' —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. {max_length} —Å–∏–º–≤–æ–ª–æ–≤)")

    # üîç –í–∞–ª–∏–¥–∞—Ü–∏—è SKU —Ç–æ–≤–∞—Ä–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º)
    product_sku = row_data.get('–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞')
    if product_sku:
        existing_product = Product.objects.filter(product_sku=product_sku).first()
        if existing_product:
            logger.info(f"‚ÑπÔ∏è –¢–æ–≤–∞—Ä —Å SKU '{product_sku}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω")

    is_valid = len(errors) == 0
    return is_valid, errors


def get_or_create_category_by_sku(category_sku: int, category_name: str) -> Category:
    """
    üìÇ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ SKU

    Args:
        category_sku: –ù–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è

    Returns:
        Category: –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∏–ª–∏ –Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    """

    try:
        # üîç –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category = Category.objects.get(category_sku=category_sku)
        logger.debug(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category.category_name} (SKU: {category_sku})")
        return category

    except Category.DoesNotExist:
        # üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        logger.info(f"üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é: SKU={category_sku}, –Ω–∞–∑–≤–∞–Ω–∏–µ='{category_name}'")

        category = Category.objects.create(
            category_sku=category_sku,
            category_name=category_name,
            slug=slugify(category_name),
            is_active=True,
            display_order=0
        )

        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category.category_name} (ID: {category.id})")
        return category


def process_product_image(product: Product, image_filename: str) -> bool:
    """
    üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞

    Args:
        product: –û–±—ä–µ–∫—Ç —Ç–æ–≤–∞—Ä–∞
        image_filename: –ò–º—è —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Excel

    Returns:
        bool: True –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ

    –õ–æ–≥–∏–∫–∞:
    1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ media/product/
    2. –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–æ–≤—ã–π ‚Üí —Å–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    3. –ï—Å–ª–∏ —É —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ ‚Üí —Å–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ
    4. –ï—Å–ª–∏ –≥–ª–∞–≤–Ω–æ–µ –µ—Å—Ç—å ‚Üí –Ω–µ —Ç—Ä–æ–≥–∞–µ—Ç
    5. –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å ‚Üí –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç
    """

    if not image_filename or not isinstance(image_filename, str):
        logger.warning(f"üö´ –ü—É—Å—Ç–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product.product_name}")
        return False

    # üßπ –û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    image_filename = image_filename.strip()

    # üìÅ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_path = os.path.join('product', image_filename)
    full_image_path = os.path.join(settings.MEDIA_ROOT, image_path)

    # üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    if not os.path.exists(full_image_path):
        logger.warning(f"üìÅ –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {full_image_path}")
        return False

    # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É —Ç–æ–≤–∞—Ä–∞
    existing_image = product.product_images.filter(
        image__icontains=image_filename
    ).first()

    if existing_image:
        logger.info(f"‚ÑπÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ '{image_filename}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —É —Ç–æ–≤–∞—Ä–∞ {product.product_name}")
        return True

    # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    has_main_image = product.has_main_image()

    if has_main_image:
        logger.info(f"‚ÑπÔ∏è –£ —Ç–æ–≤–∞—Ä–∞ {product.product_name} —É–∂–µ –µ—Å—Ç—å –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return True

    try:
        # üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        product_image = ProductImage.objects.create(
            product=product,
            image=image_path,
            is_main=True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∫ –≥–ª–∞–≤–Ω–æ–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        )

        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product.product_name}: {image_filename}")
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product.product_name}: {e}")
        return False


def clean_price_value(price_value: Any) -> int:
    """
    üí∞ –û—á–∏—Å—Ç–∫–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –≤ integer

    Args:
        price_value: –ó–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏–∑ Excel (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ —á–∏—Å–ª–æ–º)

    Returns:
        int: –û—á–∏—â–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞

    Raises:
        ValueError: –ï—Å–ª–∏ —Ü–µ–Ω—É –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å
    """

    if price_value is None or price_value == '':
        return 0

    # üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    if isinstance(price_value, str):
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä, —Ç–æ—á–µ–∫ –∏ –∑–∞–ø—è—Ç—ã—Ö
        price_clean = re.sub(r'[^\d,.]', '', price_value.strip())
        # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É
        price_clean = price_clean.replace(',', '.')
    else:
        price_clean = str(price_value)

    try:
        price_float = float(price_clean)
        return int(price_float)  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ int –∫–∞–∫ –≤ –º–æ–¥–µ–ª–∏
    except (ValueError, TypeError) as e:
        raise ValueError(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ü–µ–Ω—É '{price_value}': {e}")


def generate_product_slug(product_name: str, product_sku: str = None) -> str:
    """
    üîó –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ slug –¥–ª—è —Ç–æ–≤–∞—Ä–∞

    Args:
        product_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        product_sku: SKU —Ç–æ–≤–∞—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

    Returns:
        str: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π slug
    """

    # üéØ –ë–∞–∑–æ–≤—ã–π slug –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
    base_slug = slugify(product_name)

    # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
    if not Product.objects.filter(slug=base_slug).exists():
        return base_slug

    # üî¢ –ï—Å–ª–∏ –Ω–µ —É–Ω–∏–∫–∞–ª–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º SKU
    if product_sku:
        sku_slug = f"{base_slug}-{slugify(product_sku)}"
        if not Product.objects.filter(slug=sku_slug).exists():
            return sku_slug

    # üî¢ –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ —É–Ω–∏–∫–∞–ª–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä
    counter = 1
    while True:
        numbered_slug = f"{base_slug}-{counter}"
        if not Product.objects.filter(slug=numbered_slug).exists():
            return numbered_slug
        counter += 1


def log_import_operation(operation_type: str, details: str, level: str = 'info'):
    """
    üìù –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –∏–º–ø–æ—Ä—Ç–∞

    Args:
        operation_type: –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ (create, update, error, skip)
        details: –î–µ—Ç–∞–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
        level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (info, warning, error)
    """

    emoji_map = {
        'create': 'üÜï',
        'update': 'üîÑ',
        'error': '‚ùå',
        'skip': '‚è≠Ô∏è',
        'success': '‚úÖ'
    }

    emoji = emoji_map.get(operation_type, 'üìù')
    message = f"{emoji} {operation_type.upper()}: {details}"

    if level == 'error':
        logger.error(message)
    elif level == 'warning':
        logger.warning(message)
    else:
        logger.info(message)


# üîß –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ö–û–ù–°–¢–ê–ù–¢–´
EXCEL_COLUMN_MAPPING = {
    'A': '–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞',
    'B': '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
    'C': 'Title —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
    'D': '–¶–µ–Ω–∞',
    'E': '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
    'F': '–ú–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏–µ',
    'G': '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
}

REQUIRED_COLUMNS = ['–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', '–¶–µ–Ω–∞']


# üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ú–ü–û–†–¢–ê (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ)
class ImportStats:
    """üìä –ö–ª–∞—Å—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–º–ø–æ—Ä—Ç–∞"""

    def __init__(self):
        self.total_rows = 0
        self.processed_rows = 0
        self.created_count = 0
        self.updated_count = 0
        self.error_count = 0
        self.skipped_count = 0
        self.errors = []
        self.success_log = []

    def add_error(self, row_num: int, error_msg: str):
        """‚ùå –î–æ–±–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É"""
        self.error_count += 1
        self.errors.append(f"–°—Ç—Ä–æ–∫–∞ {row_num}: {error_msg}")
        log_import_operation('error', f"–°—Ç—Ä–æ–∫–∞ {row_num}: {error_msg}", 'error')

    def add_success(self, row_num: int, operation: str, item_name: str):
        """‚úÖ –î–æ–±–∞–≤–∏—Ç—å —É—Å–ø–µ—à–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"""
        if operation == 'create':
            self.created_count += 1
        elif operation == 'update':
            self.updated_count += 1

        message = f"–°—Ç—Ä–æ–∫–∞ {row_num}: {operation} '{item_name}'"
        self.success_log.append(message)
        log_import_operation(operation, message)

    def add_skip(self, row_num: int, reason: str):
        """‚è≠Ô∏è –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫"""
        self.skipped_count += 1
        message = f"–°—Ç—Ä–æ–∫–∞ {row_num}: –ø—Ä–æ–ø—É—â–µ–Ω–∞ - {reason}"
        self.errors.append(message)
        log_import_operation('skip', message, 'warning')

    def get_summary(self) -> Dict[str, Any]:
        """üìä –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        return {
            'total_rows': self.total_rows,
            'processed_rows': self.processed_rows,
            'created_count': self.created_count,
            'updated_count': self.updated_count,
            'error_count': self.error_count,
            'skipped_count': self.skipped_count,
            'success_rate': round((self.created_count + self.updated_count) / max(self.total_rows, 1) * 100, 2),
            'errors': self.errors[:50],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –≤ –≤—ã–≤–æ–¥–µ
            'success_log': self.success_log[:50]
        }