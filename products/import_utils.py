# üìÅ products/import_utils.py
# üõ†Ô∏è –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –≤–µ—Ä—Å–∏—è —É—Ç–∏–ª–∏—Ç –∏–º–ø–æ—Ä—Ç–∞ —Å –¥–≤–æ–π–Ω–æ–π –ª–æ–≥–∏–∫–æ–π (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ + —Ç–æ–≤–∞—Ä—ã)
# ‚úÖ –£—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É: —Å—Ç—Ä–æ–∫–∏ —Å —Ç–æ—á–∫–æ–π = –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –±–µ–∑ —Ç–æ—á–∫–∏ = —Ç–æ–≤–∞—Ä—ã

import logging
import openpyxl
from typing import Dict, List, Tuple, Optional, Union
from decimal import Decimal, InvalidOperation
from django.core.files.uploadedfile import InMemoryUploadedFile
import re

logger = logging.getLogger(__name__)

# üóÇÔ∏è –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫ Excel (–æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Ç–æ–≤–∞—Ä–æ–≤)
EXCEL_COLUMN_MAPPING = {
    'identifier': 0,  # A: –ö–∞—Ç–µ–≥–æ—Ä–∏—è (1.BMW) –∏–ª–∏ SKU —Ç–æ–≤–∞—Ä–∞ (10001)
    'name': 1,  # B: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ —Ç–æ–≤–∞—Ä–∞
    'title': 2,  # C: Title —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    'price': 3,  # D: –¶–µ–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤, —É –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—É—Å—Ç–∞—è)
    'description': 4,  # E: –û–ø–∏—Å–∞–Ω–∏–µ
    'meta_description': 5,  # F: –ú–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏–µ
    'image': 6  # G: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
}

# üìã –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
REQUIRED_FIELDS = ['identifier', 'name']

# üéØ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –¥–ª–∏–Ω—ã –ø–æ–ª–µ–π
FIELD_LIMITS = {
    'identifier': 50,
    'name': 200,
    'title': 70,
    'price': None,  # –ß–∏—Å–ª–æ–≤–æ–µ –ø–æ–ª–µ
    'description': None,  # –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –¥–ª—è CKEditor
    'meta_description': 160,
    'image': 255
}


def read_excel_file(file: InMemoryUploadedFile) -> Tuple[bool, Union[List[Dict], str]]:
    """
    üìä –ß—Ç–µ–Ω–∏–µ Excel —Ñ–∞–π–ª–∞ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–æ–≤–∞—Ä—ã

    Args:
        file: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π Excel —Ñ–∞–π–ª

    Returns:
        Tuple[bool, Union[List[Dict], str]]: (success, data_or_error)
    """
    try:
        logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {file.name}")

        # üìñ –ó–∞–≥—Ä—É–∂–∞–µ–º Excel —Ñ–∞–π–ª
        workbook = openpyxl.load_workbook(file, data_only=True)
        worksheet = workbook.active

        # üìè –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ç–∞–±–ª–∏—Ü—ã
        max_row = worksheet.max_row
        max_col = worksheet.max_column

        logger.info(f"üìä –†–∞–∑–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã: {max_row} —Å—Ç—Ä–æ–∫, {max_col} –∫–æ–ª–æ–Ω–æ–∫")

        if max_row < 2:
            return False, "‚ùå –§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å—Ç—Ä–æ–∫–∏ (–∑–∞–≥–æ–ª–æ–≤–æ–∫ + –¥–∞–Ω–Ω—ã–µ)"

        # üìã –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—è —Å–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫)
        data = []

        for row_num in range(2, max_row + 1):
            try:
                # üîç –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —è—á–µ–µ–∫
                row_data = {}

                # üìù –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–∞–∂–¥–æ–π —è—á–µ–π–∫–∏
                for field_name, col_index in EXCEL_COLUMN_MAPPING.items():
                    cell_value = None

                    if col_index < max_col:
                        cell = worksheet.cell(row=row_num, column=col_index + 1)  # +1 —Ç–∞–∫ –∫–∞–∫ Excel 1-based
                        cell_value = cell.value

                    # üßπ –û—á–∏—Å—Ç–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
                    if cell_value is not None:
                        if isinstance(cell_value, str):
                            cell_value = cell_value.strip()
                            if not cell_value:
                                cell_value = None

                    row_data[field_name] = cell_value

                # üö´ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
                if not row_data.get('identifier'):
                    logger.warning(f"‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ {row_num}: –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–Ω–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞)")
                    continue

                # üéØ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Ç—Ä–æ–∫–∏: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏–ª–∏ —Ç–æ–≤–∞—Ä
                identifier = str(row_data['identifier']).strip()
                is_category = '.' in identifier

                row_data['row_number'] = row_num
                row_data['is_category'] = is_category

                if is_category:
                    # üìÇ –≠—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è - –∏–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                    row_data['category_name'] = extract_category_name(identifier)
                    row_data['type'] = 'category'
                else:
                    # üõçÔ∏è –≠—Ç–æ —Ç–æ–≤–∞—Ä - —Å–æ—Ö—Ä–∞–Ω—è–µ–º SKU
                    row_data['sku'] = identifier
                    row_data['type'] = 'product'

                data.append(row_data)

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ {row_num}: {str(e)}")
                continue

        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ {len(data)} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö")
        return True, data

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}"
        logger.error(error_msg)
        return False, error_msg


def extract_category_name(category_identifier: str) -> str:
    """
    üìÇ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å—Ç–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞

    –ü—Ä–∏–º–µ—Ä—ã:
    - "1.BMW" -> "BMW"
    - "2.Acura" -> "Acura"
    - "sky.BMW" -> "BMW"

    Args:
        category_identifier: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Ç–æ—á–∫–æ–π

    Returns:
        str: –ß–∏—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    """
    try:
        # üîç –ë–µ—Ä—ë–º —á–∞—Å—Ç—å –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–æ—á–∫–∏
        parts = category_identifier.split('.')
        if len(parts) >= 2:
            category_name = parts[-1].strip().upper()
            return category_name if category_name else '–¢–û–í–ê–†–´'

        return category_identifier.strip().upper()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ '{category_identifier}': {e}")
        return '–¢–û–í–ê–†–´'


def validate_row(row_data: Dict) -> Tuple[bool, List[str]]:
    """
    ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏ (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ —Ç–æ–≤–∞—Ä–∞)

    Args:
        row_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Å—Ç—Ä–æ–∫–∏

    Returns:
        Tuple[bool, List[str]]: (is_valid, list_of_errors)
    """
    errors = []

    try:
        # üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        for field in REQUIRED_FIELDS:
            if not row_data.get(field):
                errors.append(f"‚ùå –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ '{field}' –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ")

        # üìè –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
        for field, max_length in FIELD_LIMITS.items():
            if max_length and row_data.get(field):
                value = str(row_data[field])
                if len(value) > max_length:
                    errors.append(f"‚ö†Ô∏è –ü–æ–ª–µ '{field}' —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ ({len(value)}/{max_length})")

        # üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã - —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
        if row_data.get('type') == 'product':
            price_value = row_data.get('price')
            if price_value is not None:
                try:
                    normalized_price = normalize_price(price_value)
                    if normalized_price < 0:
                        errors.append(f"‚ùå –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π: {normalized_price}")
                    elif normalized_price > 999999:
                        errors.append(f"‚ö†Ô∏è –¶–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è: {normalized_price}")
                except Exception:
                    errors.append(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞: {price_value}")

        # üé® –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if row_data.get('image'):
            image_name = str(row_data['image'])
            valid_extensions = ['.jpg', '.jpeg', '.png', '.gif', '.webp']
            if not any(image_name.lower().endswith(ext) for ext in valid_extensions):
                errors.append(f"‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_name}")

        # üè∑Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
        identifier = str(row_data['identifier']).strip()
        if len(identifier) > 50:
            errors.append(f"‚ùå –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π: {identifier}")

        # ‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
        name = row_data.get('name', '').strip()
        if name and len(name) < 3:
            errors.append(f"‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ: {name}")

    except Exception as e:
        errors.append(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫–∏: {e}")

    is_valid = len(errors) == 0
    return is_valid, errors


def normalize_price(price_value: Union[str, int, float, None]) -> float:
    """
    üí∞ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–Ω—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤)

    Args:
        price_value: –ó–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ

    Returns:
        float: –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ (0.0 –µ—Å–ª–∏ –ø—É—Å—Ç–∞—è)
    """
    try:
        if price_value is None or price_value == '':
            return 0.0

        if isinstance(price_value, (int, float)):
            return float(price_value)

        if isinstance(price_value, str):
            # üßπ –£–¥–∞–ª—è–µ–º –≤–∞–ª—é—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
            price_clean = re.sub(r'[^\d.,]', '', price_value.strip())

            if not price_clean:
                return 0.0

            # üîÑ –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É
            price_clean = price_clean.replace(',', '.')

            # üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫
            if price_clean.count('.') > 1:
                parts = price_clean.split('.')
                price_clean = ''.join(parts[:-1]) + '.' + parts[-1]

            return float(price_clean)

    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ü–µ–Ω—É '{price_value}': {e}")

    return 0.0


def separate_categories_and_products(raw_data: List[Dict]) -> Tuple[List[Dict], List[Dict], List[Dict]]:
    """
    üîÑ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–æ–≤–∞—Ä—ã —Å –ø—Ä–∏–≤—è–∑–∫–æ–π

    Args:
        raw_data: –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel

    Returns:
        Tuple[List[Dict], List[Dict], List[Dict]]: (categories, products, invalid_data)
    """
    categories = []
    products = []
    invalid_data = []
    current_category = None

    for row in raw_data:
        try:
            # ‚úÖ –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É
            is_valid, errors = validate_row(row)

            if not is_valid:
                row['errors'] = errors
                invalid_data.append(row)
                continue

            if row['is_category']:
                # üìÇ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                category_data = {
                    'category_name': row['category_name'],
                    'name': row.get('name', ''),
                    'title': row.get('title', ''),
                    'description': row.get('description', ''),
                    'meta_description': row.get('meta_description', ''),
                    'image': row.get('image', ''),
                    'row_number': row.get('row_number', 0)
                }

                categories.append(category_data)
                current_category = row['category_name']  # üíæ –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é

            else:
                # üõçÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä
                if not current_category:
                    # ‚ö†Ô∏è –¢–æ–≤–∞—Ä –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - —Å–æ–∑–¥–∞—ë–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é
                    current_category = '–¢–û–í–ê–†–´'

                product_data = {
                    'sku': row['sku'],
                    'name': row.get('name', ''),
                    'title': row.get('title', ''),
                    'price': normalize_price(row.get('price')),
                    'description': row.get('description', ''),
                    'meta_description': row.get('meta_description', ''),
                    'image': row.get('image', ''),
                    'category_name': current_category,  # üîó –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    'row_number': row.get('row_number', 0)
                }

                products.append(product_data)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ {row.get('row_number', '?')}: {e}")
            row['errors'] = [f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}"]
            invalid_data.append(row)

    logger.info(f"‚úÖ –†–∞–∑–¥–µ–ª–µ–Ω–æ: {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π, {len(products)} —Ç–æ–≤–∞—Ä–æ–≤, {len(invalid_data)} –æ—à–∏–±–æ–∫")

    return categories, products, invalid_data


def get_import_statistics(categories: List[Dict], products: List[Dict], invalid_data: List[Dict]) -> Dict:
    """
    üìä –ü–æ–¥—Å—á—ë—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–º–ø–æ—Ä—Ç–∞ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–æ–≤–∞—Ä—ã
    """
    try:
        category_names = set(cat['category_name'] for cat in categories)
        products_with_images = sum(1 for prod in products if prod.get('image'))
        products_with_prices = sum(1 for prod in products if prod.get('price', 0) > 0)

        return {
            'total_rows': len(categories) + len(products) + len(invalid_data),
            'categories_count': len(categories),
            'products_count': len(products),
            'invalid_rows': len(invalid_data),
            'category_names': list(category_names),
            'products_with_images': products_with_images,
            'products_with_prices': products_with_prices,
            'categories_with_images': sum(1 for cat in categories if cat.get('image')),
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á—ë—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {}

# üöÄ –û–°–ù–û–í–ù–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø:
# ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å—Ç—Ä–æ–∫–∏ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è/—Ç–æ–≤–∞—Ä) –ø–æ –Ω–∞–ª–∏—á–∏—é —Ç–æ—á–∫–∏
# ‚úÖ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ categories –∏ products —Å –ø—Ä–∏–≤—è–∑–∫–æ–π
# ‚úÖ –û—Ç–¥–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π (—Ü–µ–Ω–∞ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞)
# ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ "1.BMW" -> "BMW"
# ‚úÖ –ó–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
# ‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö