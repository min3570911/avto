# üìÅ products/import_utils.py
# üõ†Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è —É—Ç–∏–ª–∏—Ç –∏–º–ø–æ—Ä—Ç–∞ —Å –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π SKU
# ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è generate_sku_for_product()
# üîß –ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø –≤–∞–ª–∏–¥–∞—Ü–∏—è - –ø—Ä–∏–Ω–∏–º–∞–µ–º –ø–æ—á—Ç–∏ –ª—é–±—ã–µ –¥–∞–Ω–Ω—ã–µ

import logging
import openpyxl
from typing import Dict, List, Tuple, Optional, Union
from decimal import Decimal, InvalidOperation
from django.core.files.uploadedfile import InMemoryUploadedFile
import re

logger = logging.getLogger(__name__)

# üóÇÔ∏è –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫ Excel (–æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Ç–æ–≤–∞—Ä–æ–≤)
EXCEL_COLUMN_MAPPING = {
    'identifier': 0,  # A: –ö–∞—Ç–µ–≥–æ—Ä–∏—è (1.BMW) –∏–ª–∏ SKU —Ç–æ–≤–∞—Ä–∞ (10001)
    'name': 1,  # B: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ —Ç–æ–≤–∞—Ä–∞
    'title': 2,  # C: Title —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    'price': 3,  # D: –¶–µ–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤, —É –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—É—Å—Ç–∞—è)
    'description': 4,  # E: –û–ø–∏—Å–∞–Ω–∏–µ
    'meta_description': 5,  # F: –ú–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏–µ
    'image': 6  # G: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
}

# üìã –£–ü–†–û–©–ï–ù–ù–´–ï —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
REQUIRED_FIELDS = ['identifier']  # ‚úÖ –¢–æ–ª—å–∫–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω


def read_excel_file(file: InMemoryUploadedFile) -> Tuple[bool, Union[List[Dict], str]]:
    """
    üìä –ß—Ç–µ–Ω–∏–µ Excel —Ñ–∞–π–ª–∞ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–æ–≤–∞—Ä—ã

    Args:
        file: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π Excel —Ñ–∞–π–ª

    Returns:
        Tuple[bool, Union[List[Dict], str]]: (success, data_or_error)
    """
    try:
        logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {file.name}")

        # üìñ –ó–∞–≥—Ä—É–∂–∞–µ–º Excel —Ñ–∞–π–ª
        workbook = openpyxl.load_workbook(file, data_only=True)
        worksheet = workbook.active

        # üìè –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ç–∞–±–ª–∏—Ü—ã
        max_row = worksheet.max_row
        max_col = worksheet.max_column

        logger.info(f"üìä –†–∞–∑–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã: {max_row} —Å—Ç—Ä–æ–∫, {max_col} –∫–æ–ª–æ–Ω–æ–∫")

        if max_row < 2:
            return False, "‚ùå –§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å—Ç—Ä–æ–∫–∏ (–∑–∞–≥–æ–ª–æ–≤–æ–∫ + –¥–∞–Ω–Ω—ã–µ)"

        # üìã –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—è —Å–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫)
        data = []

        for row_num in range(2, max_row + 1):
            try:
                # üîç –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —è—á–µ–µ–∫
                row_data = {}

                # üìù –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–∞–∂–¥–æ–π —è—á–µ–π–∫–∏
                for field_name, col_index in EXCEL_COLUMN_MAPPING.items():
                    cell_value = None

                    if col_index < max_col:
                        cell = worksheet.cell(row=row_num, column=col_index + 1)  # +1 —Ç–∞–∫ –∫–∞–∫ Excel 1-based
                        cell_value = cell.value

                    # üßπ –û—á–∏—Å—Ç–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
                    if cell_value is not None:
                        if isinstance(cell_value, str):
                            cell_value = cell_value.strip()
                            if not cell_value:
                                cell_value = None

                    row_data[field_name] = cell_value

                # üö´ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
                if not row_data.get('identifier'):
                    logger.warning(f"‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ {row_num}: –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–Ω–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞)")
                    continue

                # üéØ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Ç—Ä–æ–∫–∏: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏–ª–∏ —Ç–æ–≤–∞—Ä
                identifier = str(row_data['identifier']).strip()
                is_category = '.' in identifier

                row_data['row_number'] = row_num
                row_data['is_category'] = is_category

                if is_category:
                    # üìÇ –≠—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è - –∏–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                    row_data['category_name'] = extract_category_name(identifier)
                    row_data['type'] = 'category'
                else:
                    # üõçÔ∏è –≠—Ç–æ —Ç–æ–≤–∞—Ä - —Å–æ—Ö—Ä–∞–Ω—è–µ–º SKU
                    row_data['sku'] = identifier
                    row_data['type'] = 'product'

                data.append(row_data)

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ {row_num}: {str(e)}")
                continue

        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ {len(data)} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö")
        return True, data

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}"
        logger.error(error_msg)
        return False, error_msg


def extract_category_name(category_identifier: str) -> str:
    """
    üìÇ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å—Ç–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞

    –ü—Ä–∏–º–µ—Ä—ã:
    - "1.BMW" -> "BMW"
    - "2.Acura" -> "Acura"
    - "sky.BMW" -> "BMW"

    Args:
        category_identifier: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Ç–æ—á–∫–æ–π

    Returns:
        str: –ß–∏—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    """
    try:
        # üîç –ë–µ—Ä—ë–º —á–∞—Å—Ç—å –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–æ—á–∫–∏
        parts = category_identifier.split('.')
        if len(parts) >= 2:
            category_name = parts[-1].strip().upper()
            return category_name if category_name else '–¢–û–í–ê–†–´'

        return category_identifier.strip().upper()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ '{category_identifier}': {e}")
        return '–¢–û–í–ê–†–´'


def extract_category_sku(category_identifier: str) -> int:
    """
    üî¢ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ SKU –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞

    –ü—Ä–∏–º–µ—Ä—ã:
    - "1.BMW" -> 1
    - "2.Acura" -> 2
    - "10.Mercedes" -> 10

    Args:
        category_identifier: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Ç–æ—á–∫–æ–π

    Returns:
        int: SKU –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1)
    """
    try:
        # üîç –ë–µ—Ä—ë–º —á–∞—Å—Ç—å –¥–æ –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏
        parts = category_identifier.split('.')
        if len(parts) >= 2:
            sku_part = parts[0].strip()

            # üî¢ –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ
            if sku_part.isdigit():
                return int(sku_part)

        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å SKU –∏–∑ '{category_identifier}', –∏—Å–ø–æ–ª—å–∑—É–µ–º 1")
        return 1

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è SKU –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ '{category_identifier}': {e}")
        return 1


def generate_sku_for_product(category_sku: int, existing_products_in_category: List[Dict]) -> str:
    """
    üÜï –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è SKU –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –ø–æ —Ñ–æ—Ä–º—É–ª–µ

    –§–æ—Ä–º—É–ª–∞: category_sku * 10000 + –ø–æ—Ä—è–¥–∫–æ–≤—ã–π_–Ω–æ–º–µ—Ä_–≤_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    –ü—Ä–∏–º–µ—Ä—ã:
    - –ö–∞—Ç–µ–≥–æ—Ä–∏—è BMW (sku=1): —Ç–æ–≤–∞—Ä—ã –ø–æ–ª—É—á–∞—Ç 10001, 10002, 10003...
    - –ö–∞—Ç–µ–≥–æ—Ä–∏—è Acura (sku=2): —Ç–æ–≤–∞—Ä—ã –ø–æ–ª—É—á–∞—Ç 20001, 20002, 20003...

    Args:
        category_sku: SKU –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (1, 2, 3...)
        existing_products_in_category: –°–ø–∏—Å–æ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    Returns:
        str: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SKU —Ç–æ–≤–∞—Ä–∞
    """
    try:
        # üî¢ –ë–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: category_sku * 10000
        base_sku = category_sku * 10000

        # üîç –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —Å—Ä–µ–¥–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
        max_sequence = 0

        for product in existing_products_in_category:
            product_sku = product.get('sku', '')

            # üéØ –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –∏–∑ SKU
            if isinstance(product_sku, (str, int)):
                try:
                    sku_int = int(product_sku)

                    # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ SKU –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –Ω–∞—à–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    if base_sku <= sku_int < (base_sku + 10000):
                        sequence = sku_int - base_sku
                        max_sequence = max(max_sequence, sequence)

                except (ValueError, TypeError):
                    continue

        # üìà –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä
        next_sequence = max_sequence + 1

        # üéØ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π SKU
        generated_sku = base_sku + next_sequence

        logger.info(
            f"üÜï –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω SKU: {generated_sku} (–∫–∞—Ç–µ–≥–æ—Ä–∏—è {category_sku}, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å {next_sequence})")

        return str(generated_sku)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SKU –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_sku}: {e}")

        # üö® Fallback: –ø—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
        fallback_sku = category_sku * 10000 + 1
        return str(fallback_sku)


def validate_row(row_data: Dict) -> Tuple[bool, List[str]]:
    """
    ‚úÖ –£–ü–†–û–©–ï–ù–ù–ê–Ø –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏ (—Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏)

    Args:
        row_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Å—Ç—Ä–æ–∫–∏

    Returns:
        Tuple[bool, List[str]]: (is_valid, list_of_errors)
    """
    errors = []

    try:
        # üîç –ï–î–ò–ù–°–¢–í–ï–ù–ù–ê–Ø –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –Ω–∞–ª–∏—á–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
        identifier = row_data.get('identifier')
        if not identifier:
            errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä (–∫–æ–ª–æ–Ω–∫–∞ A)")
            return False, errors

        # ‚úÖ –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è (–±–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π)
        # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ - –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º, –Ω–µ –∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # üí∞ –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã (—Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏)
        if row_data.get('type') == 'product':
            price_value = row_data.get('price')
            if price_value is not None:
                try:
                    normalized_price = normalize_price(price_value)
                    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω—ã - –ø–æ–∑–≤–æ–ª—è–µ–º –ª—é–±—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                except Exception as e:
                    # –¢–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º
                    logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ü–µ–Ω–æ–π '{price_value}' –¥–ª—è {identifier}: {e}")

    except Exception as e:
        # üõ°Ô∏è –ö—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞ - –±–ª–æ–∫–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ —Å–æ–≤—Å–µ–º —Å–ª–æ–º–∞–Ω–æ
        errors.append(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}")
        logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫–∏: {e}")

    is_valid = len(errors) == 0
    return is_valid, errors


def normalize_price(price_value: Union[str, int, float, None]) -> float:
    """
    üí∞ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–Ω—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤)

    Args:
        price_value: –ó–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ

    Returns:
        float: –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ (0.0 –µ—Å–ª–∏ –ø—É—Å—Ç–∞—è)
    """
    try:
        if price_value is None or price_value == '':
            return 0.0

        if isinstance(price_value, (int, float)):
            return float(price_value)

        if isinstance(price_value, str):
            # üßπ –£–¥–∞–ª—è–µ–º –≤–∞–ª—é—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
            price_clean = re.sub(r'[^\d.,]', '', price_value.strip())

            if not price_clean:
                return 0.0

            # üîÑ –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É
            price_clean = price_clean.replace(',', '.')

            # üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫
            if price_clean.count('.') > 1:
                parts = price_clean.split('.')
                price_clean = ''.join(parts[:-1]) + '.' + parts[-1]

            return float(price_clean)

    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ü–µ–Ω—É '{price_value}': {e}")

    return 0.0


def separate_categories_and_products(raw_data: List[Dict]) -> Tuple[List[Dict], List[Dict], List[Dict]]:
    """
    üîÑ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π SKU

    üìã –õ–û–ì–ò–ö–ê:
    - –ß–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑
    - –°—Ç—Ä–æ–∫–∞ —Å —Ç–æ—á–∫–æ–π ‚Üí –∫–∞—Ç–µ–≥–æ—Ä–∏—è (–∑–∞–ø–æ–º–∏–Ω–∞–µ–º –∫–∞–∫ current_category)
    - –°—Ç—Ä–æ–∫–∞ –±–µ–∑ —Ç–æ—á–∫–∏ ‚Üí —Ç–æ–≤–∞—Ä (–ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ current_category + –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º SKU –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)

    Args:
        raw_data: –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel

    Returns:
        Tuple[List[Dict], List[Dict], List[Dict]]: (categories, products, invalid_data)
    """
    categories = []
    products = []
    invalid_data = []
    current_category = None  # üíæ –ü–æ—Å–ª–µ–¥–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    current_category_sku = 1  # üî¢ SKU —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    products_in_current_category = []  # üì¶ –¢–æ–≤–∞—Ä—ã –≤ —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SKU)

    logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π SKU {len(raw_data)} —Å—Ç—Ä–æ–∫...")

    for row in raw_data:
        try:
            # ‚úÖ –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É
            is_valid, errors = validate_row(row)

            if not is_valid:
                row['errors'] = errors
                invalid_data.append(row)
                logger.warning(f"‚ùå –°—Ç—Ä–æ–∫–∞ {row.get('row_number', '?')}: –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
                continue

            if row['is_category']:
                # üìÇ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                category_name = row['category_name']

                # üî¢ –ù–û–í–û–ï: –ò–∑–≤–ª–µ–∫–∞–µ–º SKU –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
                category_identifier = str(row['identifier']).strip()
                current_category_sku = extract_category_sku(category_identifier)

                category_data = {
                    'category_name': category_name,
                    'category_sku': current_category_sku,  # üÜï –î–æ–±–∞–≤–ª—è–µ–º SKU –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    'name': row.get('name', ''),
                    'title': row.get('title', ''),
                    'description': row.get('description', ''),
                    'meta_description': row.get('meta_description', ''),
                    'image': row.get('image', ''),
                    'row_number': row.get('row_number', 0)
                }

                categories.append(category_data)
                current_category = category_name  # üíæ –ó–ê–ü–û–ú–ò–ù–ê–ï–ú –∫–∞–∫ —Ç–µ–∫—É—â—É—é
                products_in_current_category = []  # üîÑ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

                logger.info(
                    f"üìÇ –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {current_category} (SKU: {current_category_sku}, —Å—Ç—Ä–æ–∫–∞ {row.get('row_number', '?')})")

            else:
                # üõçÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä
                if not current_category:
                    # ‚ö†Ô∏è –¢–æ–≤–∞—Ä –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - —Å–æ–∑–¥–∞—ë–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é
                    current_category = '–¢–û–í–ê–†–´'
                    current_category_sku = 1
                    logger.warning(f"‚ö†Ô∏è –¢–æ–≤–∞—Ä –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é: {current_category}")

                original_sku = row['sku']

                # üÜï –ê–í–¢–û–ì–ï–ù–ï–†–ê–¶–ò–Ø SKU –µ—Å–ª–∏ –æ–Ω –ø—É—Å—Ç–æ–π
                if not original_sku or original_sku == '':
                    generated_sku = generate_sku_for_product(current_category_sku, products_in_current_category)
                    final_sku = generated_sku
                    logger.info(f"üÜï –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω SKU: {final_sku} –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {current_category}")
                else:
                    final_sku = str(original_sku).strip()
                    logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π SKU: {final_sku}")

                product_data = {
                    'sku': final_sku,  # üéØ –§–∏–Ω–∞–ª—å–Ω—ã–π SKU (–∏—Å—Ö–æ–¥–Ω—ã–π –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
                    'original_sku': original_sku,  # üìù –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π SKU –∏–∑ Excel (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
                    'name': row.get('name', ''),
                    'title': row.get('title', ''),
                    'price': normalize_price(row.get('price')),
                    'description': row.get('description', ''),
                    'meta_description': row.get('meta_description', ''),
                    'image': row.get('image', ''),
                    'category_name': current_category,  # üîó –ü–†–ò–í–Ø–ó–´–í–ê–ï–ú –∫ —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    'category_sku': current_category_sku,  # üîó SKU –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    'row_number': row.get('row_number', 0)
                }

                products.append(product_data)
                products_in_current_category.append(product_data)  # üì¶ –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–µ–¥—É—é—â–∏—Ö SKU

                logger.info(
                    f"üõçÔ∏è –¢–æ–≤–∞—Ä {final_sku} ‚Üí –∫–∞—Ç–µ–≥–æ—Ä–∏—è {current_category} (—Å—Ç—Ä–æ–∫–∞ {row.get('row_number', '?')})")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ {row.get('row_number', '?')}: {e}")
            row['errors'] = [f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}"]
            invalid_data.append(row)

    # üìä –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    used_categories = set(p['category_name'] for p in products if p.get('category_name'))
    existing_categories = set(cat['category_name'] for cat in categories)
    missing_categories = used_categories - existing_categories

    for missing_cat in missing_categories:
        categories.append({
            'category_name': missing_cat,
            'category_sku': 1,  # üî¢ –î–µ—Ñ–æ–ª—Ç–Ω—ã–π SKU –¥–ª—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            'name': '',
            'title': '',
            'description': '',
            'meta_description': '',
            'image': '',
            'row_number': 0
        })
        logger.info(f"üÜï –°–æ–∑–¥–∞–Ω–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {missing_cat} (SKU: 1)")

    logger.info(
        f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π SKU –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π, {len(products)} —Ç–æ–≤–∞—Ä–æ–≤, {len(invalid_data)} –æ—à–∏–±–æ–∫")

    return categories, products, invalid_data


def get_import_statistics(categories: List[Dict], products: List[Dict], invalid_data: List[Dict]) -> Dict:
    """
    üìä –ü–æ–¥—Å—á—ë—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–º–ø–æ—Ä—Ç–∞ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–æ–≤–∞—Ä—ã
    """
    try:
        category_names = set(cat['category_name'] for cat in categories)
        products_with_images = sum(1 for prod in products if prod.get('image'))
        products_with_prices = sum(1 for prod in products if prod.get('price', 0) > 0)

        # üÜï –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ SKU
        products_with_sku = sum(1 for prod in products if prod.get('sku'))
        auto_generated_sku = sum(1 for prod in products if not prod.get('original_sku'))

        return {
            'total_rows': len(categories) + len(products) + len(invalid_data),
            'categories_count': len(categories),
            'products_count': len(products),
            'invalid_rows': len(invalid_data),
            'category_names': list(category_names),
            'products_with_images': products_with_images,
            'products_with_prices': products_with_prices,
            'categories_with_images': sum(1 for cat in categories if cat.get('image')),
            'products_with_sku': products_with_sku,  # üÜï –¢–æ–≤–∞—Ä—ã —Å SKU
            'auto_generated_sku': auto_generated_sku,  # üÜï –ê–≤—Ç–æ—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ SKU
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á—ë—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {}

# üîß –ù–û–í–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
# ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: extract_category_sku() - –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ SKU –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
# ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: generate_sku_for_product() - –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è SKU –ø–æ —Ñ–æ—Ä–º—É–ª–µ
# ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: separate_categories_and_products() - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SKU
# ‚úÖ –£–õ–£–ß–®–ï–ù–û: get_import_statistics() - –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ SKU
# ‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢: –¢–æ–≤–∞—Ä—ã –ø–æ–ª—É—á–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ SKU, –Ω–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤