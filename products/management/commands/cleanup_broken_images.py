# üìÅ products/management/commands/cleanup_broken_images.py
# üßπ Django –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –±–∏—Ç—ã—Ö –Ω–µ–≥–ª–∞–≤–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

import os
import logging
from django.core.management.base import BaseCommand, CommandError
from django.conf import settings
from django.db import transaction
from products.models import ProductImage, Category
from common.models import Color
from django.utils import timezone


class Command(BaseCommand):
    """
    üßπ –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏—è –±–∏—Ç—ã—Ö –Ω–µ–≥–ª–∞–≤–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –¥–∏—Å–∫–µ –∏ —É–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å–∏ –∏–∑ –ë–î,
    –∫–æ—Ç–æ—Ä—ã–µ —Å—Å—ã–ª–∞—é—Ç—Å—è –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã.

    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python manage.py cleanup_broken_images
    python manage.py cleanup_broken_images --dry-run  # üëÅÔ∏è –¢–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    python manage.py cleanup_broken_images --check-all  # üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ —Ç–∏–ø—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    python manage.py cleanup_broken_images --verbose  # üìù –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
    """

    help = 'üßπ –£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å–∏ –±–∏—Ç—ã—Ö –Ω–µ–≥–ª–∞–≤–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'

    def __init__(self):
        super().__init__()
        # üìä –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.stats = {
            'total_checked': 0,
            'broken_found': 0,
            'deleted': 0,
            'main_images_found': 0,
            'main_images_broken': 0,
            'categories_checked': 0,
            'categories_broken': 0,
            'colors_checked': 0,
            'colors_broken': 0,
        }

        # üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.logger = logging.getLogger(__name__)

    def add_arguments(self, parser):
        """‚ûï –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='üëÅÔ∏è –¢–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ, –Ω–µ —É–¥–∞–ª—è—Ç—å –∑–∞–ø–∏—Å–∏',
        )

        parser.add_argument(
            '--check-all',
            action='store_true',
            help='üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ —Ç–∏–ø—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—Ç–æ–≤–∞—Ä—ã, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Ü–≤–µ—Ç–∞)',
        )

        parser.add_argument(
            '--verbose',
            action='store_true',
            help='üìù –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –ø—Ä–æ—Ü–µ—Å—Å–∞',
        )

        parser.add_argument(
            '--include-main',
            action='store_true',
            help='‚ö†Ô∏è –û–ü–ê–°–ù–û: –í–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≥–ª–∞–≤–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤',
        )

    def handle(self, *args, **options):
        """üöÄ –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã"""

        # üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        dry_run = options['dry_run']
        check_all = options['check_all']
        verbose = options['verbose']
        include_main = options['include_main']

        # üõ°Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –≥–ª–∞–≤–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö
        if include_main:
            self.stdout.write(
                self.style.WARNING(
                    '‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –í–∫–ª—é—á–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–∞–≤–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤!'
                )
            )

        # üßπ –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        mode_text = "–¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú" if dry_run else "–ê–ö–¢–ò–í–ù–´–ô –†–ï–ñ–ò–ú"
        self.stdout.write(
            self.style.SUCCESS(
                f'üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –±–∏—Ç—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ({mode_text})...'
            )
        )

        # üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º MEDIA_ROOT
        if not os.path.exists(settings.MEDIA_ROOT):
            raise CommandError(f'‚ùå MEDIA_ROOT –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {settings.MEDIA_ROOT}')

        # üîç –û—Å–Ω–æ–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–µ–≥–ª–∞–≤–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤
        self._cleanup_product_images(dry_run, verbose, include_main)

        # üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ)
        if check_all:
            self._cleanup_category_images(dry_run, verbose)
            self._cleanup_color_images(dry_run, verbose)

        # üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self._print_final_statistics(dry_run)

    def _cleanup_product_images(self, dry_run: bool, verbose: bool, include_main: bool):
        """üñºÔ∏è –û—á–∏—Å—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤"""

        self.stdout.write('\nüñºÔ∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤...')

        # üîç –ü–æ–ª—É—á–∞–µ–º –Ω–µ–≥–ª–∞–≤–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∏–ª–∏ –≤—Å–µ, –µ—Å–ª–∏ include_main=True)
        if include_main:
            images_queryset = ProductImage.objects.all()
            self.stdout.write('‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –í–°–ï –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ (–≤–∫–ª—é—á–∞—è –≥–ª–∞–≤–Ω—ã–µ)')
        else:
            images_queryset = ProductImage.objects.filter(is_main=False)
            self.stdout.write('‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–≥–ª–∞–≤–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤')

        # üìä –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        total_images = images_queryset.count()
        self.stdout.write(f'üìä –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {total_images}')

        if total_images == 0:
            self.stdout.write('‚ÑπÔ∏è –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏')
            return

        # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        broken_images = []

        for i, image in enumerate(images_queryset.iterator(), 1):
            self.stats['total_checked'] += 1

            # üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            if verbose and i % 10 == 0:
                self.stdout.write(f'üìä –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {i}/{total_images}')

            # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            is_broken = self._check_image_file(image, verbose)

            if is_broken:
                broken_images.append(image)
                self.stats['broken_found'] += 1

                # üìù –û—Ç–º–µ—á–∞–µ–º –≥–ª–∞–≤–Ω—ã–µ –±–∏—Ç—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ
                if image.is_main:
                    self.stats['main_images_broken'] += 1

                if verbose:
                    main_indicator = "üåü –ì–õ–ê–í–ù–û–ï" if image.is_main else "üì∑ –æ–±—ã—á–Ω–æ–µ"
                    self.stdout.write(
                        f'‚ùå –ë–∏—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image.product.product_name} '
                        f'({main_indicator}) - {image.image.name}'
                    )

        # üíæ –£–¥–∞–ª—è–µ–º –±–∏—Ç—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω–µ dry-run)
        if broken_images:
            self.stdout.write(f'\n‚ùå –ù–∞–π–¥–µ–Ω–æ –±–∏—Ç—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(broken_images)}')

            if not dry_run:
                self._delete_broken_images(broken_images)
            else:
                self.stdout.write('üëÅÔ∏è –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ù–ï —É–¥–∞–ª–µ–Ω—ã')
        else:
            self.stdout.write('‚úÖ –ë–∏—Ç—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!')

    def _cleanup_category_images(self, dry_run: bool, verbose: bool):
        """üìÇ –û—á–∏—Å—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""

        self.stdout.write('\nüìÇ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π...')

        categories = Category.objects.exclude(category_image='')
        broken_categories = []

        for category in categories:
            self.stats['categories_checked'] += 1

            if self._check_category_image_file(category, verbose):
                broken_categories.append(category)
                self.stats['categories_broken'] += 1

                if verbose:
                    self.stdout.write(
                        f'‚ùå –ë–∏—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category.category_name} '
                        f'- {category.category_image.name}'
                    )

        # üíæ –û—á–∏—â–∞–µ–º –±–∏—Ç—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        if broken_categories:
            self.stdout.write(f'‚ùå –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –±–∏—Ç—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {len(broken_categories)}')

            if not dry_run:
                for category in broken_categories:
                    category.category_image = None
                    category.save(update_fields=['category_image'])
                    self.stats['deleted'] += 1

                self.stdout.write('‚úÖ –û—á–∏—â–µ–Ω—ã —Å—Å—ã–ª–∫–∏ –Ω–∞ –±–∏—Ç—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π')
            else:
                self.stdout.write('üëÅÔ∏è –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: —Å—Å—ã–ª–∫–∏ –ù–ï –æ—á–∏—â–µ–Ω—ã')
        else:
            self.stdout.write('‚úÖ –ë–∏—Ç—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!')

    def _cleanup_color_images(self, dry_run: bool, verbose: bool):
        """üé® –û—á–∏—Å—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ü–≤–µ—Ç–æ–≤"""

        self.stdout.write('\nüé® –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤...')

        colors = Color.objects.all()
        broken_colors = []

        for color in colors:
            self.stats['colors_checked'] += 1
            broken_fields = []

            # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º carpet_image
            if color.carpet_image and not self._file_exists(color.carpet_image.path):
                broken_fields.append('carpet_image')

            # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º border_image
            if color.border_image and not self._file_exists(color.border_image.path):
                broken_fields.append('border_image')

            if broken_fields:
                broken_colors.append((color, broken_fields))
                self.stats['colors_broken'] += 1

                if verbose:
                    fields_text = ', '.join(broken_fields)
                    self.stdout.write(
                        f'‚ùå –ë–∏—Ç—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–≤–µ—Ç–∞: {color.name} '
                        f'- –ø–æ–ª—è: {fields_text}'
                    )

        # üíæ –û—á–∏—â–∞–µ–º –±–∏—Ç—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤
        if broken_colors:
            self.stdout.write(f'‚ùå –ù–∞–π–¥–µ–Ω–æ —Ü–≤–µ—Ç–æ–≤ —Å –±–∏—Ç—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {len(broken_colors)}')

            if not dry_run:
                for color, broken_fields in broken_colors:
                    update_fields = []

                    if 'carpet_image' in broken_fields:
                        color.carpet_image = None
                        update_fields.append('carpet_image')

                    if 'border_image' in broken_fields:
                        color.border_image = None
                        update_fields.append('border_image')

                    color.save(update_fields=update_fields)
                    self.stats['deleted'] += 1

                self.stdout.write('‚úÖ –û—á–∏—â–µ–Ω—ã —Å—Å—ã–ª–∫–∏ –Ω–∞ –±–∏—Ç—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤')
            else:
                self.stdout.write('üëÅÔ∏è –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: —Å—Å—ã–ª–∫–∏ –ù–ï –æ—á–∏—â–µ–Ω—ã')
        else:
            self.stdout.write('‚úÖ –ë–∏—Ç—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ü–≤–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!')

    def _check_image_file(self, image: ProductImage, verbose: bool) -> bool:
        """üîç –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""

        # üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª–µ image –Ω–µ –ø—É—Å—Ç–æ–µ
        if not image.image:
            if verbose:
                self.stdout.write(f'‚ö†Ô∏è –ü—É—Å—Ç–æ–µ –ø–æ–ª–µ image: {image.product.product_name}')
            return True

        # üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ image.name –Ω–µ –ø—É—Å—Ç–æ–µ
        if not image.image.name:
            if verbose:
                self.stdout.write(f'‚ö†Ô∏è –ü—É—Å—Ç–æ–µ –∏–º—è —Ñ–∞–π–ª–∞: {image.product.product_name}')
            return True

        # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        return not self._file_exists(image.image.path)

    def _check_category_image_file(self, category: Category, verbose: bool) -> bool:
        """üîç –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""

        if not category.category_image or not category.category_image.name:
            return False

        return not self._file_exists(category.category_image.path)

    def _file_exists(self, file_path: str) -> bool:
        """üìÅ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞"""

        try:
            return os.path.exists(file_path) and os.path.isfile(file_path)
        except (OSError, TypeError, ValueError) as e:
            # üìù –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
            self.logger.warning(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}')
            return False

    @transaction.atomic
    def _delete_broken_images(self, broken_images: list):
        """üíæ –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ—Ç –±–∏—Ç—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ë–î"""

        try:
            self.stdout.write(f'üíæ –£–¥–∞–ª—è–µ–º {len(broken_images)} –±–∏—Ç—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...')

            # üõ°Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            deleted_count = 0

            for image in broken_images:
                try:
                    # üìù –õ–æ–≥–∏—Ä—É–µ–º —á—Ç–æ —É–¥–∞–ª—è–µ–º
                    self.logger.info(
                        f'–£–¥–∞–ª—è–µ–º –±–∏—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image.product.product_name} '
                        f'- {image.image.name}'
                    )

                    image.delete()
                    deleted_count += 1

                except Exception as e:
                    self.logger.error(
                        f'‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image.id}: {e}'
                    )

            self.stats['deleted'] = deleted_count
            self.stdout.write(f'‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {deleted_count}')

        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}')
            )
            raise CommandError(f'–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –±–∏—Ç—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}')

    def _print_final_statistics(self, dry_run: bool):
        """üìä –í—ã–≤–æ–¥–∏—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã"""

        mode_text = "–¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú" if dry_run else "–í–´–ü–û–õ–ù–ï–ù–û"

        self.stdout.write(f'\nüìä === –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ({mode_text}) ===')
        self.stdout.write(f'üîç –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {self.stats["total_checked"]}')
        self.stdout.write(f'‚ùå –ù–∞–π–¥–µ–Ω–æ –±–∏—Ç—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {self.stats["broken_found"]}')

        if self.stats['main_images_broken'] > 0:
            self.stdout.write(
                self.style.WARNING(
                    f'‚ö†Ô∏è –í —Ç–æ–º —á–∏—Å–ª–µ –≥–ª–∞–≤–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {self.stats["main_images_broken"]}'
                )
            )

        # üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ —Ü–≤–µ—Ç–∞–º
        if self.stats['categories_checked'] > 0:
            self.stdout.write(f'üìÇ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {self.stats["categories_checked"]}')
            self.stdout.write(f'‚ùå –ë–∏—Ç—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {self.stats["categories_broken"]}')

        if self.stats['colors_checked'] > 0:
            self.stdout.write(f'üé® –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ü–≤–µ—Ç–æ–≤: {self.stats["colors_checked"]}')
            self.stdout.write(f'‚ùå –ë–∏—Ç—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ü–≤–µ—Ç–æ–≤: {self.stats["colors_broken"]}')

        if not dry_run:
            self.stdout.write(f'üíæ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –∏–∑ –ë–î: {self.stats["deleted"]}')

        # üéØ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if self.stats['broken_found'] == 0:
            self.stdout.write(
                self.style.SUCCESS('üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ë–∏—Ç—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!')
            )
        elif dry_run:
            self.stdout.write(
                self.style.WARNING(
                    f'üëÅÔ∏è –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –ù–∞–π–¥–µ–Ω–æ {self.stats["broken_found"]} –±–∏—Ç—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. '
                    '–ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–µ–∑ --dry-run –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.'
                )
            )
        else:
            self.stdout.write(
                self.style.SUCCESS(
                    f'‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£–¥–∞–ª–µ–Ω–æ {self.stats["deleted"]} –±–∏—Ç—ã—Ö –∑–∞–ø–∏—Å–µ–π.'
                )
            )

        # ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –≥–ª–∞–≤–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö
        if self.stats['main_images_broken'] > 0:
            self.stdout.write(
                self.style.ERROR(
                    '\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–∞–π–¥–µ–Ω—ã –±–∏—Ç—ã–µ –ì–õ–ê–í–ù–´–ï –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤!\n'
                    '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —ç—Ç–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤.\n'
                    '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: python manage.py migrate_product_images'
                )
            )

        # üìù –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        self.stdout.write(
            '\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n'
            '1. –†–µ–≥—É–ª—è—Ä–Ω–æ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —á–∏—Å—Ç–æ—Ç—ã –ë–î\n'
            '2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --dry-run –ø–µ—Ä–µ–¥ —Ä–µ–∞–ª—å–Ω—ã–º —É–¥–∞–ª–µ–Ω–∏–µ–º\n'
            '3. –î–µ–ª–∞–π—Ç–µ –±—ç–∫–∞–ø –ë–î –ø–µ—Ä–µ–¥ –º–∞—Å—Å–æ–≤—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏\n'
            '4. –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ª–æ–≥–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º'
        )

        # ‚è∞ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        self.stdout.write(f'\n‚è∞ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {timezone.now().strftime("%Y-%m-%d %H:%M:%S")}')

# üîß –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –ö–û–ú–ê–ù–î–´:
#
# 1. üëÅÔ∏è –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú (—Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å):
#    python manage.py cleanup_broken_images --dry-run
#
# 2. ‚úÖ –£–î–ê–õ–ï–ù–ò–ï –¢–û–õ–¨–ö–û –ù–ï–ì–õ–ê–í–ù–´–• –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô:
#    python manage.py cleanup_broken_images
#
# 3. üîç –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –¢–ò–ü–û–í –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô:
#    python manage.py cleanup_broken_images --check-all
#
# 4. üìù –ü–û–î–†–û–ë–ù–´–ô –í–´–í–û–î:
#    python manage.py cleanup_broken_images --verbose
#
# 5. ‚ö†Ô∏è –í–ö–õ–Æ–ß–ò–¢–¨ –ì–õ–ê–í–ù–´–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø (–û–°–¢–û–†–û–ñ–ù–û!):
#    python manage.py cleanup_broken_images --include-main --dry-run
#
# 6. üéØ –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê:
#    python manage.py cleanup_broken_images --check-all --verbose
#
# üõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨:
# - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
# - –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π
# - –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
# - –û—Ç–¥–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
# - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è MEDIA_ROOT
# - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã