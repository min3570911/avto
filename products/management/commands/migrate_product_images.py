# üìÅ products/management/commands/migrate_product_images.py
# üîÑ Django –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤

import os
from django.core.management.base import BaseCommand
from django.conf import settings
from products.models import Product, ProductImage


class Command(BaseCommand):
    """
    üñºÔ∏è –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤

    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∫–∞–∫ –≥–ª–∞–≤–Ω–æ–µ (is_main=True)
    –∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–≥–ª—É—à–∫—É placeholder-product.jpg –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç

    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python manage.py migrate_product_images
    """

    help = '–ú–∏–≥—Ä–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'

    def add_arguments(self, parser):
        """‚ûï –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–æ, –Ω–æ –Ω–µ –ø—Ä–∏–º–µ–Ω—è—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è',
        )

        parser.add_argument(
            '--create-placeholder',
            action='store_true',
            help='–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª-–∑–∞–≥–ª—É—à–∫—É placeholder-product.jpg',
        )

    def handle(self, *args, **options):
        """üöÄ –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã"""

        self.stdout.write(
            self.style.SUCCESS('üñºÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤...')
        )

        # üìä –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        products_with_images = 0
        products_without_images = 0
        main_images_set = 0

        # üîç –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        products_with_imgs = Product.objects.filter(
            product_images__isnull=False
        ).distinct()

        self.stdout.write(
            f"üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {products_with_imgs.count()}"
        )

        # üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä
        for product in products_with_imgs:
            images = product.product_images.all().order_by('created_at')

            if images.exists():
                products_with_images += 1

                # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                main_image = images.filter(is_main=True).first()

                if not main_image:
                    # üéØ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –≥–ª–∞–≤–Ω–æ–µ
                    first_image = images.first()

                    if not options['dry_run']:
                        first_image.is_main = True
                        first_image.save()

                    main_images_set += 1

                    self.stdout.write(
                        f"‚úÖ –¢–æ–≤–∞—Ä '{product.product_name}': —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
                    )
                else:
                    self.stdout.write(
                        f"‚ÑπÔ∏è –¢–æ–≤–∞—Ä '{product.product_name}': –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
                    )

        # üìä –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        products_without_imgs = Product.objects.filter(
            product_images__isnull=True
        ).distinct()

        products_without_images = products_without_imgs.count()

        if products_without_images > 0:
            self.stdout.write(
                self.style.WARNING(
                    f"‚ö†Ô∏è –¢–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {products_without_images}"
                )
            )

            # üìù –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
            examples = products_without_imgs[:5]
            for product in examples:
                self.stdout.write(f"   - {product.product_name}")

            if products_without_images > 5:
                self.stdout.write(f"   ... –∏ –µ—â–µ {products_without_images - 5}")

        # üé® –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–∫–∏
        if options['create_placeholder']:
            self.create_placeholder_image()

        # üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stdout.write(
            self.style.SUCCESS('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–ò–ì–†–ê–¶–ò–ò:')
        )
        self.stdout.write(f"   üì¶ –¢–æ–≤–∞—Ä–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {products_with_images}")
        self.stdout.write(f"   üñºÔ∏è –ì–ª–∞–≤–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {main_images_set}")
        self.stdout.write(f"   ‚ö†Ô∏è –¢–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {products_without_images}")

        if options['dry_run']:
            self.stdout.write(
                self.style.WARNING('üîç –†–µ–∂–∏–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ - –∏–∑–º–µ–Ω–µ–Ω–∏—è –ù–ï –ø—Ä–∏–º–µ–Ω–µ–Ω—ã')
            )
        else:
            self.stdout.write(
                self.style.SUCCESS('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!')
            )

    def create_placeholder_image(self):
        """üé® –°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª-–∑–∞–≥–ª—É—à–∫—É –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""

        placeholder_path = os.path.join(
            settings.MEDIA_ROOT,
            'images',
            'placeholder-product.jpg'
        )

        # üìÅ –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(os.path.dirname(placeholder_path), exist_ok=True)

        if os.path.exists(placeholder_path):
            self.stdout.write("‚ÑπÔ∏è –ó–∞–≥–ª—É—à–∫–∞ placeholder-product.jpg —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return

        # üé® –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–≥–ª—É—à–∫—É (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è PIL)
        try:
            from PIL import Image, ImageDraw, ImageFont

            # üìê –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 400x300 –ø–∏–∫—Å–µ–ª–µ–π
            img = Image.new('RGB', (400, 300), color='#f8f9fa')
            draw = ImageDraw.Draw(img)

            # üìù –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç
                font = ImageFont.truetype("arial.ttf", 24)
            except:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç
                font = ImageFont.load_default()

            text = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n–Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ"

            # üéØ –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            bbox = draw.textbbox((0, 0), text, font=font)
            text_width = bbox[2] - bbox[0]
            text_height = bbox[3] - bbox[1]

            x = (400 - text_width) // 2
            y = (300 - text_height) // 2

            draw.text((x, y), text, fill='#6c757d', font=font, align='center')

            # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            img.save(placeholder_path, 'JPEG', quality=85)

            self.stdout.write(
                self.style.SUCCESS(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞: {placeholder_path}")
            )

        except ImportError:
            # üìù –ï—Å–ª–∏ PIL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ñ–∞–π–ª-–º–∞—Ä–∫–µ—Ä
            with open(placeholder_path, 'w') as f:
                f.write("# Placeholder file - replace with actual image")

            self.stdout.write(
                self.style.WARNING(
                    f"‚ö†Ô∏è PIL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª-–º–∞—Ä–∫–µ—Ä: {placeholder_path}\n"
                    f"   –ó–∞–º–µ–Ω–∏—Ç–µ –µ–≥–æ –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ-–∑–∞–≥–ª—É—à–∫—É"
                )
            )

        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≥–ª—É—à–∫–∏: {e}")
            )

    def validate_images(self):
        """üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""

        # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≥–ª–∞–≤–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        products_with_multiple_main = []

        for product in Product.objects.all():
            main_images_count = product.product_images.filter(is_main=True).count()
            if main_images_count > 1:
                products_with_multiple_main.append(product)

        if products_with_multiple_main:
            self.stdout.write(
                self.style.ERROR(
                    f"‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ç–æ–≤–∞—Ä—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≥–ª–∞–≤–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {len(products_with_multiple_main)}"
                )
            )

            for product in products_with_multiple_main[:3]:
                self.stdout.write(f"   - {product.product_name}")
        else:
            self.stdout.write("‚úÖ –í—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≥–ª–∞–≤–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

# üîß –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –ö–û–ú–ê–ù–î–´:
#
# 1. –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π:
#    python manage.py migrate_product_images --dry-run
#
# 2. –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é:
#    python manage.py migrate_product_images
#
# 3. –°–æ–∑–¥–∞—Ç—å –∑–∞–≥–ª—É—à–∫—É + –º–∏–≥—Ä–∞—Ü–∏—è:
#    python manage.py migrate_product_images --create-placeholder
#
# 4. –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç—å –∑–∞–≥–ª—É—à–∫—É:
#    python manage.py migrate_product_images --create-placeholder --dry-run