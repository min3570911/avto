# üìÅ products/models.py - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø –ë–ï–ó –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –º–æ–¥–µ–ª–µ–π
# ‚úÖ –£–î–ê–õ–ï–ù–û: ProductReview –∏ Wishlist (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ common)
# üõ•Ô∏è –°–û–•–†–ê–ù–ï–ù–û: –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ —Å –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
# ‚úÖ –í–ö–õ–Æ–ß–ï–ù–´: Category, Product, ProductImage, Coupon, Color, KitVariant

import re
from django.db import models
from base.models import BaseModel
from django.utils.text import slugify
from django.utils.html import mark_safe
from django.contrib.auth.models import User
from django_ckeditor_5.fields import CKEditor5Field
from django.db.models import Q

# üÜï –ö–†–ò–¢–ò–ß–ù–´–ô –ò–ú–ü–û–†–¢: –ö–∞—Å—Ç–æ–º–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤
from .storage import OverwriteStorage

# üè† –û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –∞–≤—Ç–æ–∫–æ–≤—Ä–∏–∫–æ–≤
class AutoCatalogDescription(BaseModel):
    """üìù –û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–∞–ª–æ–≥–∞ –∞–≤—Ç–æ–∫–æ–≤—Ä–∏–∫–æ–≤ (—Å–∏–Ω–≥–ª—Ç–æ–Ω)"""

    title = models.CharField(
        max_length=200,
        verbose_name="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–∞–ª–æ–≥–∞",
        default="–ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ –∫–æ–≤—Ä–∏–∫–∏",
        help_text="–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–∞–ª–æ–≥–∞ –∞–≤—Ç–æ–∫–æ–≤—Ä–∏–∫–æ–≤"
    )

    description = CKEditor5Field(
        verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞",
        help_text="–û—Å–Ω–æ–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –∞–≤—Ç–æ–∫–æ–≤—Ä–∏–∫–æ–≤ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º",
        config_name='blog',
        blank=True,
        null=True
    )

    # üé¨ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å YouTube
    additional_content = models.TextField(
        verbose_name="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç",
        help_text="–í—Å—Ç–∞–≤—å—Ç–µ –≥–æ—Ç–æ–≤—ã–π HTML-–∫–æ–¥ –¥–ª—è YouTube –≤–∏–¥–µ–æ –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. "
                  "–ü—Ä–∏–º–µ—Ä –¥–ª—è YouTube: "
                  '<div class="youtube-video-container" style="position: relative; width: 100%; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; background: #000; margin: 20px 0; border-radius: 8px;">'
                  '<iframe src="https://www.youtube.com/embed/VIDEO_ID" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>'
                  '</div>',
        blank=True,
        null=True
    )

    meta_description = models.TextField(
        max_length=160,
        blank=True,
        null=True,
        verbose_name="Meta Description",
        help_text="SEO –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º (–¥–æ 160 —Å–∏–º–≤–æ–ª–æ–≤)"
    )

    def convert_youtube_links(self, content):
        """üé¨ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è YouTube —Å—Å—ã–ª–æ–∫ –≤ responsive iframe"""
        if not content:
            return content

        import re
        youtube_patterns = [
            r'https?://(?:www\.)?youtube\.com/watch\?v=([a-zA-Z0-9_-]{11})(?:[&\w=]*)?',
            r'https?://youtu\.be/([a-zA-Z0-9_-]{11})(?:\?[&\w=]*)?',
            r'https?://(?:www\.)?youtube\.com/embed/([a-zA-Z0-9_-]{11})(?:\?[&\w=]*)?',
        ]

        iframe_template = '''
        <div class="youtube-video-container" style="position: relative; width: 100%%; padding-bottom: 56.25%%; height: 0; overflow: hidden; max-width: 100%%; background: #000; margin: 20px 0; border-radius: 8px;">
            <iframe src="https://www.youtube.com/embed/{}"
                    style="position: absolute; top: 0; left: 0; width: 100%%; height: 100%%;"
                    frameborder="0"
                    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                    allowfullscreen>
            </iframe>
        </div>
        '''

        for pattern in youtube_patterns:
            content = re.sub(pattern, lambda m: iframe_template.format(m.group(1)), content)

        return content

    def has_content(self):
        """üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        return bool(self.description or self.additional_content)

    def __str__(self):
        return f"üìù {self.title}"

    class Meta:
        verbose_name = "–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –∞–≤—Ç–æ–∫–æ–≤—Ä–∏–∫–æ–≤"
        verbose_name_plural = "–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –∞–≤—Ç–æ–∫–æ–≤—Ä–∏–∫–æ–≤"

    def save(self, *args, **kwargs):
        """üíæ –°–∏–Ω–≥–ª—Ç–æ–Ω –ª–æ–≥–∏–∫–∞ - —Ä–∞–∑—Ä–µ—à–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä"""
        if AutoCatalogDescription.objects.exists() and not self.pk:
            return  # üö´ –ù–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å

        # üé¨ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è YouTube —Å—Å—ã–ª–æ–∫ (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ)
        # if self.additional_content:
        #     self.additional_content = self.convert_youtube_links(self.additional_content)

        super().save(*args, **kwargs)


# üé® –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ —Ü–≤–µ—Ç–æ–≤
COLOR_TYPE_CHOICES = (
    ('carpet', '–ö–æ–≤—Ä–∏–∫'),
    ('border', '–û–∫–∞–Ω—Ç–æ–≤–∫–∞')
)

# üõ•Ô∏è –ù–û–í–û–ï: –¢–∏–ø—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∞–≤—Ç–æ/–ª–æ–¥–∫–∏
CATEGORY_TYPE_CHOICES = (
    ('cars', '–ê–≤—Ç–æ–º–æ–±–∏–ª–∏'),
    ('boats', '–õ–æ–¥–∫–∏'),
)


class Category(BaseModel):
    """üìÇ SEO-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ª–æ–¥–æ–∫"""

    # üè∑Ô∏è –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
    category_name = models.CharField(
        max_length=100,
        verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
        help_text="–û—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    )
    slug = models.SlugField(
        unique=True,
        null=True,
        blank=True,
        verbose_name="URL-–∞–¥—Ä–µ—Å",
        help_text="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    )

    # üñºÔ∏è –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–¥–∫–ª—é—á–µ–Ω–æ OverwriteStorage –¥–ª—è —Ç–æ—á–Ω—ã—Ö –∏–º—ë–Ω —Ñ–∞–π–ª–æ–≤
    category_image = models.ImageField(
        upload_to="categories",
        storage=OverwriteStorage(),  # üéØ –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï!
        verbose_name="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
        help_text="–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: 800x400 px. –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è —Å —Ç–æ—á–Ω—ã–º –∏–º–µ–Ω–µ–º"
    )

    # üÜî –°–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è
    category_sku = models.PositiveIntegerField(
        unique=True,
        null=True,
        blank=True,
        verbose_name="–ê—Ä—Ç–∏–∫—É–ª –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
        help_text="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —É—á–µ—Ç–∞"
    )
    display_order = models.PositiveIntegerField(
        default=0,
        verbose_name="–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
        help_text="–ß–µ–º –º–µ–Ω—å—à–µ —á–∏—Å–ª–æ, —Ç–µ–º –≤—ã—à–µ –≤ —Å–ø–∏—Å–∫–µ (0 = —Å–≤–µ—Ä—Ö—É)"
    )
    is_active = models.BooleanField(
        default=True,
        verbose_name="–ê–∫—Ç–∏–≤–Ω–∞",
        help_text="–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ —Å–∞–π—Ç–µ"
    )

    # üõ•Ô∏è –ù–û–í–´–ï –ü–û–õ–Ø –î–õ–Ø –õ–û–î–û–ö
    category_type = models.CharField(
        max_length=20,
        choices=CATEGORY_TYPE_CHOICES,
        default='cars',
        verbose_name="–¢–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
        help_text="–ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –∏–ª–∏ –ª–æ–¥–∫–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"
    )
    parent = models.ForeignKey(
        'self',
        null=True,
        blank=True,
        on_delete=models.CASCADE,
        related_name='children',
        verbose_name="–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
        help_text="–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–µ—Ä–∞—Ä—Ö–∏–∏: –õ–æ–¥–∫–∏ ‚Üí Hunter, Marlin..."
    )

    # üìù –ö–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–µ –ø–æ–ª—è
    description = CKEditor5Field(
        verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
        help_text="–û—Å–Ω–æ–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º",
        config_name='blog',
        blank=True,
        null=True
    )

    # üé¨ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å YouTube
    additional_content = models.TextField(
        verbose_name="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç",
        help_text="–í—Å—Ç–∞–≤—å—Ç–µ –≥–æ—Ç–æ–≤—ã–π HTML-–∫–æ–¥ –¥–ª—è YouTube –≤–∏–¥–µ–æ –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. "
                  "–ü—Ä–∏–º–µ—Ä –¥–ª—è YouTube: "
                  '<div class="youtube-video-container" style="position: relative; width: 100%; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; background: #000; margin: 20px 0; border-radius: 8px;">'
                  '<iframe src="https://www.youtube.com/embed/VIDEO_ID" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>'
                  '</div>',
        blank=True,
        null=True
    )

    # üîç SEO –ø–æ–ª—è
    page_title = models.CharField(
        max_length=70,
        blank=True,
        null=True,
        verbose_name="–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (H1)",
        help_text="–û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–¥–æ 70 —Å–∏–º–≤–æ–ª–æ–≤)"
    )
    meta_title = models.CharField(
        max_length=60,
        blank=True,
        null=True,
        verbose_name="Meta Title",
        help_text="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º (–¥–æ 60 —Å–∏–º–≤–æ–ª–æ–≤)"
    )
    meta_description = models.TextField(
        max_length=160,
        blank=True,
        null=True,
        verbose_name="Meta Description",
        help_text="–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º (–¥–æ 160 —Å–∏–º–≤–æ–ª–æ–≤)"
    )

    def convert_youtube_links(self, content):
        """üé¨ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è YouTube —Å—Å—ã–ª–æ–∫ –≤ responsive iframe"""
        if not content:
            return content

        youtube_patterns = [
            r'https?://(?:www\.)?youtube\.com/watch\?v=([a-zA-Z0-9_-]{11})',
            r'https?://youtu\.be/([a-zA-Z0-9_-]{11})',
        ]

        iframe_template = '''
        <div class="youtube-video-container">
            <iframe 
                src="https://www.youtube.com/embed/{video_id}?rel=0&modestbranding=1&showinfo=0" 
                title="YouTube video player" 
                frameborder="0" 
                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" 
                allowfullscreen>
            </iframe>
        </div>
        '''

        for pattern in youtube_patterns:
            def replace_match(match):
                video_id = match.group(1)
                return iframe_template.format(video_id=video_id).strip()

            content = re.sub(pattern, replace_match, content)

        return content

    def save(self, *args, **kwargs):
        """üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ slug, –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ SEO-–ø–æ–ª–µ–π –∏ –∫–æ–Ω–≤–µ—Ä—Å–∏—è YouTube"""
        if not self.slug:
            self.slug = slugify(self.category_name)

        if not self.category_sku:
            last_sku = Category.objects.aggregate(
                max_sku=models.Max('category_sku')
            )['max_sku']
            self.category_sku = (last_sku or 0) + 1

        if not self.page_title:
            self.page_title = self.category_name

        if not self.meta_title:
            # üõ•Ô∏è –£–õ–£–ß–®–ï–ù–û: –†–∞–∑–Ω—ã–µ –º–µ—Ç–∞-–∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞–≤—Ç–æ –∏ –ª–æ–¥–æ–∫
            if self.category_type == 'boats':
                self.meta_title = f"–≠–í–ê –∫–æ–≤—Ä–∏–∫–∏ –¥–ª—è –ª–æ–¥–æ–∫ {self.category_name}"[:60]
            else:
                self.meta_title = f"{self.category_name} - –∫—É–ø–∏—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–µ"[:60]

        if not self.meta_description:
            # üõ•Ô∏è –£–õ–£–ß–®–ï–ù–û: –†–∞–∑–Ω—ã–µ –º–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ –∏ –ª–æ–¥–æ–∫
            if self.category_type == 'boats':
                self.meta_description = f"–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≠–í–ê –∫–æ–≤—Ä–∏–∫–∏ –¥–ª—è –ª–æ–¥–æ–∫ {self.category_name.lower()}. " \
                                        f"–ó–∞—â–∏—Ç–∞ –¥–Ω–∞, –≤—ã–±–æ—Ä —Ü–≤–µ—Ç–∞, –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ë–µ–ª–∞—Ä—É—Å–∏."[:160]
            else:
                self.meta_description = f"–ë–æ–ª—å—à–æ–π –≤—ã–±–æ—Ä {self.category_name.lower()}. " \
                                        f"–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –ø–æ –ë–µ–ª–∞—Ä—É—Å–∏. –í—ã–≥–æ–¥–Ω—ã–µ —Ü–µ–Ω—ã –∏ –±—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞."[:160]

        if self.additional_content:
            self.additional_content = self.convert_youtube_links(self.additional_content)

        super(Category, self).save(*args, **kwargs)

    # üõ•Ô∏è –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ò–ï–†–ê–†–•–ò–ï–ô –õ–û–î–û–ö
    def get_root_parent(self):
        """üå≥ –ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ä–Ω–µ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–¥–ª—è –ª–æ–¥–æ–∫ —ç—Ç–æ –±—É–¥–µ—Ç '–õ–æ–¥–∫–∏')"""
        if self.parent:
            return self.parent.get_root_parent()
        return self

    def get_all_children(self):
        """üë• –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ—Ç–æ–º–∫–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        return Category.objects.filter(parent=self)

    def is_root_category(self):
        """üè† –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∫–æ—Ä–Ω–µ–≤–æ–π"""
        return self.parent is None

    def is_boat_category(self):
        """üõ•Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ª–æ–¥–æ—á–Ω–æ–π"""
        return self.category_type == 'boats'

    def is_car_category(self):
        """üöó –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–æ–π"""
        return self.category_type == 'cars'

    # ‚úÖ –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –ú–ï–¢–û–î–´ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    def get_products_count(self):
        """üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        return self.products.filter(newest_product=True).count()

    def get_active_products_count(self):
        """üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        return self.products.count()

    def get_seo_title(self):
        """üîç –ü–æ–ª—É—á–∏—Ç—å SEO-–∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        return self.meta_title or self.page_title or self.category_name

    def get_seo_description(self):
        """üìù –ü–æ–ª—É—á–∏—Ç—å SEO-–æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        return self.meta_description or f"–¢–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {self.category_name}"

    def get_display_title(self):
        """üè∑Ô∏è –ü–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
        return self.page_title or self.category_name

    def has_content(self):
        """üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        return bool(self.description or self.additional_content)

    def __str__(self) -> str:
        status = " (–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞)" if not self.is_active else ""
        # üõ•Ô∏è –£–õ–£–ß–®–ï–ù–û: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∏–µ—Ä–∞—Ä—Ö–∏—é
        type_icon = "üõ•Ô∏è" if self.category_type == 'boats' else "üöó"
        hierarchy = f" ‚Üí {self.category_name}" if self.parent else self.category_name
        return f"{type_icon} {hierarchy}{status}"

    class Meta:
        verbose_name = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
        verbose_name_plural = "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏"
        ordering = ['display_order', 'category_name']


class KitVariant(BaseModel):
    """üì¶ –ú–æ–¥–µ–ª—å –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–π —Ç–æ–≤–∞—Ä–æ–≤"""
    name = models.CharField(max_length=100, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏")
    code = models.CharField(max_length=50, unique=True, verbose_name="–°–∏–º–≤–æ–ª—å–Ω—ã–π –∫–æ–¥")
    price_modifier = models.DecimalField(max_digits=10, decimal_places=2, default=0, verbose_name="–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ü–µ–Ω—ã")
    order = models.IntegerField(default=0, verbose_name="–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏")
    image = models.ImageField(upload_to='configurations', null=True, blank=True, verbose_name="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ö–µ–º—ã")
    is_option = models.BooleanField(default=False, verbose_name="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø—Ü–∏—è")
    description = models.TextField(
        blank=True,
        verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏"
    )

    def __str__(self) -> str:
        price_info = f" (+{self.price_modifier} BYN)" if self.price_modifier > 0 else ""
        option_mark = " [–û–ü–¶–ò–Ø]" if self.is_option else ""
        return f"{self.name}{price_info}{option_mark}"

    class Meta:
        verbose_name = "–¢–∏–ø –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏"
        verbose_name_plural = "–¢–∏–ø—ã –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–π"
        ordering = ['order', 'name']


class Product(BaseModel):
    """üõçÔ∏è –û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ª–æ–¥–æ–∫"""
    product_name = models.CharField(max_length=100, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
    slug = models.SlugField(unique=True, null=True, blank=True, verbose_name="URL-–∞–¥—Ä–µ—Å")
    category = models.ForeignKey(
        Category, on_delete=models.CASCADE,
        related_name="products", verbose_name="–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
    price = models.IntegerField(verbose_name="–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞", null=True, blank=True, default=0)
    product_desription = CKEditor5Field(
        verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
        help_text="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        config_name='default'
    )
    newest_product = models.BooleanField(default=False, verbose_name="–ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä")

    # üÜï –ü–æ–ª—è –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
    product_sku = models.CharField(
        max_length=50,
        unique=True,
        null=True,
        blank=True,
        verbose_name="–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞",
        help_text="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∏ —É—á–µ—Ç–∞"
    )

    # üõ•Ô∏è –ù–û–í–´–ï –ü–û–õ–Ø –î–õ–Ø –õ–û–î–û–ö
    boat_mat_length = models.PositiveIntegerField(
        null=True,
        blank=True,
        verbose_name="–î–ª–∏–Ω–∞ –∫–æ–≤—Ä–∏–∫–∞ (—Å–º)",
        help_text="–î–ª–∏–Ω–∞ –∫–æ–≤—Ä–∏–∫–∞ –¥–ª—è –ª–æ–¥–∫–∏ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö"
    )
    boat_mat_width = models.PositiveIntegerField(
        null=True,
        blank=True,
        verbose_name="–®–∏—Ä–∏–Ω–∞ –∫–æ–≤—Ä–∏–∫–∞ (—Å–º)",
        help_text="–®–∏—Ä–∏–Ω–∞ –∫–æ–≤—Ä–∏–∫–∞ –¥–ª—è –ª–æ–¥–∫–∏ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö"
    )

    # üîç SEO –ø–æ–ª—è
    page_title = models.CharField(
        max_length=200,
        blank=True,
        null=True,
        verbose_name="–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (Title)",
        help_text="SEO –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞"
    )

    meta_description = models.TextField(
        blank=True,
        null=True,
        verbose_name="Meta Description",
        help_text="SEO –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º"
    )

    # üõ•Ô∏è –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –õ–û–î–û–ö
    def is_boat_product(self):
        """üõ•Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–æ–≤–∞—Ä –ª–æ–¥–æ—á–Ω—ã–º"""
        return self.category.category_type == 'boats'

    def is_car_product(self):
        """üöó –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–æ–≤–∞—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–º"""
        return self.category.category_type == 'cars'

    def get_mat_dimensions(self):
        """üìè –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã –∫–æ–≤—Ä–∏–∫–∞ –¥–ª—è –ª–æ–¥–æ–∫"""
        if self.is_boat_product() and self.boat_mat_length and self.boat_mat_width:
            return f"{self.boat_mat_length}√ó{self.boat_mat_width} —Å–º"
        return None

    def get_display_name_with_dimensions(self):
        """üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ (–¥–ª—è –ª–æ–¥–æ–∫)"""
        dimensions = self.get_mat_dimensions()
        if dimensions:
            return f"{self.product_name} ({dimensions})"
        return self.product_name

    def save(self, *args, **kwargs):
        """üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ slug –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        if not self.slug and self.product_name:
            self.slug = slugify(self.product_name)
        super(Product, self).save(*args, **kwargs)

    def __str__(self) -> str:
        sku_info = f" ({self.product_sku})" if self.product_sku else ""
        # üõ•Ô∏è –£–õ–£–ß–®–ï–ù–û: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –ª–æ–¥–æ–∫
        dimensions = self.get_mat_dimensions()
        dimensions_info = f" [{dimensions}]" if dimensions else ""
        return f"{self.product_name}{dimensions_info}{sku_info}"

    # ‚úÖ –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –ú–ï–¢–û–î–´ –¶–ï–ù –ò –ö–û–ú–ü–õ–ï–ö–¢–ê–¶–ò–ô
    def get_product_price_by_kit(self, kit_code='salon'):
        """üõí –ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏"""
        kit = KitVariant.objects.filter(code=kit_code).first()
        if kit:
            return float(kit.price_modifier)
        return float(self.price) if self.price else 0

    def get_salon_price(self):
        """üéØ –ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—É –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏ "–°–∞–ª–æ–Ω" –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–∞—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
        return self.get_product_price_by_kit('salon')

    def get_default_price(self):
        """üè† –ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è "–°–∞–ª–æ–Ω")"""
        return self.get_salon_price()

    def display_price(self):
        """üìä –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ü–µ–Ω—É –¥–ª—è –∞–¥–º–∏–Ω–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        price = self.get_salon_price()
        return f"{price:.0f} —Ä—É–±."

    display_price.short_description = "–¶–µ–Ω–∞"

    # üîÑ –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –†–ï–ô–¢–ò–ù–ì–ê–ú–ò –ò –û–¢–ó–´–í–ê–ú–ò (–∏—Å–ø–æ–ª—å–∑—É—é—Ç common.ProductReview)
    def get_rating(self):
        """‚≠ê –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–∑—ã–≤–æ–≤"""
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
        from django.contrib.contenttypes.models import ContentType
        try:
            from common.models import ProductReview
            ct = ContentType.objects.get_for_model(self)
            reviews = ProductReview.objects.filter(content_type=ct, object_id=self.uid)
            if reviews.count() > 0:
                total = sum(int(review.stars) for review in reviews)
                return total / reviews.count()
        except ImportError:
            pass
        return 0

    def get_reviews_count(self):
        """üìù –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤"""
        from django.contrib.contenttypes.models import ContentType
        try:
            from common.models import ProductReview
            ct = ContentType.objects.get_for_model(self)
            return ProductReview.objects.filter(content_type=ct, object_id=self.uid).count()
        except ImportError:
            pass
        return 0

    def is_new(self):
        """üÜï –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–æ–≤–∞—Ä –Ω–æ–≤—ã–º"""
        return self.newest_product

    # üñºÔ∏è –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø–ú–ò
    def get_main_image(self):
        """üñºÔ∏è –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
        return self.product_images.filter(is_main=True).first()

    def get_gallery_images(self):
        """üñºÔ∏è –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏"""
        return self.product_images.filter(is_main=False)

    def get_main_image_url(self):
        """üñºÔ∏è –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –∑–∞–≥–ª—É—à–∫–∏"""
        main_image = self.get_main_image()
        if main_image and main_image.image:
            return main_image.image.url
        return '/media/images/placeholder-product.jpg'

    def has_main_image(self):
        """‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        return self.get_main_image() is not None

    class Meta:
        verbose_name = "–¢–æ–≤–∞—Ä"
        verbose_name_plural = "–¢–æ–≤–∞—Ä—ã"
        ordering = ['-created_at', 'product_name']


class ProductImage(BaseModel):
    """üñºÔ∏è –ú–æ–¥–µ–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤ —Å OverwriteStorage"""
    product = models.ForeignKey(
        Product, on_delete=models.CASCADE,
        related_name='product_images', verbose_name="–¢–æ–≤–∞—Ä")

    # üñºÔ∏è –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–¥–∫–ª—é—á–µ–Ω–æ OverwriteStorage –¥–ª—è —Ç–æ—á–Ω—ã—Ö –∏–º—ë–Ω —Ñ–∞–π–ª–æ–≤
    image = models.ImageField(
        upload_to='product',
        storage=OverwriteStorage(),  # üéØ –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï!
        verbose_name="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
        help_text="–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è —Å —Ç–æ—á–Ω—ã–º –∏–º–µ–Ω–µ–º –±–µ–∑ —Ö–µ—à-—Å—É—Ñ—Ñ–∏–∫—Å–æ–≤"
    )

    is_main = models.BooleanField(
        default=False,
        verbose_name="–ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
        help_text="–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –∏ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–µ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ —Ç–æ–≤–∞—Ä–∞"
    )

    def img_preview(self):
        """üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω–∫–µ"""
        if self.image:
            main_badge = "üåü –ì–õ–ê–í–ù–û–ï" if self.is_main else ""
            return mark_safe(
                f'<div style="text-align: center;">'
                f'<img src="{self.image.url}" width="150" style="max-height: 150px; object-fit: contain; border-radius: 5px;"/>'
                f'<br><small style="color: #2a41e8; font-weight: bold;">{main_badge}</small>'
                f'</div>'
            )
        return "üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ"

    img_preview.short_description = "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä"

    def save(self, *args, **kwargs):
        """üíæ –õ–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if self.is_main:
            # üîÑ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ is_main —É –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            ProductImage.objects.filter(
                product=self.product,
                is_main=True
            ).exclude(pk=self.pk).update(is_main=False)

        super(ProductImage, self).save(*args, **kwargs)

    def __str__(self):
        main_info = " (–≥–ª–∞–≤–Ω–æ–µ)" if self.is_main else ""
        return f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è {self.product.product_name}{main_info}"

    class Meta:
        verbose_name = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
        verbose_name_plural = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤"
        ordering = ['created_at']


class Coupon(BaseModel):
    """üé´ –ú–æ–¥–µ–ª—å –∫—É–ø–æ–Ω–æ–≤ –∏ —Å–∫–∏–¥–æ–∫"""
    coupon_code = models.CharField(max_length=10, verbose_name="–ö–æ–¥ –∫—É–ø–æ–Ω–∞")
    is_expired = models.BooleanField(default=False, verbose_name="–ò—Å—Ç—ë–∫")
    discount_amount = models.IntegerField(default=100, verbose_name="–°—É–º–º–∞ —Å–∫–∏–¥–∫–∏")
    minimum_amount = models.IntegerField(default=500, verbose_name="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞")

    def __str__(self):
        status = "–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω" if self.is_expired else "–∞–∫—Ç–∏–≤–µ–Ω"
        return f"{self.coupon_code} (-{self.discount_amount} —Ä—É–±.) - {status}"

    def is_valid(self, order_total):
        """‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫—É–ø–æ–Ω–∞ –¥–ª—è —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞"""
        return not self.is_expired and order_total >= self.minimum_amount

    class Meta:
        verbose_name = "–ö—É–ø–æ–Ω"
        verbose_name_plural = "–ö—É–ø–æ–Ω—ã"
        ordering = ['-created_at']


class Color(BaseModel):
    """üé® –ú–æ–¥–µ–ª—å —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –∫–æ–≤—Ä–∏–∫–æ–≤ –∏ –æ–∫–∞–Ω—Ç–æ–≤–∫–∏"""
    name = models.CharField(max_length=50, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞")
    hex_code = models.CharField(
        max_length=7, verbose_name="HEX-–∫–æ–¥",
        help_text="–¶–≤–µ—Ç–æ–≤–æ–π –∫–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ #RRGGBB"
    )
    color_type = models.CharField(
        max_length=10, choices=COLOR_TYPE_CHOICES,
        default='carpet', verbose_name="–¢–∏–ø —Ü–≤–µ—Ç–∞"
    )
    display_order = models.PositiveSmallIntegerField(
        default=0, verbose_name="–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    )
    is_available = models.BooleanField(
        default=True, verbose_name="–î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞"
    )

    # üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ (—Å OverwriteStorage)
    carpet_image = models.ImageField(
        upload_to='colors/carpet',
        storage=OverwriteStorage(),
        null=True, blank=True,
        verbose_name="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–≤—Ä–∏–∫–∞",
        help_text="–î–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–≤—Ä–∏–∫–∞ —ç—Ç–æ–≥–æ —Ü–≤–µ—Ç–∞"
    )
    border_image = models.ImageField(
        upload_to='colors/border',
        storage=OverwriteStorage(),
        null=True, blank=True,
        verbose_name="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–∫–∞–Ω—Ç–æ–≤–∫–∏",
        help_text="–î–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–∫–∞–Ω—Ç–æ–≤–∫–∏ —ç—Ç–æ–≥–æ —Ü–≤–µ—Ç–∞"
    )

    def carpet_preview(self):
        """üñºÔ∏è –ü—Ä–µ–≤—å—é –∫–æ–≤—Ä–∏–∫–∞ –≤ –∞–¥–º–∏–Ω–∫–µ"""
        if self.carpet_image:
            return mark_safe(
                f'<img src="{self.carpet_image.url}" width="50" height="50" style="object-fit: cover; border-radius: 3px;"/>')
        return "üö´ –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

    def border_preview(self):
        """üñºÔ∏è –ü—Ä–µ–≤—å—é –æ–∫–∞–Ω—Ç–æ–≤–∫–∏ –≤ –∞–¥–º–∏–Ω–∫–µ"""
        if self.border_image:
            return mark_safe(
                f'<img src="{self.border_image.url}" width="50" height="50" style="object-fit: cover; border-radius: 3px;"/>')
        return "üö´ –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

    def get_image_url(self):
        """üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞"""
        if self.color_type == 'carpet' and self.carpet_image:
            return self.carpet_image.url
        elif self.color_type == 'border' and self.border_image:
            return self.border_image.url
        return ""

    def color_preview_admin(self):
        """üé® –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ü–≤–µ—Ç–Ω–æ–π –∫–≤–∞–¥—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω–∫–µ"""
        return mark_safe(
            f'<div style="width:20px; height:20px; background-color:{self.hex_code}; '
            f'border:1px solid #666; border-radius:3px; display:inline-block;"></div>'
        )

    def get_color_preview_html(self):
        """üé® HTML –ø—Ä–µ–≤—å—é —Ü–≤–µ—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏"""
        return mark_safe(
            f'<div style="width: 30px; height: 30px; background-color: {self.hex_code}; '
            f'border: 1px solid #ccc; border-radius: 3px; display: inline-block;"></div>'
        )

    def carpet_preview_admin(self):
        """üëÅÔ∏è –ü—Ä–µ–≤—å—é –∫–æ–≤—Ä–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏"""
        if self.carpet_image:
            return mark_safe(
                f'<img src="{self.carpet_image.url}" '
                f'style="width: 40px; height: 40px; object-fit: cover; border-radius: 3px;" />'
            )
        return "–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

    def border_preview_admin(self):
        """üëÅÔ∏è –ü—Ä–µ–≤—å—é –æ–∫–∞–Ω—Ç–æ–≤–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏"""
        if self.border_image:
            return mark_safe(
                f'<img src="{self.border_image.url}" '
                f'style="width: 40px; height: 40px; object-fit: cover; border-radius: 3px;" />'
            )
        return "–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

    carpet_preview.short_description = "–ü—Ä–µ–≤—å—é –∫–æ–≤—Ä–∏–∫–∞"
    border_preview.short_description = "–ü—Ä–µ–≤—å—é –æ–∫–∞–Ω—Ç–æ–≤–∫–∏"
    color_preview_admin.short_description = "–¶–≤–µ—Ç"
    carpet_preview_admin.short_description = "–ü—Ä–µ–≤—å—é –∫–æ–≤—Ä–∏–∫–∞"
    border_preview_admin.short_description = "–ü—Ä–µ–≤—å—é –æ–∫–∞–Ω—Ç–æ–≤–∫–∏"

    def __str__(self):
        availability = " (–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)" if not self.is_available else ""
        return f"{self.name} ({self.get_color_type_display()}){availability}"

    class Meta:
        verbose_name = "–¶–≤–µ—Ç"
        verbose_name_plural = "–¶–≤–µ—Ç–∞"
        ordering = ['color_type', 'display_order', 'name']