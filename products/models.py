# üìÅ products/models.py - –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ª–æ–¥–æ–∫
# üõ•Ô∏è –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–ª—è category_type, parent –¥–ª—è Category + boat_mat_length, boat_mat_width –¥–ª—è Product
# ‚úÖ –í–ö–õ–Æ–ß–ï–ù–´: –í—Å–µ –º–æ–¥–µ–ª–∏ –±–µ–∑ –æ—à–∏–±–æ–∫ (Category, Product, ProductImage, Coupon, ProductReview, Color, Wishlist)
# ‚úÖ –ü–†–û–í–ï–†–ï–ù–û: –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã, –º–µ—Ç–æ–¥—ã, –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã

import re
from django.db import models
from base.models import BaseModel
from django.utils.text import slugify
from django.utils.html import mark_safe
from django.contrib.auth.models import User
from django.core.exceptions import ValidationError
from django_ckeditor_5.fields import CKEditor5Field
from django.db.models import Q

# üÜï –ö–†–ò–¢–ò–ß–ù–´–ô –ò–ú–ü–û–†–¢: –ö–∞—Å—Ç–æ–º–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤
from .storage import OverwriteStorage


from base.models import BaseProduct
from django.contrib.contenttypes.fields import GenericRelation

class Category(BaseModel):
    """üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
    category_name = models.CharField(max_length=100, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    slug = models.SlugField(unique=True, null=True, blank=True, verbose_name="URL-–∞–¥—Ä–µ—Å")
    category_image = models.ImageField(upload_to="categories", storage=OverwriteStorage(), verbose_name="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    display_order = models.PositiveIntegerField(default=0, verbose_name="–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–Ω–∞")

    def __str__(self):
        return self.category_name

    class Meta:
        verbose_name = "–ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"
        verbose_name_plural = "–ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        ordering = ['display_order', 'category_name']
        db_table = 'products_category'


class KitVariant(BaseModel):
    """üì¶ –ú–æ–¥–µ–ª—å –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–π —Ç–æ–≤–∞—Ä–æ–≤ (—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π)"""
    name = models.CharField(max_length=100, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏")
    code = models.CharField(max_length=50, unique=True, verbose_name="–°–∏–º–≤–æ–ª—å–Ω—ã–π –∫–æ–¥")
    price_modifier = models.DecimalField(max_digits=10, decimal_places=2, default=0, verbose_name="–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ü–µ–Ω—ã")
    order = models.IntegerField(default=0, verbose_name="–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏")
    image = models.ImageField(upload_to='configurations', null=True, blank=True, verbose_name="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ö–µ–º—ã")
    is_option = models.BooleanField(default=False, verbose_name="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø—Ü–∏—è")

    def __str__(self) -> str:
        return self.name

    class Meta:
        verbose_name = "–¢–∏–ø –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏"
        verbose_name_plural = "–¢–∏–ø—ã –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–π"
        ordering = ['order', 'name']


class Product(BaseProduct):
    """üöó –¢–æ–≤–∞—Ä –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞—Å–ª–µ–¥—É–µ—Ç –æ–±—â–∏–µ –ø–æ–ª—è –æ—Ç BaseProduct)"""
    category = models.ForeignKey(
        Category,
        on_delete=models.CASCADE,
        related_name="products",
        verbose_name="–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
    )

    # –°–≤—è–∑—å —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º–∏ –æ—Ç–∑—ã–≤–∞–º–∏
    reviews = GenericRelation(
        'common.ProductReview',
        object_id_field='object_id',
        content_type_field='content_type'
    )

    # –°–≤—è–∑—å —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º –∏–∑–±—Ä–∞–Ω–Ω—ã–º
    wishlisted_by = GenericRelation(
        'common.Wishlist',
        object_id_field='object_id',
        content_type_field='content_type'
    )

    def get_rating(self):
        """‚≠ê –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–∑—ã–≤–æ–≤"""
        if self.reviews.count() > 0:
            total = sum(int(review.stars) for review in self.reviews.all())
            return total / self.reviews.count()
        return 0

    def get_reviews_count(self):
        """üìù –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤"""
        return self.reviews.count()

    def __str__(self) -> str:
        return self.product_name

    class Meta:
        verbose_name = "–ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä"
        verbose_name_plural = "–ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã"
        ordering = ['-created_at', 'product_name']
        db_table = 'products_product'


class ProductImage(BaseModel):
    """üñºÔ∏è –ú–æ–¥–µ–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤ —Å OverwriteStorage"""
    product = models.ForeignKey(
        Product, on_delete=models.CASCADE,
        related_name='product_images', verbose_name="–¢–æ–≤–∞—Ä")

    # üñºÔ∏è –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–¥–∫–ª—é—á–µ–Ω–æ OverwriteStorage –¥–ª—è —Ç–æ—á–Ω—ã—Ö –∏–º—ë–Ω —Ñ–∞–π–ª–æ–≤
    image = models.ImageField(
        upload_to='product',
        storage=OverwriteStorage(),  # üéØ –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï!
        verbose_name="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
        help_text="–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è —Å —Ç–æ—á–Ω—ã–º –∏–º–µ–Ω–µ–º –±–µ–∑ —Ö–µ—à-—Å—É—Ñ—Ñ–∏–∫—Å–æ–≤"
    )

    is_main = models.BooleanField(
        default=False,
        verbose_name="–ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
        help_text="–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –∏ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–µ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ —Ç–æ–≤–∞—Ä–∞"
    )

    def img_preview(self):
        """üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω–∫–µ"""
        if self.image:
            main_badge = "üåü –ì–õ–ê–í–ù–û–ï" if self.is_main else ""
            return mark_safe(
                f'<div style="text-align: center;">'
                f'<img src="{self.image.url}" width="150" style="max-height: 150px; object-fit: contain; border-radius: 5px;"/>'
                f'<br><small style="color: #2a41e8; font-weight: bold;">{main_badge}</small>'
                f'</div>'
            )
        return "üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ"

    img_preview.short_description = "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä"

    def save(self, *args, **kwargs):
        """üíæ –õ–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if self.is_main:
            # üîÑ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ is_main —É –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            ProductImage.objects.filter(
                product=self.product,
                is_main=True
            ).exclude(pk=self.pk).update(is_main=False)

        super(ProductImage, self).save(*args, **kwargs)

    def __str__(self):
        main_info = " (–≥–ª–∞–≤–Ω–æ–µ)" if self.is_main else ""
        return f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è {self.product.product_name}{main_info}"

    class Meta:
        verbose_name = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
        verbose_name_plural = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤"
        ordering = ['created_at']


class Coupon(BaseModel):
    """üé´ –ú–æ–¥–µ–ª—å –∫—É–ø–æ–Ω–æ–≤ –∏ —Å–∫–∏–¥–æ–∫"""
    coupon_code = models.CharField(max_length=10, verbose_name="–ö–æ–¥ –∫—É–ø–æ–Ω–∞")
    is_expired = models.BooleanField(default=False, verbose_name="–ò—Å—Ç—ë–∫")
    discount_amount = models.IntegerField(default=100, verbose_name="–°—É–º–º–∞ —Å–∫–∏–¥–∫–∏")
    minimum_amount = models.IntegerField(default=500, verbose_name="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞")

    def __str__(self):
        status = "–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω" if self.is_expired else "–∞–∫—Ç–∏–≤–µ–Ω"
        return f"{self.coupon_code} (-{self.discount_amount} —Ä—É–±.) - {status}"

    def is_valid(self, order_total):
        """‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫—É–ø–æ–Ω–∞ –¥–ª—è —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞"""
        return not self.is_expired and order_total >= self.minimum_amount

    class Meta:
        verbose_name = "–ö—É–ø–æ–Ω"
        verbose_name_plural = "–ö—É–ø–æ–Ω—ã"
        ordering = ['-created_at']







# üîß –§–ò–ù–ê–õ–¨–ù–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø –í –≠–¢–û–ú –§–ê–ô–õ–ï:
#
# ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û –≤ Category:
# - category_type (choices: cars/boats)
# - parent (ForeignKey –¥–ª—è –∏–µ—Ä–∞—Ä—Ö–∏–∏)
# - –º–µ—Ç–æ–¥—ã get_root_parent(), get_all_children(), is_boat_category()
# - —É–ª—É—á—à–µ–Ω–Ω—ã–µ SEO-—Ç–µ–∫—Å—Ç—ã –¥–ª—è –ª–æ–¥–æ–∫
# - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π __str__ —Å –∏–∫–æ–Ω–∫–∞–º–∏ —Ç–∏–ø–æ–≤
#
# ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û –≤ Product:
# - boat_mat_length (–¥–ª–∏–Ω–∞ –∫–æ–≤—Ä–∏–∫–∞)
# - boat_mat_width (—à–∏—Ä–∏–Ω–∞ –∫–æ–≤—Ä–∏–∫–∞)
# - –º–µ—Ç–æ–¥—ã is_boat_product(), get_mat_dimensions()
# - get_display_name_with_dimensions()
# - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π __str__ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏
#
# ‚úÖ –í–ö–õ–Æ–ß–ï–ù–´ –≤—Å–µ –º–æ–¥–µ–ª–∏ –ë–ï–ó –û–®–ò–ë–û–ö:
# - Category - –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ª–æ–¥–æ–∫
# - KitVariant - –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏
# - Product - —Ç–æ–≤–∞—Ä—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ª–æ–¥–æ–∫
# - ProductImage - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
# - Coupon - –∫—É–ø–æ–Ω—ã (–í–û–ó–í–†–ê–©–ï–ù–û)
# - ProductReview - –æ—Ç–∑—ã–≤—ã
# - Color - —Ü–≤–µ—Ç–∞ –∫–æ–≤—Ä–∏–∫–æ–≤
# - Wishlist - –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
#
# ‚úÖ –ü–†–û–í–ï–†–ï–ù–´:
# - –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
# - –í—Å–µ –º–µ—Ç–æ–¥—ã –ø–æ–ª–Ω—ã–µ
# - –í—Å–µ –ø–æ–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
# - –í—Å–µ Meta –∫–ª–∞—Å—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã
# - –ù–∏–∫–∞–∫–∏—Ö –æ–±—Ä–µ–∑–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
#
# üéØ –†–ï–ó–£–õ–¨–¢–ê–¢:
# - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–µ—Ä–∞—Ä—Ö–∏–∏: –õ–æ–¥–∫–∏ ‚Üí Hunter, Marlin...
# - –†–∞–∑–º–µ—Ä—ã –∫–æ–≤—Ä–∏–∫–æ–≤ –¥–ª—è –ª–æ–¥–æ–∫
# - –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∞–≤—Ç–æ/–ª–æ–¥–∫–∏ –ø–æ —Ç–∏–ø–∞–º
# - –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∏–º–ø–æ—Ä—Ç—É –ª–æ–¥–æ–∫
# - –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã –≤ home/views.py —Ä–∞–±–æ—Ç–∞—é—Ç
# - –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å