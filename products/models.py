# üìÅ products/models.py
# üõçÔ∏è –ú–æ–¥–µ–ª–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ –∞–≤—Ç–æ–∫–æ–≤—Ä–∏–∫–æ–≤
# ‚úÖ –£–î–ê–õ–ï–ù–û: ColorVariant, parent –ø–æ–ª–µ

from django.db import models
from base.models import BaseModel
from django.utils.text import slugify
from django.utils.html import mark_safe
from django.contrib.auth.models import User
from django_summernote.fields import SummernoteTextField

# üé® –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ —Ü–≤–µ—Ç–æ–≤
COLOR_TYPE_CHOICES = (
    ('carpet', '–ö–æ–≤—Ä–∏–∫'),
    ('border', '–û–∫–∞–Ω—Ç–æ–≤–∫–∞')
)


class Category(BaseModel):
    """üìÇ –ú–æ–¥–µ–ª—å –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤"""
    category_name = models.CharField(max_length=100, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    slug = models.SlugField(unique=True, null=True, blank=True, verbose_name="URL-–∞–¥—Ä–µ—Å")
    category_image = models.ImageField(upload_to="catgories", verbose_name="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

    def save(self, *args, **kwargs):
        """üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ slug –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        self.slug = slugify(self.category_name)
        super(Category, self).save(*args, **kwargs)

    def __str__(self) -> str:
        return self.category_name

    class Meta:
        verbose_name = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
        verbose_name_plural = "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏"


class KitVariant(BaseModel):
    """üì¶ –ú–æ–¥–µ–ª—å –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–π —Ç–æ–≤–∞—Ä–æ–≤"""
    name = models.CharField(max_length=100, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏")
    code = models.CharField(max_length=50, unique=True, verbose_name="–°–∏–º–≤–æ–ª—å–Ω—ã–π –∫–æ–¥")
    price_modifier = models.DecimalField(max_digits=10, decimal_places=2, default=0, verbose_name="–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ü–µ–Ω—ã")
    order = models.IntegerField(default=0, verbose_name="–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏")
    image = models.ImageField(upload_to='configurations', null=True, blank=True, verbose_name="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ö–µ–º—ã")
    is_option = models.BooleanField(default=False, verbose_name="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø—Ü–∏—è")

    def __str__(self) -> str:
        return self.name

    class Meta:
        verbose_name = "–¢–∏–ø –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏"
        verbose_name_plural = "–¢–∏–ø—ã –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–π"
        ordering = ['order', 'name']


class Product(BaseModel):
    """üõçÔ∏è –û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å —Ç–æ–≤–∞—Ä–æ–≤"""
    # üóëÔ∏è –£–î–ê–õ–ï–ù–û: parent –ø–æ–ª–µ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø—Ä–æ–µ–∫—Ç–µ)
    product_name = models.CharField(max_length=100, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
    slug = models.SlugField(unique=True, null=True, blank=True, verbose_name="URL-–∞–¥—Ä–µ—Å")
    category = models.ForeignKey(
        Category, on_delete=models.CASCADE,
        related_name="products", verbose_name="–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
    # ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: price —Ç–µ–ø–µ—Ä—å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ (null=True, blank=True)
    price = models.IntegerField(verbose_name="–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞", null=True, blank=True, default=0)
    product_desription = SummernoteTextField(
        verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
        help_text="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
    )
    newest_product = models.BooleanField(default=False, verbose_name="–ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä")

    def save(self, *args, **kwargs):
        """üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ slug –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        self.slug = slugify(self.product_name)
        super(Product, self).save(*args, **kwargs)

    def __str__(self) -> str:
        return self.product_name

    # üîß –û–°–ù–û–í–ù–û–ô –ú–ï–¢–û–î —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã –ø–æ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏
    def get_product_price_by_kit(self, kit_code='salon'):
        """
        üõí –ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏

        @param kit_code: –∫–æ–¥ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'salon'
        @return: –ø–æ–ª–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏, –∞ –Ω–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫ –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω–µ
        """
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—é –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
        kit = KitVariant.objects.filter(code=kit_code).first()
        if kit:
            return float(kit.price_modifier)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏
        # ‚ö†Ô∏è –ï—Å–ª–∏ –±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0
        return float(self.price) if self.price else 0

    # üí∞ –ù–û–í–´–ï –ú–ï–¢–û–î–´ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —à–∞–±–ª–æ–Ω–∞—Ö
    def get_salon_price(self):
        """
        üéØ –ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—É –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏ "–°–∞–ª–æ–Ω" –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–∞—Ö —Ç–æ–≤–∞—Ä–æ–≤

        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —à–∞–±–ª–æ–Ω–∞—Ö –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–µ–Ω—É —Å–∞–º–æ–π –ø–æ–ø—É–ª—è—Ä–Ω–æ–π –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏ "–°–∞–ª–æ–Ω".

        @return: —Ü–µ–Ω—É –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏ "–°–∞–ª–æ–Ω" –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ KitVariant
        """
        return self.get_product_price_by_kit('salon')

    def get_default_price(self):
        """
        üè† –ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è "–°–∞–ª–æ–Ω")

        –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –º–µ—Ç–æ–¥–∞ get_salon_price() –¥–ª—è –±–æ–ª—å—à–µ–π —è—Å–Ω–æ—Å—Ç–∏.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ.

        @return: —Ü–µ–Ω—É –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏ "–°–∞–ª–æ–Ω" –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞
        """
        return self.get_salon_price()

    def display_price(self):
        """
        üìä –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ü–µ–Ω—É –¥–ª—è –∞–¥–º–∏–Ω–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º

        –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–µ–Ω—ã –≤ Django Admin
        —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≤–∞–ª—é—Ç–æ–π –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.

        @return: –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å —Ü–µ–Ω–æ–π –≤ —Ä—É–±–ª—è—Ö
        """
        price = self.get_salon_price()
        return f"{price:.0f} —Ä—É–±."  # üîÑ –£–±–∏—Ä–∞–µ–º –¥—Ä–æ–±–Ω—É—é —á–∞—Å—Ç—å –¥–ª—è —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª

    display_price.short_description = "–¶–µ–Ω–∞ (–°–∞–ª–æ–Ω)"

    # üìä –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
    def get_rating(self):
        """‚≠ê –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–∑—ã–≤–æ–≤"""
        if self.reviews.count() > 0:
            total = sum(int(review['stars']) for review in self.reviews.values())
            return total / self.reviews.count()
        return 0

    def get_reviews_count(self):
        """üìù –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤"""
        return self.reviews.count()

    def is_new(self):
        """üÜï –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–æ–≤–∞—Ä –Ω–æ–≤—ã–º"""
        return self.newest_product

    def get_main_image(self):
        """üñºÔ∏è –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
        return self.product_images.first()

    class Meta:
        verbose_name = "–¢–æ–≤–∞—Ä"
        verbose_name_plural = "–¢–æ–≤–∞—Ä—ã"
        ordering = ['-created_at', 'product_name']


class ProductImage(BaseModel):
    """üñºÔ∏è –ú–æ–¥–µ–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤"""
    product = models.ForeignKey(
        Product, on_delete=models.CASCADE,
        related_name='product_images', verbose_name="–¢–æ–≤–∞—Ä")
    image = models.ImageField(upload_to='product', verbose_name="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

    def img_preview(self):
        """üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω–∫–µ"""
        if self.image:
            return mark_safe(
                f'<img src="{self.image.url}" width="500" style="max-height: 300px; object-fit: contain;"/>')
        return "‚Äî"

    img_preview.short_description = "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

    def __str__(self):
        return f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è {self.product.product_name}"

    class Meta:
        verbose_name = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
        verbose_name_plural = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤"
        ordering = ['created_at']


class Coupon(BaseModel):
    """üé´ –ú–æ–¥–µ–ª—å –∫—É–ø–æ–Ω–æ–≤ –∏ —Å–∫–∏–¥–æ–∫"""
    coupon_code = models.CharField(max_length=10, verbose_name="–ö–æ–¥ –∫—É–ø–æ–Ω–∞")
    is_expired = models.BooleanField(default=False, verbose_name="–ò—Å—Ç—ë–∫")
    discount_amount = models.IntegerField(default=100, verbose_name="–°—É–º–º–∞ —Å–∫–∏–¥–∫–∏")
    minimum_amount = models.IntegerField(default=500, verbose_name="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞")

    def __str__(self):
        status = "–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω" if self.is_expired else "–∞–∫—Ç–∏–≤–µ–Ω"
        return f"{self.coupon_code} (-{self.discount_amount} —Ä—É–±.) - {status}"

    def is_valid(self, order_total):
        """‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫—É–ø–æ–Ω–∞ –¥–ª—è —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞"""
        return not self.is_expired and order_total >= self.minimum_amount

    class Meta:
        verbose_name = "–ö—É–ø–æ–Ω"
        verbose_name_plural = "–ö—É–ø–æ–Ω—ã"
        ordering = ['-created_at']


class ProductReview(BaseModel):
    """üìù –ú–æ–¥–µ–ª—å –æ—Ç–∑—ã–≤–æ–≤ –æ —Ç–æ–≤–∞—Ä–∞—Ö"""
    product = models.ForeignKey(
        Product, on_delete=models.CASCADE,
        related_name='reviews', verbose_name="–¢–æ–≤–∞—Ä")
    user = models.ForeignKey(
        User, on_delete=models.CASCADE,
        related_name='reviews', verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    stars = models.IntegerField(
        default=3,
        choices=[(i, i) for i in range(1, 6)],
        verbose_name="–û—Ü–µ–Ω–∫–∞")
    content = models.TextField(
        blank=True, null=True, verbose_name="–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞")
    date_added = models.DateTimeField(
        auto_now_add=True, verbose_name="–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
    likes = models.ManyToManyField(
        User, related_name="liked_reviews",
        blank=True, verbose_name="–õ–∞–π–∫–∏")
    dislikes = models.ManyToManyField(
        User, related_name="disliked_reviews",
        blank=True, verbose_name="–î–∏–∑–ª–∞–π–∫–∏")

    def like_count(self):
        """üëç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤"""
        return self.likes.count()

    def dislike_count(self):
        """üëé –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–∑–ª–∞–π–∫–æ–≤"""
        return self.dislikes.count()

    def __str__(self):
        return f"–û—Ç–∑—ã–≤ –æ—Ç {self.user.username} –Ω–∞ {self.product.product_name} ({self.stars}‚≠ê)"

    class Meta:
        verbose_name = "–û—Ç–∑—ã–≤"
        verbose_name_plural = "–û—Ç–∑—ã–≤—ã"
        ordering = ['-date_added']
        unique_together = ('user', 'product')  # –û–¥–∏–Ω –æ—Ç–∑—ã–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ç–æ–≤–∞—Ä


class Color(BaseModel):
    """üé® –ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ –∫–æ–≤—Ä–∏–∫–æ–≤ –∏ –æ–∫–∞–Ω—Ç–æ–≤–∫–∏"""
    name = models.CharField(max_length=50, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞")
    hex_code = models.CharField(max_length=7, verbose_name="HEX-–∫–æ–¥")
    display_order = models.PositiveSmallIntegerField(default=0, verbose_name="–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")

    # –¢–∏–ø —Ü–≤–µ—Ç–∞
    color_type = models.CharField(
        max_length=10,
        choices=COLOR_TYPE_CHOICES,
        default='carpet',
        verbose_name="–¢–∏–ø –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è"
    )

    # –ü–æ–ª—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    carpet_image = models.ImageField(
        upload_to='colors/carpet',
        null=True,
        blank=True,
        verbose_name="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–æ–≤—Ä–∏–∫–∞"
    )

    border_image = models.ImageField(
        upload_to='colors/border',
        null=True,
        blank=True,
        verbose_name="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–∫–∞–Ω—Ç–æ–≤–∫–∏"
    )

    is_available = models.BooleanField(
        default=True,
        verbose_name="–î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞"
    )

    def carpet_preview(self):
        """üëÅÔ∏è –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–≤—Ä–∏–∫–∞ –≤ –∞–¥–º–∏–Ω–∫–µ"""
        if self.carpet_image:
            return mark_safe(f'<img src="{self.carpet_image.url}" height="50" style="border-radius: 4px;"/>')
        return "‚Äî"

    def border_preview(self):
        """üëÅÔ∏è –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–∫–∞–Ω—Ç–æ–≤–∫–∏ –≤ –∞–¥–º–∏–Ω–∫–µ"""
        if self.border_image:
            return mark_safe(f'<img src="{self.border_image.url}" height="50" style="border-radius: 4px;"/>')
        return "‚Äî"

    def get_image_url(self):
        """üñºÔ∏è –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ü–≤–µ—Ç–∞"""
        if self.color_type == 'carpet' and self.carpet_image:
            return self.carpet_image.url
        elif self.color_type == 'border' and self.border_image:
            return self.border_image.url
        return ""

    def color_preview_admin(self):
        """üé® –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ü–≤–µ—Ç–Ω–æ–π –∫–≤–∞–¥—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω–∫–µ"""
        return mark_safe(
            f'<div style="width:20px; height:20px; background-color:{self.hex_code}; '
            f'border:1px solid #666; border-radius:3px; display:inline-block;"></div>'
        )

    carpet_preview.short_description = "–ü—Ä–µ–≤—å—é –∫–æ–≤—Ä–∏–∫–∞"
    border_preview.short_description = "–ü—Ä–µ–≤—å—é –æ–∫–∞–Ω—Ç–æ–≤–∫–∏"
    color_preview_admin.short_description = "–¶–≤–µ—Ç"

    def __str__(self):
        availability = " (–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)" if not self.is_available else ""
        return f"{self.name} ({self.get_color_type_display()}){availability}"

    class Meta:
        verbose_name = "–¶–≤–µ—Ç"
        verbose_name_plural = "–¶–≤–µ—Ç–∞"
        ordering = ['color_type', 'display_order', 'name']


class Wishlist(BaseModel):
    """‚ù§Ô∏è –ú–æ–¥–µ–ª—å —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
    user = models.ForeignKey(
        User, on_delete=models.CASCADE,
        related_name="wishlist", verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    product = models.ForeignKey(
        Product, on_delete=models.CASCADE,
        related_name="wishlisted_by", verbose_name="–¢–æ–≤–∞—Ä")
    kit_variant = models.ForeignKey(
        KitVariant, on_delete=models.SET_NULL,
        null=True, blank=True,
        related_name="wishlist_items", verbose_name="–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è")
    carpet_color = models.ForeignKey(
        Color, on_delete=models.SET_NULL,
        null=True, blank=True,
        related_name="wishlist_carpet_items", verbose_name="–¶–≤–µ—Ç –∫–æ–≤—Ä–∏–∫–∞")
    border_color = models.ForeignKey(
        Color, on_delete=models.SET_NULL,
        null=True, blank=True,
        related_name="wishlist_border_items", verbose_name="–¶–≤–µ—Ç –æ–∫–∞–Ω—Ç–æ–≤–∫–∏")
    has_podpyatnik = models.BooleanField(default=False, verbose_name="–° –ø–æ–¥–ø—è—Ç–Ω–∏–∫–æ–º")
    added_on = models.DateTimeField(auto_now_add=True, verbose_name="–î–æ–±–∞–≤–ª–µ–Ω–æ")

    def get_total_price(self):
        """üí∞ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º"""
        total = 0.0

        if self.kit_variant:
            total += float(self.kit_variant.price_modifier)

        if self.has_podpyatnik:
            # –ò—â–µ–º –æ–ø—Ü–∏—é –ø–æ–¥–ø—è—Ç–Ω–∏–∫
            podpyatnik = KitVariant.objects.filter(code='podpyatnik', is_option=True).first()
            if podpyatnik:
                total += float(podpyatnik.price_modifier)

        return total

    def __str__(self) -> str:
        kit_info = self.kit_variant.name if self.kit_variant else "–ë–µ–∑ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏"
        return f'{self.user.username} - {self.product.product_name} - {kit_info}'

    class Meta:
        unique_together = ('user', 'product', 'kit_variant')
        verbose_name = "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"
        verbose_name_plural = "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"
        ordering = ['-added_on']


# üóëÔ∏è –ü–û–õ–ù–û–°–¢–¨–Æ –£–î–ê–õ–ï–ù–û:
# - class ColorVariant (—É—Å—Ç–∞—Ä–µ–≤—à–∞—è –º–æ–¥–µ–ª—å)
# - –ø–æ–ª–µ parent –≤ –º–æ–¥–µ–ª–∏ Product (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)

# ‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–Ø:
# - –ü–æ–ª–µ price –≤ Product —Ç–µ–ø–µ—Ä—å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ (null=True, blank=True)
# - –î–æ–±–∞–≤–ª–µ–Ω default=0 –¥–ª—è –ø–æ–ª—è price
# - –û–±–Ω–æ–≤–ª–µ–Ω –º–µ—Ç–æ–¥ get_product_price_by_kit() –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç–æ–π —Ü–µ–Ω—ã