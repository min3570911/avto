# üìÅ products/templatetags/category_filters.py
# üîß Template —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —É–º–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π

import re
from django import template
from django.utils.html import strip_tags
from django.utils.safestring import mark_safe

register = template.Library()


@register.filter
def smart_truncate_sentences(value, count=3):
    """
    üìù –£–º–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ N –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    Args:
        value: HTML-–∫–æ–Ω—Ç–µ–Ω—Ç
        count: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3)

    Returns:
        HTML —Å N –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    if not value:
        return ""

    try:
        count = int(count)
    except (ValueError, TypeError):
        count = 3

    # üßπ –û—á–∏—â–∞–µ–º –æ—Ç —Ç–µ–≥–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    clean_text = strip_tags(value)

    # üîç –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Ç–æ—á–∫–∞–º
    sentences = re.split(r'(?<=[.!?])\s+', clean_text.strip())

    # üìè –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ N –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    if len(sentences) <= count:
        return mark_safe(value)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç –µ—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –º–∞–ª–æ

    # üéØ –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é, –≥–¥–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—Ä–µ–∑ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º HTML
    target_sentences = sentences[:count]
    target_text = ' '.join(target_sentences)

    # üìç –ò—â–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–æ–Ω—Ü–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ HTML
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–æ—á–∫—É –∏–∑ —Ü–µ–ª–µ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    last_sentence = target_sentences[-1]

    # üîç –ò—â–µ–º —ç—Ç—É —Ç–æ—á–∫—É –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º HTML
    html_lower = value.lower()
    last_sentence_lower = last_sentence.lower()

    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ HTML
    sentence_pos = html_lower.find(last_sentence_lower)
    if sentence_pos == -1:
        # Fallback: –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –±–µ—Ä–µ–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ
        target_length = len(target_text)
        return mark_safe(value[:target_length] + '...')

    # üìç –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (—Ç–æ—á–∫—É) –ø–æ—Å–ª–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
    sentence_end_search_start = sentence_pos + len(last_sentence_lower)
    dot_pos = value.find('.', sentence_end_search_start)

    if dot_pos == -1:
        dot_pos = sentence_end_search_start
    else:
        dot_pos += 1  # –í–∫–ª—é—á–∞–µ–º —Ç–æ—á–∫—É

    # ‚úÇÔ∏è –û–±—Ä–µ–∑–∞–µ–º HTML –¥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
    truncated_html = value[:dot_pos]

    # üîß –ó–∞–∫—Ä—ã–≤–∞–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ HTML —Ç–µ–≥–∏
    truncated_html = close_unclosed_tags(truncated_html)

    return mark_safe(truncated_html)


@register.filter
def mobile_truncate_sentences(value, count=2):
    """
    üì± –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è truncate - –º–µ–Ω—å—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π

    Args:
        value: HTML-–∫–æ–Ω—Ç–µ–Ω—Ç
        count: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2)
    """
    return smart_truncate_sentences(value, count)


def close_unclosed_tags(html):
    """
    üîß –ó–∞–∫—Ä—ã—Ç–∏–µ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö HTML —Ç–µ–≥–æ–≤ –ø–æ—Å–ª–µ –æ–±—Ä–µ–∑–∫–∏

    Args:
        html: –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–π HTML

    Returns:
        HTML —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã–º–∏ —Ç–µ–≥–∞–º–∏
    """
    if not html:
        return html

    # üè∑Ô∏è –¢–µ–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∑–∞–∫—Ä—ã–≤–∞—Ç—å (–Ω–µ —Å–∞–º–æ–∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è)
    closing_tags = ['p', 'div', 'span', 'strong', 'b', 'em', 'i', 'u', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'ul', 'ol',
                    'li', 'blockquote']

    # üìö –°—Ç–µ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–µ–≥–æ–≤
    open_tags = []

    # üîç –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ç–µ–≥–∏ –≤ HTML
    tag_pattern = r'<(/?)([a-zA-Z][a-zA-Z0-9]*)[^>]*>'
    matches = re.finditer(tag_pattern, html)

    for match in matches:
        is_closing = bool(match.group(1))  # –≥—Ä—É–ø–ø–∞ 1 —Å–æ–¥–µ—Ä–∂–∏—Ç "/" –¥–ª—è –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Ç–µ–≥–æ–≤
        tag_name = match.group(2).lower()

        if tag_name in closing_tags:
            if is_closing:
                # üîö –ó–∞–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥ - —É–±–∏—Ä–∞–µ–º –∏–∑ —Å—Ç–µ–∫–∞
                if tag_name in open_tags:
                    open_tags.remove(tag_name)
            else:
                # üîõ –û—Ç–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥ - –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ç–µ–∫
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å–∞–º–æ–∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π—Å—è —Ç–µ–≥
                if not match.group(0).endswith('/>'):
                    open_tags.append(tag_name)

    # üîê –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    closing_tags_html = ''
    for tag in reversed(open_tags):
        closing_tags_html += f'</{tag}>'

    return html + closing_tags_html


@register.filter
def has_youtube_video(value):
    """
    üé¨ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è YouTube –≤–∏–¥–µ–æ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ

    Args:
        value: HTML-–∫–æ–Ω—Ç–µ–Ω—Ç

    Returns:
        True –µ—Å–ª–∏ –µ—Å—Ç—å YouTube iframe
    """
    if not value:
        return False

    return 'youtube.com/embed' in value or 'youtube-video-container' in value


@register.filter
def extract_text_content(value):
    """
    üìù –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –±–µ–∑ HTML —Ç–µ–≥–æ–≤

    Args:
        value: HTML-–∫–æ–Ω—Ç–µ–Ω—Ç

    Returns:
        –ß–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç
    """
    if not value:
        return ""

    return strip_tags(value)


@register.filter
def word_count(value):
    """
    üî¢ –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ

    Args:
        value: HTML-–∫–æ–Ω—Ç–µ–Ω—Ç

    Returns:
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
    """
    if not value:
        return 0

    clean_text = strip_tags(value)
    words = clean_text.split()
    return len(words)


@register.filter
def reading_time(value, wpm=200):
    """
    ‚è±Ô∏è –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞

    Args:
        value: HTML-–∫–æ–Ω—Ç–µ–Ω—Ç
        wpm: —Å–ª–æ–≤ –≤ –º–∏–Ω—É—Ç—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 200)

    Returns:
        –í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö
    """
    if not value:
        return 0

    try:
        wpm = int(wpm)
    except (ValueError, TypeError):
        wpm = 200

    word_count_val = word_count(value)
    minutes = word_count_val / wpm
    return max(1, round(minutes))  # –ú–∏–Ω–∏–º—É–º 1 –º–∏–Ω—É—Ç–∞


@register.simple_tag
def category_preview_sentences(category, device='desktop'):
    """
    üñ•Ô∏èüì± –£–º–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—å—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞

    Args:
        category: –æ–±—ä–µ–∫—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        device: 'desktop' –∏–ª–∏ 'mobile'

    Returns:
        HTML –ø—Ä–µ–≤—å—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    """
    if not category.description:
        return ""

    # üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    sentences_count = 2 if device == 'mobile' else 3

    return smart_truncate_sentences(category.description, sentences_count)


@register.inclusion_tag('products/partials/category_content.html')
def render_category_content(category):
    """
    üìÑ –†–µ–Ω–¥–µ—Ä –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω

    Args:
        category: –æ–±—ä–µ–∫—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    Returns:
        –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–±–ª–æ–Ω–∞ partials/category_content.html
    """
    return {
        'category': category,
        'has_description': bool(category.description),
        'has_additional_content': bool(category.additional_content),
        'has_video': has_youtube_video(category.additional_content) if category.additional_content else False,
        'total_words': word_count(category.description) + word_count(category.additional_content or ''),
        'reading_time': reading_time(category.description or '' + category.additional_content or ''),
    }

# üîß –°–û–ó–î–ê–ù–ù–´–ï –§–ò–õ–¨–¢–†–´:
# ‚úÖ smart_truncate_sentences - —É–º–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å HTML
# ‚úÖ mobile_truncate_sentences - –º–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
# ‚úÖ close_unclosed_tags - –∑–∞–∫—Ä—ã—Ç–∏–µ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–µ–≥–æ–≤ –ø–æ—Å–ª–µ –æ–±—Ä–µ–∑–∫–∏
# ‚úÖ has_youtube_video - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è YouTube –≤–∏–¥–µ–æ
# ‚úÖ extract_text_content - –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
# ‚úÖ word_count - –ø–æ–¥—Å—á–µ—Ç —Å–ª–æ–≤
# ‚úÖ reading_time - –≤—Ä–µ–º—è —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
# ‚úÖ category_preview_sentences - —É–º–Ω–æ–µ –ø—Ä–µ–≤—å—é –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
# ‚úÖ render_category_content - inclusion tag –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞