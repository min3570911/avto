# üìÅ products/views.py - –ü–û–õ–ù–´–ô –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –§–ê–ô–õ —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º
# üõçÔ∏è –í—Å–µ view-—Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –≤–∫–ª—é—á–∞—è –∫–∞—Ç–∞–ª–æ–≥

import random
from django.shortcuts import render, redirect, get_object_or_404
from django.http import HttpResponseRedirect, JsonResponse
from django.contrib import messages
from django.urls import reverse
from django.contrib.auth.decorators import login_required
from django.core.paginator import Paginator
from django.db.models import Q

from products.models import Product, KitVariant, ProductReview, Wishlist, Color, Category
from accounts.models import Cart, CartItem
from .forms import ReviewForm


# üè† –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤
def products_catalog(request):
    """
    üõçÔ∏è –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤

    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É.
    """
    # üîç –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    search_query = request.GET.get('search', '')
    sort_by = request.GET.get('sort', '-created_at')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏
    category_filter = request.GET.get('category', '')

    # üì¶ –ë–∞–∑–æ–≤—ã–π queryset - —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã (–±–µ–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)
    products = Product.objects.filter(parent=None).select_related('category').prefetch_related('product_images')

    # üîç –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–∏—Å–∫
    if search_query:
        products = products.filter(
            Q(product_name__icontains=search_query) |
            Q(product_desription__icontains=search_query) |
            Q(category__category_name__icontains=search_query)
        )

    # üìÇ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if category_filter:
        products = products.filter(category__slug=category_filter)

    # üìä –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    sort_options = {
        'name': 'product_name',
        '-name': '-product_name',
        'price': 'price',
        '-price': '-price',
        'newest': '-created_at',
        'oldest': 'created_at',
    }

    if sort_by in sort_options:
        products = products.order_by(sort_options[sort_by])
    else:
        products = products.order_by('-created_at')

    # üìÑ –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    paginator = Paginator(products, 12)  # 12 —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    # üìÇ –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
    categories = Category.objects.all().order_by('category_name')

    # üéØ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã (–¥–ª—è —Å–∞–π–¥–±–∞—Ä–∞)
    popular_products = Product.objects.filter(
        parent=None,
        newest_product=True
    ).order_by('-created_at')[:4]

    context = {
        'page_obj': page_obj,
        'products': page_obj.object_list,
        'categories': categories,
        'popular_products': popular_products,
        'search_query': search_query,
        'sort_by': sort_by,
        'category_filter': category_filter,
        'total_products': paginator.count,

        # üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        'products_count': paginator.count,
        'current_page': page_obj.number,
        'total_pages': paginator.num_pages,
    }

    return render(request, 'products/catalog.html', context)


# üìÇ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –¢–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
def products_by_category(request, category_slug):
    """
    üìÇ –¢–æ–≤–∞—Ä—ã –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.
    """
    # üìÇ –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ 404
    category = get_object_or_404(Category, slug=category_slug)

    # üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    sort_by = request.GET.get('sort', '-created_at')
    search_query = request.GET.get('search', '')

    # üì¶ –¢–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    products = Product.objects.filter(
        category=category,
        parent=None
    ).select_related('category').prefetch_related('product_images')

    # üîç –ü–æ–∏—Å–∫ –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if search_query:
        products = products.filter(
            Q(product_name__icontains=search_query) |
            Q(product_desription__icontains=search_query)
        )

    # üìä –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    sort_options = {
        'name': 'product_name',
        '-name': '-product_name',
        'price': 'price',
        '-price': '-price',
        'newest': '-created_at',
        'oldest': 'created_at',
    }

    if sort_by in sort_options:
        products = products.order_by(sort_options[sort_by])
    else:
        products = products.order_by('-created_at')

    # üìÑ –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    paginator = Paginator(products, 12)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    # üìÇ –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    categories = Category.objects.all().order_by('category_name')

    context = {
        'category': category,
        'page_obj': page_obj,
        'products': page_obj.object_list,
        'categories': categories,
        'search_query': search_query,
        'sort_by': sort_by,
        'total_products': paginator.count,

        # üìä –ú–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        'current_page': page_obj.number,
        'total_pages': paginator.num_pages,
    }

    return render(request, 'products/category.html', context)


# üõçÔ∏è –°–£–©–ï–°–¢–í–£–Æ–©–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–æ–≤–∞—Ä–∞ (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)
def get_product(request, slug):
    """
    üõçÔ∏è –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–æ–≤, –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏ –∏ –æ–ø—Ü–∏–π

    –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–≤–∞—Ä –ø–æ —Å–ª–∞–≥—É –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ:
    - –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏, —Ü–≤–µ—Ç–æ–≤, –æ–ø—Ü–∏–π
    - —Ü–µ–Ω—ã –∏ –æ–ø–∏—Å–∞–Ω–∏—è
    - —Å–∏—Å—Ç–µ–º—ã –æ—Ç–∑—ã–≤–æ–≤
    - —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã

    üîç –†–∞–∑–¥–µ–ª—è–µ—Ç —Ü–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–ø—ã (–¥–ª—è –∫–æ–≤—Ä–∏–∫–∞ –∏ –æ–∫–∞–Ω—Ç–æ–≤–∫–∏)
    """
    product = get_object_or_404(Product, slug=slug)

    # –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤
    sorted_kit_variants = KitVariant.objects.filter(is_option=False).order_by('order')
    additional_options = KitVariant.objects.filter(is_option=True).order_by('order')

    # üí∞ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –ø–æ–¥–ø—è—Ç–Ω–∏–∫–∞ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ KitVariant
    podpyatnik_option = KitVariant.objects.filter(code='podpyatnik', is_option=True).first()
    if not podpyatnik_option:
        # üö® –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç –≤ –ë–î, —Å–æ–∑–¥–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ/–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –û–ø—Ü–∏—è '–ø–æ–¥–ø—è—Ç–Ω–∏–∫' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ KitVariant!")
        # –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—É—é —Ü–µ–Ω—É
        podpyatnik_option = type('obj', (object,), {
            'name': '–ü–æ–¥–ø—è—Ç–Ω–∏–∫',
            'price_modifier': 15.00,  # –î–µ—Ñ–æ–ª—Ç–Ω–∞—è —Ü–µ–Ω–∞
            'code': 'podpyatnik'
        })

    # üé® —Ä–∞–∑–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–ø—ã –¥–ª—è –∫–æ–≤—Ä–∏–∫–∞ –∏ –æ–∫–∞–Ω—Ç–æ–≤–∫–∏
    carpet_colors = Color.objects.filter(color_type='carpet').order_by('display_order')
    border_colors = Color.objects.filter(color_type='border').order_by('display_order')

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ (–¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞)
    initial_carpet_color = carpet_colors.filter(is_available=True).first() or carpet_colors.first()
    initial_border_color = border_colors.filter(is_available=True).first() or border_colors.first()

    # –ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã
    related_products = list(product.category.products.filter(parent=None).exclude(uid=product.uid))
    if len(related_products) >= 4:
        related_products = random.sample(related_products, 4)

    # —Ä–µ–π—Ç–∏–Ω–≥ / –æ—Ç–∑—ã–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    review = ProductReview.objects.filter(product=product,
                                          user=request.user).first() if request.user.is_authenticated else None
    rating_percentage = (product.get_rating() / 5) * 100 if product.reviews.exists() else 0
    review_form = ReviewForm(request.POST or None, instance=review)

    if request.method == 'POST' and request.user.is_authenticated and review_form.is_valid():
        new_rev = review_form.save(commit=False)
        new_rev.product, new_rev.user = product, request.user
        new_rev.save()
        messages.success(request, '–û—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω')
        return redirect('get_product', slug=slug)

    # ----------  –æ–ø—Ä–µ–¥–µ–ª—è–µ–º, –ª–µ–∂–∏—Ç –ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  ----------
    in_cart = False
    if request.user.is_authenticated:
        cart = Cart.objects.filter(user=request.user, is_paid=False).first()
        if cart:
            in_cart = CartItem.objects.filter(cart=cart, product=product).exists()

    # ----------  —Ü–µ–Ω–∞ –∏ –∫–æ–º–ø–ª–µ–∫—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é  ----------
    selected_kit, updated_price = None, product.price
    default_kit = sorted_kit_variants.filter(code='salon').first()
    kit_code = request.GET.get('kit') or (default_kit.code if default_kit else None)

    if kit_code:
        selected_kit = kit_code
        updated_price = product.get_product_price_by_kit(kit_code)

    context = {
        'product': product,
        'sorted_kit_variants': sorted_kit_variants,
        'additional_options': additional_options,
        'podpyatnik_option': podpyatnik_option,  # üí∞ –î–û–ë–ê–í–õ–ï–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º –æ–ø—Ü–∏—é –ø–æ–¥–ø—è—Ç–Ω–∏–∫–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        'related_products': related_products,
        'review_form': review_form,
        'rating_percentage': rating_percentage,
        'in_wishlist': Wishlist.objects.filter(user=request.user,
                                               product=product).exists() if request.user.is_authenticated else False,
        'carpet_colors': carpet_colors,  # üé® –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –∫–æ–≤—Ä–∏–∫–æ–≤
        'border_colors': border_colors,  # üé® –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –æ–∫–∞–Ω—Ç–æ–≤–∫–∏
        'initial_carpet_color': initial_carpet_color,  # üé® –ù–∞—á–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç –∫–æ–≤—Ä–∏–∫–∞
        'initial_border_color': initial_border_color,  # üé® –ù–∞—á–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç –æ–∫–∞–Ω—Ç–æ–≤–∫–∏
        'in_cart': in_cart,
        'selected_kit': selected_kit,
        'updated_price': updated_price,
    }

    return render(request, 'product/product.html', context)


# üîÑ –û–°–¢–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô...

# Product Review view
@login_required
def product_reviews(request):
    """üìù –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    reviews = ProductReview.objects.filter(
        user=request.user).select_related('product').order_by('-date_added')
    return render(request, 'product/all_product_reviews.html', {'reviews': reviews})


# Edit Review view
@login_required
def edit_review(request, review_uid):
    """‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    review = ProductReview.objects.filter(uid=review_uid, user=request.user).first()
    if not review:
        return JsonResponse({"detail": "–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω"}, status=404)

    if request.method == "POST":
        stars = request.POST.get("stars")
        content = request.POST.get("content")
        review.stars = stars
        review.content = content
        review.save()
        messages.success(request, "–í–∞—à –æ—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

    return JsonResponse({"detail": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å"}, status=400)


# Like and Dislike review view
def like_review(request, review_uid):
    """üëç –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∞–π–∫–∞ –æ—Ç–∑—ã–≤–∞"""
    review = ProductReview.objects.filter(uid=review_uid).first()

    if request.user in review.likes.all():
        review.likes.remove(request.user)
    else:
        review.likes.add(request.user)
        review.dislikes.remove(request.user)
    return JsonResponse({'likes': review.like_count(), 'dislikes': review.dislike_count()})


def dislike_review(request, review_uid):
    """üëé –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∑–ª–∞–π–∫–∞ –æ—Ç–∑—ã–≤–∞"""
    review = ProductReview.objects.filter(uid=review_uid).first()

    if request.user in review.dislikes.all():
        review.dislikes.remove(request.user)
    else:
        review.dislikes.add(request.user)
        review.likes.remove(request.user)
    return JsonResponse({'likes': review.like_count(), 'dislikes': review.dislike_count()})


# delete review view
def delete_review(request, slug, review_uid):
    """üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞"""
    if not request.user.is_authenticated:
        messages.warning(request, "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤.")
        return redirect('login')

    review = ProductReview.objects.filter(uid=review_uid, product__slug=slug, user=request.user).first()

    if not review:
        messages.error(request, "–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return redirect('get_product', slug=slug)

    review.delete()
    messages.success(request, "–í–∞—à –æ—Ç–∑—ã–≤ –±—ã–ª —É–¥–∞–ª–µ–Ω.")
    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))


# Add a product to Wishlist
@login_required
def add_to_wishlist(request, uid):
    """‚ù§Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏ –∏ –æ–ø—Ü–∏—è–º–∏"""
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ POST-–∑–∞–ø—Ä–æ—Å–∞ (–¥–ª—è —Ñ–æ—Ä–º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–æ–≤–∞—Ä–∞)
    kit_code = request.POST.get('kit')
    carpet_color_id = request.POST.get('carpet_color')
    border_color_id = request.POST.get('border_color')
    has_podp = request.POST.get('podp') == '1'

    # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ GET-–∑–∞–ø—Ä–æ—Å–∞ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    if not kit_code:
        kit_code = request.GET.get('kit')
    if not carpet_color_id:
        carpet_color_id = request.GET.get('carpet_color')
    if not border_color_id:
        border_color_id = request.GET.get('border_color')
    if not has_podp:
        has_podp = request.GET.get('podp') == '1'

    if not kit_code:
        messages.warning(request, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!')
        return redirect(request.META.get('HTTP_REFERER'))

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∏–∑ –ë–î
    product = get_object_or_404(Product, uid=uid)
    kit_variant = get_object_or_404(KitVariant, code=kit_code)

    # –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –≤—ã–±—Ä–∞–Ω—ã
    carpet_color = None
    border_color = None
    if carpet_color_id:
        carpet_color = get_object_or_404(Color, uid=carpet_color_id)
    if border_color_id:
        border_color = get_object_or_404(Color, uid=border_color_id)

    # ‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
    if carpet_color and not carpet_color.is_available:
        messages.warning(request,
                         f'–¶–≤–µ—Ç –∫–æ–≤—Ä–∏–∫–∞ "{carpet_color.name}" –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ü–≤–µ—Ç.')
        return redirect(request.META.get('HTTP_REFERER'))

    if border_color and not border_color.is_available:
        messages.warning(request,
                         f'–¶–≤–µ—Ç –æ–∫–∞–Ω—Ç–æ–≤–∫–∏ "{border_color.name}" –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ü–≤–µ—Ç.')
        return redirect(request.META.get('HTTP_REFERER'))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–æ–≤–∞—Ä –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
    wishlist_item = Wishlist.objects.filter(
        user=request.user,
        product=product,
        kit_variant=kit_variant
    ).first()

    if wishlist_item:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
        wishlist_item.carpet_color = carpet_color
        wishlist_item.border_color = border_color
        wishlist_item.has_podpyatnik = has_podp
        wishlist_item.save()
        messages.success(request, "–¢–æ–≤–∞—Ä –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω!")
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        Wishlist.objects.create(
            user=request.user,
            product=product,
            kit_variant=kit_variant,
            carpet_color=carpet_color,
            border_color=border_color,
            has_podpyatnik=has_podp
        )
        messages.success(request, "–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")

    return redirect(reverse('wishlist'))


# Remove product from wishlist
@login_required
def remove_from_wishlist(request, uid):
    """üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    product = get_object_or_404(Product, uid=uid)
    kit_code = request.GET.get('kit')

    if kit_code:
        kit_variant = get_object_or_404(KitVariant, code=kit_code)
        Wishlist.objects.filter(
            user=request.user, product=product, kit_variant=kit_variant).delete()
    else:
        Wishlist.objects.filter(user=request.user, product=product).delete()

    messages.success(request, "–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!")
    return redirect(reverse('wishlist'))


# Wishlist View
@login_required
def wishlist_view(request):
    """‚ù§Ô∏è –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏ –∏ –æ–ø—Ü–∏—è–º–∏"""
    wishlist_items = Wishlist.objects.filter(user=request.user)
    return render(request, 'product/wishlist.html', {'wishlist_items': wishlist_items})


# Move to cart functionality on wishlist page.
@login_required
def move_to_cart(request, uid):
    """üõí –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    product = get_object_or_404(Product, uid=uid)
    wishlist = Wishlist.objects.filter(user=request.user, product=product).first()

    if not wishlist:
        messages.error(request, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º.")
        return redirect('wishlist')

    kit_variant = wishlist.kit_variant
    carpet_color = wishlist.carpet_color
    border_color = wishlist.border_color
    has_podpyatnik = wishlist.has_podpyatnik

    # ‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
    if carpet_color and not carpet_color.is_available:
        messages.warning(request,
                         f'–¶–≤–µ—Ç –∫–æ–≤—Ä–∏–∫–∞ "{carpet_color.name}" –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –¢–æ–≤–∞—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.')
        return redirect('wishlist')

    if border_color and not border_color.is_available:
        messages.warning(request,
                         f'–¶–≤–µ—Ç –æ–∫–∞–Ω—Ç–æ–≤–∫–∏ "{border_color.name}" –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –¢–æ–≤–∞—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.')
        return redirect('wishlist')

    # –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    wishlist.delete()

    cart, created = Cart.objects.get_or_create(user=request.user, is_paid=False)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
    cart_item = CartItem.objects.filter(
        cart=cart,
        product=product,
        kit_variant=kit_variant,
        carpet_color=carpet_color,
        border_color=border_color,
        has_podpyatnik=has_podpyatnik
    ).first()

    if cart_item:
        # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –µ—Å—Ç—å, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        cart_item.quantity += 1
        cart_item.save()
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–æ—Ä–∑–∏–Ω—ã
        CartItem.objects.create(
            cart=cart,
            product=product,
            kit_variant=kit_variant,
            carpet_color=carpet_color,
            border_color=border_color,
            has_podpyatnik=has_podpyatnik
        )

    messages.success(request, "–¢–æ–≤–∞—Ä –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
    return redirect('cart')


# –£–±–∏—Ä–∞–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä @login_required
def add_to_cart(request, uid):
    """üõí –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏ –∏ –æ–ø—Ü–∏—è–º–∏"""
    try:
        kit_code = request.POST.get('kit')
        carpet_color_id = request.POST.get('carpet_color')
        border_color_id = request.POST.get('border_color')
        has_podp = request.POST.get('podp') == '1'
        quantity = int(request.POST.get('quantity') or 1)

        product = get_object_or_404(Product, uid=uid)
        kit_variant = get_object_or_404(KitVariant, code=kit_code or 'salon')

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã —Ü–≤–µ—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        carpet_color = None
        if carpet_color_id:
            carpet_color = get_object_or_404(Color, uid=carpet_color_id)
            if not carpet_color.is_available:
                messages.warning(request,
                                 f'–¶–≤–µ—Ç –∫–æ–≤—Ä–∏–∫–∞ "{carpet_color.name}" –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ü–≤–µ—Ç.')
                return redirect(request.META.get('HTTP_REFERER'))

        border_color = None
        if border_color_id:
            border_color = get_object_or_404(Color, uid=border_color_id)
            if not border_color.is_available:
                messages.warning(request,
                                 f'–¶–≤–µ—Ç –æ–∫–∞–Ω—Ç–æ–≤–∫–∏ "{border_color.name}" –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ü–≤–µ—Ç.')
                return redirect(request.META.get('HTTP_REFERER'))

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/—Å–µ—Å—Å–∏–∏
        cart = Cart.get_cart(request)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
        item, created = CartItem.objects.get_or_create(
            cart=cart,
            product=product,
            kit_variant=kit_variant,
            carpet_color=carpet_color,
            border_color=border_color,
            has_podpyatnik=has_podp,
            defaults={'quantity': quantity},
        )

        if not created:
            item.quantity += quantity
            item.save()

        messages.success(request, '–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!')

    except Exception as e:
        messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É: {str(e)}')

    return redirect('cart')

# üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
# ‚úÖ –î–û–ë–ê–í–õ–ï–ù–´: —Ñ—É–Ω–∫—Ü–∏–∏ products_catalog –∏ products_by_category
# ‚úÖ –°–û–•–†–ê–ù–ï–ù–´: –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
# ‚úÖ –î–û–ë–ê–í–õ–ï–ù–´: –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã (Paginator, Q)
# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ê: –ø—Ä–æ–±–ª–µ–º–∞ —Å NameError –¥–ª—è products_catalog