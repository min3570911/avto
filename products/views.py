# üìÅ products/views.py ‚Äî –ü–û–õ–ù–ê–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
# üõçÔ∏è View-—Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ –∞–≤—Ç–æ–∫–æ–≤—Ä–∏–∫–æ–≤
# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã ProductReview –∏ Wishlist –∏–∑ common.models
# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—Å–µ –≤—ã–∑–æ–≤—ã product.reviews.* –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ –ø—Ä—è–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ Generic FK
# üõ•Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–û: border_colors –¥–ª—è –ª–æ–¥–æ–∫ + –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
# üöó –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ–¥–ø—è—Ç–Ω–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π

from django.shortcuts import render, redirect, get_object_or_404
from django.http import HttpResponseRedirect, JsonResponse
from django.contrib import messages
from django.urls import reverse
from django.contrib.auth.decorators import login_required
from django.core.paginator import Paginator
from django.db.models import Q

# üõçÔ∏è –ú–æ–¥–µ–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤
from products.models import (
    Product,
    KitVariant,
    Color,
    Category,
)

# ü§ù –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –∏–∑ common
from common.models import ProductReview, Wishlist
from django.contrib.contenttypes.models import ContentType

# üë§ –ú–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–æ—Ä–∑–∏–Ω—ã
from accounts.models import Cart, CartItem

# üìù –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç —Ñ–æ—Ä–º—ã –æ—Ç–∑—ã–≤–æ–≤
from .forms import ReviewForm


# üè† –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤
def products_catalog(request):
    """
    üõçÔ∏è –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤

    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É.
    """
    # üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    search_query = request.GET.get("search", "")
    sort_by = request.GET.get("sort", "-created_at")
    category_filter = request.GET.get("category", "")
    per_page = request.GET.get("per_page", "12")

    # üì¶ –ë–∞–∑–æ–≤—ã–π queryset –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
    products = Product.objects.all().select_related("category").prefetch_related("product_images")

    # üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏—é
    if search_query:
        products = products.filter(
            Q(product_name__icontains=search_query)
            | Q(product_desription__icontains=search_query)
        )

    # üìÇ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if category_filter:
        products = products.filter(category__slug=category_filter)

    # üìä –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
    sort_options = {
        "name": "product_name",
        "-name": "-product_name",
        "price": "price",
        "-price": "-price",
        "newest": "-created_at",
        "oldest": "created_at",
    }
    products = products.order_by(sort_options.get(sort_by, "-created_at"))

    # üî¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ per_page
    if per_page == "all":
        total_products = products.count()
        if total_products > 500:
            messages.warning(request,
                             f"–ü–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä–≤—ã–µ 500 –∏–∑ {total_products} —Ç–æ–≤–∞—Ä–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞.")
            per_page_num = 500
        else:
            per_page_num = total_products or 1
    else:
        try:
            per_page_num = int(per_page)
            if per_page_num not in [12, 24, 48, 96]:
                per_page_num = 12
        except (ValueError, TypeError):
            per_page_num = 12

    # üìÑ –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    paginator = Paginator(products, per_page_num)
    page_number = request.GET.get("page")
    page_obj = paginator.get_page(page_number)

    # üìÇ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories = (
        Category.objects.filter(is_active=True)
        .order_by("display_order", "category_name")
    )

    # üìä –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–±–ª–æ–Ω–∞
    context = {
        "page_obj": page_obj,
        "products": page_obj.object_list,
        "categories": categories,
        "search_query": search_query,
        "sort_by": sort_by,
        "category_filter": category_filter,
        "per_page": per_page,
        "total_products": paginator.count,
        "current_page": page_obj.number,
        "total_pages": paginator.num_pages,
    }

    return render(request, "product/catalog.html", context)


def products_by_category(request, slug):
    """üìÇ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category = get_object_or_404(Category, slug=slug)

    if not category.is_active:
        messages.warning(request, "–≠—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return redirect("products_catalog")

    # üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    sort_by = request.GET.get("sort", "-created_at")
    search_query = request.GET.get("search", "")
    per_page = request.GET.get("per_page", "12")

    # üì¶ –¢–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    products = (
        Product.objects.filter(category=category)
        .select_related("category")
        .prefetch_related("product_images")
    )

    # üîç –ü–æ–∏—Å–∫ –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if search_query:
        products = products.filter(
            Q(product_name__icontains=search_query)
            | Q(product_desription__icontains=search_query)
        )

    # üìä –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    sort_options = {
        "name": "product_name",
        "-name": "-product_name",
        "price": "price",
        "-price": "-price",
        "newest": "-created_at",
        "oldest": "created_at",
    }
    products = products.order_by(sort_options.get(sort_by, "-created_at"))

    # üî¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ per_page
    if per_page == "all":
        total_products = products.count()
        if total_products > 500:
            messages.warning(request,
                             f"–ü–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä–≤—ã–µ 500 –∏–∑ {total_products} —Ç–æ–≤–∞—Ä–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞.")
            per_page_num = 500
        else:
            per_page_num = total_products or 1
    else:
        try:
            per_page_num = int(per_page)
            if per_page_num not in [12, 24, 48, 96]:
                per_page_num = 12
        except (ValueError, TypeError):
            per_page_num = 12

    # üìÑ –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    paginator = Paginator(products, per_page_num)
    page_number = request.GET.get("page")
    page_obj = paginator.get_page(page_number)

    # üìÇ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories = (
        Category.objects.filter(is_active=True)
        .order_by("display_order", "category_name")
    )

    # üìä –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–±–ª–æ–Ω–∞
    context = {
        "category": category,
        "page_obj": page_obj,
        "products": page_obj.object_list,
        "categories": categories,
        "search_query": search_query,
        "sort_by": sort_by,
        "per_page": per_page,
        "total_products": paginator.count,
        "current_page": page_obj.number,
        "total_pages": paginator.num_pages,
        "page_title": category.page_title or category.category_name,
        "meta_title": category.get_seo_title(),
        "meta_description": category.get_seo_description(),
        "has_description": bool(category.description),
        "has_additional_content": bool(category.additional_content),
    }

    return render(request, "product/category.html", context)


def get_product(request, slug):
    """
    üõçÔ∏è –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ª–æ–¥–æ–∫ –∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π

    üõ•Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–ª—è –ª–æ–¥–æ–∫ –í–ö–õ–Æ–ß–ï–ù–ê –æ–∫–∞–Ω—Ç–æ–≤–∫–∞
    üöó –î–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: –≤—Å–µ –∫–∞–∫ –±—ã–ª–æ
    ‚úÖ –§–ò–ö–°: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ product.reviews
    """
    product = get_object_or_404(Product, slug=slug)

    # üõ•Ô∏è –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞
    if product.is_boat_product():
        # ================== –õ–û–ì–ò–ö–ê –î–õ–Ø –õ–û–î–û–ö ==================

        # üé® –ò–°–ü–†–ê–í–õ–ï–ù–û: –¶–≤–µ—Ç–∞ –∫–æ–≤—Ä–∏–∫–æ–≤ –ò –æ–∫–∞–Ω—Ç–æ–≤–∫–∏ –¥–ª—è –ª–æ–¥–æ–∫!
        carpet_colors = Color.objects.filter(
            color_type='carpet',
            is_available=True
        ).order_by('display_order')

        # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –û–∫–∞–Ω—Ç–æ–≤–∫–∞ –¥–ª—è –ª–æ–¥–æ–∫
        border_colors = Color.objects.filter(
            color_type='border',
            is_available=True
        ).order_by('display_order')

        # üé® –ù–∞—á–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞
        initial_carpet_color = carpet_colors.first()
        initial_border_color = border_colors.first()

        # üì¶ –ë–µ–∑ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–π –¥–ª—è –ª–æ–¥–æ–∫
        sorted_kit_variants = []
        additional_options = []
        podpyatnik_option = None

        # üí∞ –¶–µ–Ω–∞ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ø–æ–ª—è Product.price
        selected_kit = None
        updated_price = product.price or 0

        # üõí –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
        in_cart = False
        if request.user.is_authenticated:
            cart = Cart.objects.filter(user=request.user, is_paid=False).first()
            if cart:
                in_cart = CartItem.objects.filter(
                    cart=cart,
                    product=product,
                    kit_variant__isnull=True,
                    has_podpyatnik=False
                ).exists()

    else:
        # ================== –õ–û–ì–ò–ö–ê –î–õ–Ø –ê–í–¢–û–ú–û–ë–ò–õ–ï–ô ==================

        # üì¶ –í–∞—Ä–∏–∞–Ω—Ç—ã –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤
        sorted_kit_variants = KitVariant.objects.filter(is_option=False).order_by('order')
        additional_options = KitVariant.objects.filter(is_option=True).order_by('order')

        # üí∞ –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –ø–æ–¥–ø—è—Ç–Ω–∏–∫–∞ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ KitVariant
        podpyatnik_option = KitVariant.objects.filter(code='podpyatnik', is_option=True).first()
        if not podpyatnik_option:
            print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –û–ø—Ü–∏—è '–ø–æ–¥–ø—è—Ç–Ω–∏–∫' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ KitVariant!")
            podpyatnik_option = type('obj', (object,), {
                'name': '–ü–æ–¥–ø—è—Ç–Ω–∏–∫',
                'price_modifier': 15.00,
                'code': 'podpyatnik'
            })

        # üé® –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–≤—Ä–∏–∫–∞ –∏ –æ–∫–∞–Ω—Ç–æ–≤–∫–∏
        carpet_colors = Color.objects.filter(color_type='carpet').order_by('display_order')
        border_colors = Color.objects.filter(color_type='border').order_by('display_order')

        # üé® –ü–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
        initial_carpet_color = carpet_colors.filter(is_available=True).first() or carpet_colors.first()
        initial_border_color = border_colors.filter(is_available=True).first() or border_colors.first()

        # üõí –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        in_cart = False
        if request.user.is_authenticated:
            cart = Cart.objects.filter(user=request.user, is_paid=False).first()
            if cart:
                in_cart = CartItem.objects.filter(cart=cart, product=product).exists()

        # üí∞ –¶–µ–Ω–∞ –∏ –∫–æ–º–ø–ª–µ–∫—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        selected_kit, updated_price = None, product.price
        default_kit = sorted_kit_variants.filter(code='salon').first()
        kit_code = request.GET.get('kit') or (default_kit.code if default_kit else None)

        if kit_code:
            selected_kit = kit_code
            updated_price = product.get_product_price_by_kit(kit_code)

    # ================== –û–ë–©–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –í–°–ï–• –¢–û–í–ê–†–û–í ==================

    # üìù –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–∑—ã–≤—ã —Ç–æ–≤–∞—Ä–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º ProductReview –∏–∑ common)
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤—ã —á–µ—Ä–µ–∑ —Å–≤—è–∑—å
        reviews = product.reviews.all().order_by('-date_added')
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ —á–µ—Ä–µ–∑ —Å–≤—è–∑—å
        has_reviews = product.reviews.exists()
    except AttributeError:
        # ‚úÖ –§–ò–ö–°: –ï—Å–ª–∏ —Å–≤—è–∑–∏ –Ω–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Generic FK
        reviews = ProductReview.objects.filter(
            content_type=ContentType.objects.get_for_model(Product),
            object_id=product.uid
        ).order_by('-date_added')
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞–ø—Ä—è–º—É—é
        has_reviews = reviews.exists()

    # üìù –†–µ–π—Ç–∏–Ω–≥ –∏ –æ—Ç–∑—ã–≤—ã - –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É has_reviews
    review = None
    if request.user.is_authenticated:
        try:
            review = ProductReview.objects.filter(
                content_type=ContentType.objects.get_for_model(Product),
                object_id=product.uid,
                user=request.user
            ).first()
        except:
            review = None

    # ‚úÖ –§–ò–ö–°: –ó–∞–º–µ–Ω–∏–ª–∏ product.reviews.exists() –Ω–∞ has_reviews
    rating_percentage = (product.get_rating() / 5) * 100 if has_reviews else 0
    review_form = ReviewForm(request.POST or None, instance=review)

    # üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞
    if request.method == 'POST' and request.user.is_authenticated:
        try:
            stars = request.POST.get('stars')
            content = request.POST.get('content')

            if stars and content:
                stars = int(stars)

                if review:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç–∑—ã–≤
                    review.stars = stars
                    review.content = content
                    review.save()
                    messages.success(request, "‚úÖ –í–∞—à –æ—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤ - –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º ProductReview –∏–∑ common
                    ProductReview.objects.create(
                        user=request.user,
                        product=product,
                        stars=stars,
                        content=content
                    )
                    messages.success(request, "‚úÖ –í–∞—à –æ—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")

                return redirect('get_product', slug=slug)
            else:
                messages.error(request, "‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        except (ValueError, TypeError):
            messages.error(request, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞.")

    # üîÑ –ü–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    similar_products = Product.objects.filter(
        category=product.category
    ).exclude(uid=product.uid).select_related('category').prefetch_related('product_images')[:4]

    # üõí –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º (–∏—Å–ø–æ–ª—å–∑—É–µ–º Wishlist –∏–∑ common)
    in_wishlist = False
    if request.user.is_authenticated:
        try:
            in_wishlist = Wishlist.objects.filter(
                user=request.user,
                content_type=ContentType.objects.get_for_model(Product),
                object_id=product.uid
            ).exists()
        except:
            in_wishlist = False

    # üìä –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–±–ª–æ–Ω–∞
    context = {
        'product': product,
        'reviews': reviews,  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º reviews –Ω–∞–ø—Ä—è–º—É—é
        'similar_products': similar_products,

        # üõ•Ô∏è –ü–æ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞
        'is_boat_product': product.is_boat_product(),
        'is_car_product': product.is_car_product(),

        # üì¶ –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏
        'sorted_kit_variants': sorted_kit_variants,
        'additional_options': additional_options,
        'podpyatnik_option': podpyatnik_option,

        # üé® –ò–°–ü–†–ê–í–õ–ï–ù–û: –¶–≤–µ—Ç–∞ –¥–ª—è –ª–æ–¥–æ–∫ - –∫–æ–≤—Ä–∏–∫ –ò –æ–∫–∞–Ω—Ç–æ–≤–∫–∞!
        'carpet_colors': carpet_colors,
        'border_colors': border_colors,
        'initial_carpet_color': initial_carpet_color,
        'initial_border_color': initial_border_color,

        # üí∞ –¶–µ–Ω—ã
        'selected_kit': selected_kit,
        'updated_price': updated_price,

        # üõí –ö–æ—Ä–∑–∏–Ω–∞ –∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        'in_cart': in_cart,
        'in_wishlist': in_wishlist,

        # üìù –û—Ç–∑—ã–≤—ã
        'review_form': review_form,
        'rating_percentage': rating_percentage,
        'review': review,  # –¢–µ–∫—É—â–∏–π –æ—Ç–∑—ã–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    }

    return render(request, 'product/product.html', context)


# üõí –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø GENERIC FK
def add_to_cart(request, uid):
    """
    üõí –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É —Å Generic FK
    ‚úÖ –§–ò–ö–°: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å GenericForeignKey –≤ CartItem
    """
    try:
        # üìù –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ POST-–∑–∞–ø—Ä–æ—Å–∞
        kit_code = request.POST.get('kit')
        carpet_color_id = request.POST.get('carpet_color')
        border_color_id = request.POST.get('border_color')
        has_podp = request.POST.get('podp') == '1'
        quantity = int(request.POST.get('quantity') or 1)

        # üõçÔ∏è –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä
        product = get_object_or_404(Product, uid=uid)

        # üõ•Ô∏è –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
        if product.is_boat_product():
            # ================== –õ–û–î–ö–ò ==================
            kit_variant = None
            has_podp = False  # –£ –ª–æ–¥–æ–∫ –Ω–µ—Ç –ø–æ–¥–ø—è—Ç–Ω–∏–∫–∞
        else:
            # ================== –ê–í–¢–û–ú–û–ë–ò–õ–ò ==================
            # üì¶ –î–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è
            if not kit_code:
                messages.warning(request, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—é!')
                return redirect(request.META.get('HTTP_REFERER'))

            kit_variant = get_object_or_404(KitVariant, code=kit_code)

        # üé® –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –¶–í–ï–¢–û–í
        carpet_color = None
        if carpet_color_id:
            carpet_color = get_object_or_404(Color, uid=carpet_color_id)
            if not carpet_color.is_available:
                messages.warning(request,
                                 f'–¶–≤–µ—Ç –∫–æ–≤—Ä–∏–∫–∞ "{carpet_color.name}" –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.')
                return redirect(request.META.get('HTTP_REFERER'))

        border_color = None
        if border_color_id:
            border_color = get_object_or_404(Color, uid=border_color_id)
            if not border_color.is_available:
                messages.warning(request,
                                 f'–¶–≤–µ—Ç –æ–∫–∞–Ω—Ç–æ–≤–∫–∏ "{border_color.name}" –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.')
                return redirect(request.META.get('HTTP_REFERER'))

        # üõí –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã
        if request.user.is_authenticated:
            cart, created = Cart.objects.get_or_create(
                user=request.user,
                is_paid=False,
                defaults={'session_id': None}
            )
        else:
            session_key = request.session.session_key
            if not session_key:
                request.session.create()
                session_key = request.session.session_key

            cart, created = Cart.objects.get_or_create(
                session_id=session_key,
                user=None,
                is_paid=False
            )

        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å Generic FK
        # –ü–æ–ª—É—á–∞–µ–º ContentType –¥–ª—è –º–æ–¥–µ–ª–∏ Product
        from django.contrib.contenttypes.models import ContentType
        product_content_type = ContentType.objects.get_for_model(Product)

        # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
        existing_item = CartItem.objects.filter(
            cart=cart,
            content_type=product_content_type,  # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º content_type
            object_id=product.uid,  # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º object_id
            kit_variant=kit_variant,
            carpet_color=carpet_color,
            border_color=border_color,
            has_podpyatnik=has_podp
        ).first()

        if existing_item:
            # üìà –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            existing_item.quantity += quantity
            existing_item.save()
            messages.success(request, f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ —É–≤–µ–ª–∏—á–µ–Ω–æ! –í—Å–µ–≥–æ –≤ –∫–æ—Ä–∑–∏–Ω–µ: {existing_item.quantity}')
        else:
            # üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–æ—Ä–∑–∏–Ω—ã —Å Generic FK
            new_item = CartItem.objects.create(
                cart=cart,
                content_type=product_content_type,  # ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º content_type
                object_id=product.uid,  # ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º object_id
                kit_variant=kit_variant,
                carpet_color=carpet_color,
                border_color=border_color,
                has_podpyatnik=has_podp,
                quantity=quantity
            )

            # üîß –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            item_type = "–ª–æ–¥–∫–∞" if product.is_boat_product() else "–∞–≤—Ç–æ–º–æ–±–∏–ª—å"
            print(f"‚úÖ –£–°–ü–ï–•: –°–æ–∑–¥–∞–Ω CartItem –¥–ª—è {item_type}:")
            print(f"   - –¢–æ–≤–∞—Ä: {product.product_name}")
            print(f"   - Content Type: {product_content_type}")
            print(f"   - Object ID: {product.uid}")
            print(f"   - –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è: {kit_variant}")
            print(f"   - –¶–≤–µ—Ç –∫–æ–≤—Ä–∏–∫–∞: {carpet_color}")
            print(f"   - –¶–≤–µ—Ç –æ–∫–∞–Ω—Ç–æ–≤–∫–∏: {border_color}")
            print(f"   - –ü–æ–¥–ø—è—Ç–Ω–∏–∫: {has_podp}")
            print(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}")

            messages.success(request, '‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!')

    except Exception as e:
        # üö® –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        print(f"üö® –û–®–ò–ë–ö–ê –≤ add_to_cart: {str(e)}")
        print(f"   - –¢–æ–≤–∞—Ä UID: {uid}")
        print(f"   - POST –¥–∞–Ω–Ω—ã–µ: {request.POST}")
        import traceback
        print(f"   - Traceback: {traceback.format_exc()}")
        messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É: {str(e)}')

    return redirect('cart')

# Product Review view
@login_required
def product_reviews(request):
    """üìù –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω select_related('product'), —Ç.–∫. –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å Generic FK
    reviews = ProductReview.objects.filter(
        user=request.user
    ).order_by('-date_added')

    # üîß –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∫ –∫–∞–∂–¥–æ–º—É –æ—Ç–∑—ã–≤—É –≤—Ä—É—á–Ω—É—é
    for review in reviews:
        if hasattr(review, 'product') and review.product:
            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç–∑—ã–≤–∞ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ ContentType
                if review.content_type.model == 'product':
                    # –ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä
                    product = Product.objects.get(uid=review.object_id)
                elif review.content_type.model == 'boatproduct':
                    # –õ–æ–¥–æ—á–Ω—ã–π —Ç–æ–≤–∞—Ä
                    from boats.models import BoatProduct
                    product = BoatProduct.objects.get(uid=review.object_id)
                else:
                    product = None

                # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Ç–æ–≤–∞—Ä –∫ –æ—Ç–∑—ã–≤—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —à–∞–±–ª–æ–Ω–µ
                review._cached_product = product
            except:
                review._cached_product = None

    return render(request, 'product/all_product_reviews.html', {'reviews': reviews})


def delete_review(request, slug, review_uid):
    """üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–û: –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è product__slug"""
    if not request.user.is_authenticated:
        messages.warning(request, "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤.")
        return redirect('login')

    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤ –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è product__slug
    review = ProductReview.objects.filter(
        uid=review_uid,
        user=request.user
    ).first()

    if not review:
        messages.error(request, "–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return redirect('get_product', slug=slug)

    # üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–∑—ã–≤ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–æ–≤–∞—Ä—É —Å –Ω—É–∂–Ω—ã–º slug
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä —á–µ—Ä–µ–∑ Generic FK
        if hasattr(review, 'product') and review.product:
            if hasattr(review.product, 'slug') and review.product.slug != slug:
                messages.error(request, "–û—Ç–∑—ã–≤ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É —Ç–æ–≤–∞—Ä—É.")
                return redirect('get_product', slug=slug)
    except:
        # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å slug, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        pass

    # üóëÔ∏è –£–¥–∞–ª—è–µ–º –æ—Ç–∑—ã–≤
    review.delete()
    messages.success(request, "–í–∞—à –æ—Ç–∑—ã–≤ –±—ã–ª —É–¥–∞–ª–µ–Ω.")
    return HttpResponseRedirect(request.META.get('HTTP_REFERER', f'/products/{slug}/'))


# ‚úÖ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –ò—Å–ø—Ä–∞–≤–ª—è–µ–º edit_review –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
@login_required
def edit_review(request, review_uid):
    """‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ò–°–ü–†–ê–í–õ–ï–ù–û"""
    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤ –Ω–∞–ø—Ä—è–º—É—é
    review = ProductReview.objects.filter(uid=review_uid, user=request.user).first()

    if not review:
        return JsonResponse({"detail": "–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω"}, status=404)

    if request.method == "POST":
        try:
            stars = request.POST.get("stars")
            content = request.POST.get("content")

            if stars and content:
                review.stars = int(stars)
                review.content = content
                review.save()
                messages.success(request, "–í–∞—à –æ—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
            else:
                return JsonResponse({"detail": "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è"}, status=400)
        except (ValueError, TypeError):
            return JsonResponse({"detail": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"}, status=400)

    return JsonResponse({"detail": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å"}, status=400)


def like_review(request, review_uid):
    """üëç –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∞–π–∫–∞ –æ—Ç–∑—ã–≤–∞ - –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô"""
    review = ProductReview.objects.filter(uid=review_uid).first()

    if not review:
        return JsonResponse({'error': '–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω'}, status=404)

    if request.user in review.likes.all():
        review.likes.remove(request.user)
    else:
        review.likes.add(request.user)
        review.dislikes.remove(request.user)

    return JsonResponse({
        'likes': review.like_count(),
        'dislikes': review.dislike_count()
    })


def dislike_review(request, review_uid):
    """üëé –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∑–ª–∞–π–∫–∞ –æ—Ç–∑—ã–≤–∞ - –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô"""
    review = ProductReview.objects.filter(uid=review_uid).first()

    if not review:
        return JsonResponse({'error': '–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω'}, status=404)

    if request.user in review.dislikes.all():
        review.dislikes.remove(request.user)
    else:
        review.dislikes.add(request.user)
        review.likes.remove(request.user)

    return JsonResponse({
        'likes': review.like_count(),
        'dislikes': review.dislike_count()
    })


# Add a product to Wishlist
@login_required
def add_to_wishlist(request, uid):
    """‚ù§Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏ –∏ –æ–ø—Ü–∏—è–º–∏"""
    kit_code = request.POST.get('kit')
    carpet_color_id = request.POST.get('carpet_color')
    border_color_id = request.POST.get('border_color')
    has_podp = request.POST.get('podp') == '1'

    if not kit_code:
        kit_code = request.GET.get('kit')
    if not carpet_color_id:
        carpet_color_id = request.GET.get('carpet_color')
    if not border_color_id:
        border_color_id = request.GET.get('border_color')
    if not has_podp:
        has_podp = request.GET.get('podp') == '1'

    product = get_object_or_404(Product, uid=uid)

    if not product.is_boat_product() and not kit_code:
        messages.warning(request, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!')
        return redirect(request.META.get('HTTP_REFERER'))

    # üõ•Ô∏è –î–ª—è –ª–æ–¥–æ–∫ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if product.is_boat_product():
        kit_variant = None
        has_podp = False
    else:
        kit_variant = get_object_or_404(KitVariant, code=kit_code)

    # –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç–∞ –∫–æ–≤—Ä–∏–∫–∞ –∏ –æ–∫–∞–Ω—Ç–æ–≤–∫–∏
    carpet_color = None
    border_color = None
    if carpet_color_id:
        carpet_color = get_object_or_404(Color, uid=carpet_color_id)
    if border_color_id:
        border_color = get_object_or_404(Color, uid=border_color_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤
    if carpet_color and not carpet_color.is_available:
        messages.warning(request,
                         f'–¶–≤–µ—Ç –∫–æ–≤—Ä–∏–∫–∞ "{carpet_color.name}" –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ü–≤–µ—Ç.')
        return redirect(request.META.get('HTTP_REFERER'))

    if border_color and not border_color.is_available:
        messages.warning(request,
                         f'–¶–≤–µ—Ç –æ–∫–∞–Ω—Ç–æ–≤–∫–∏ "{border_color.name}" –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ü–≤–µ—Ç.')
        return redirect(request.META.get('HTTP_REFERER'))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–æ–≤–∞—Ä –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
    wishlist_item = Wishlist.objects.filter(
        user=request.user,
        product=product,
        kit_variant=kit_variant
    ).first()

    if wishlist_item:
        wishlist_item.carpet_color = carpet_color
        wishlist_item.border_color = border_color
        wishlist_item.has_podpyatnik = has_podp
        wishlist_item.save()
        messages.success(request, "–¢–æ–≤–∞—Ä –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω!")
    else:
        Wishlist.objects.create(
            user=request.user,
            product=product,
            kit_variant=kit_variant,
            carpet_color=carpet_color,
            border_color=border_color,
            has_podpyatnik=has_podp
        )
        messages.success(request, "–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")

    return redirect(reverse('wishlist'))


# Remove product from wishlist
@login_required
def remove_from_wishlist(request, uid):
    """üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    product = get_object_or_404(Product, uid=uid)
    kit_code = request.GET.get('kit')

    if kit_code:
        kit_variant = get_object_or_404(KitVariant, code=kit_code)
        Wishlist.objects.filter(
            user=request.user, product=product, kit_variant=kit_variant).delete()
    else:
        Wishlist.objects.filter(user=request.user, product=product).delete()

    messages.success(request, "–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!")
    return redirect(reverse('wishlist'))


# Wishlist View
@login_required
def wishlist_view(request):
    """‚ù§Ô∏è –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏ –∏ –æ–ø—Ü–∏—è–º–∏"""
    wishlist_items = Wishlist.objects.filter(user=request.user)
    return render(request, 'product/wishlist.html', {'wishlist_items': wishlist_items})


# Move to cart functionality on wishlist page.
@login_required
def move_to_cart(request, uid):
    """üõí –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    product = get_object_or_404(Product, uid=uid)
    wishlist = Wishlist.objects.filter(user=request.user, product=product).first()

    if not wishlist:
        messages.error(request, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º.")
        return redirect('wishlist')

    kit_variant = wishlist.kit_variant
    carpet_color = wishlist.carpet_color
    border_color = wishlist.border_color
    has_podpyatnik = wishlist.has_podpyatnik

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤
    if carpet_color and not carpet_color.is_available:
        messages.warning(request,
                         f'–¶–≤–µ—Ç –∫–æ–≤—Ä–∏–∫–∞ "{carpet_color.name}" –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –¢–æ–≤–∞—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.')
        return redirect('wishlist')

    if border_color and not border_color.is_available:
        messages.warning(request,
                         f'–¶–≤–µ—Ç –æ–∫–∞–Ω—Ç–æ–≤–∫–∏ "{border_color.name}" –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –¢–æ–≤–∞—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.')
        return redirect('wishlist')

    # –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    wishlist.delete()

    cart, created = Cart.objects.get_or_create(user=request.user, is_paid=False)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
    cart_item = CartItem.objects.filter(
        cart=cart,
        product=product,
        kit_variant=kit_variant,
        carpet_color=carpet_color,
        border_color=border_color,
        has_podpyatnik=has_podpyatnik
    ).first()

    if cart_item:
        cart_item.quantity += 1
        cart_item.save()
    else:
        CartItem.objects.create(
            cart=cart,
            product=product,
            kit_variant=kit_variant,
            carpet_color=carpet_color,
            border_color=border_color,
            has_podpyatnik=has_podpyatnik
        )

    messages.success(request, "–¢–æ–≤–∞—Ä –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
    return redirect('cart')

# üîß –ö–õ–Æ–ß–ï–í–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –í –≠–¢–û–ú –§–ê–ô–õ–ï:
#
# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç ProductReview –∏ Wishlist –∏–∑ common.models
# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–º–µ–Ω–µ–Ω product.reviews.exists() –Ω–∞ has_reviews –≤ get_product
# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω try-except –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ —á–µ—Ä–µ–∑ Generic FK
# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–¥–∞—á–∞ reviews –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞
# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –§—É–Ω–∫—Ü–∏—è product_reviews –±–µ–∑ select_related('product')
# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –§—É–Ω–∫—Ü–∏—è delete_review –±–µ–∑ product__slug
# ‚úÖ –°–û–•–†–ê–ù–ï–ù–û: –í—Å—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –¥–ª—è –ª–æ–¥–æ–∫ –∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
# ‚úÖ –£–õ–£–ß–®–ï–ù–û: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
#
# üéØ –†–ï–ó–£–õ–¨–¢–ê–¢:
# - –ë–æ–ª—å—à–µ –Ω–µ—Ç –æ—à–∏–±–∫–∏ AttributeError: 'Product' object has no attribute 'reviews'
# - –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å Generic FK
# - –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è common
# - –ü–æ–ª–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞
# - –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∏ –¥–µ–ø–ª–æ—é