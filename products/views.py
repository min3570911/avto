# üìÅ products/views.py
# üîí –ü–û–õ–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ú–û–î–ï–†–ê–¶–ò–ò –ò –ê–ù–û–ù–ò–ú–ù–´–• –û–¢–ó–´–í–û–í
# ‚≠ê –û–ë–™–ï–î–ò–ù–ï–ù–û: –°–∏—Å—Ç–µ–º–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ + –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –æ—Ç–∑—ã–≤—ã + –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# üõ°Ô∏è –î–û–ë–ê–í–õ–ï–ù–û: –ê–Ω—Ç–∏-—Å–ø–∞–º –∑–∞—â–∏—Ç–∞, rate limiting, –ø–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
# üéØ –£–õ–£–ß–®–ï–ù–û: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

from django.shortcuts import render, redirect, get_object_or_404
from django.http import HttpResponseRedirect, JsonResponse
from django.contrib import messages
from django.urls import reverse
from django.contrib.auth.decorators import login_required
from django.core.paginator import Paginator
from django.db.models import Q
from django.contrib.contenttypes.models import ContentType
from django.views.decorators.http import require_POST
from django.contrib.admin.views.decorators import staff_member_required
from django.utils import timezone
from django.core.cache import cache
from django.views.decorators.csrf import csrf_protect
from django.views.decorators.cache import cache_page
import json
import time
import logging

# üõçÔ∏è –ú–æ–¥–µ–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤
from products.models import (
    Product,
    KitVariant,
    Color,
    Category,
)

# ü§ù –ò–º–ø–æ—Ä—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –∏–∑ common
from common.models import ProductReview, Wishlist

# üë§ –ú–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–æ—Ä–∑–∏–Ω—ã
from accounts.models import Cart, CartItem

# üìù –§–æ—Ä–º—ã - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ –æ–±—ã—á–Ω—ã—Ö, —Ç–∞–∫ –∏ –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
from .forms import ReviewForm
from common.forms import AnonymousReviewForm

# üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


def get_client_ip(request):
    """üåê –ü–æ–ª—É—á–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–æ–∫—Å–∏"""
    x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
    if x_forwarded_for:
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π IP –∏–∑ —Å–ø–∏—Å–∫–∞ (—Ä–µ–∞–ª—å–Ω—ã–π IP –∫–ª–∏–µ–Ω—Ç–∞)
        ip = x_forwarded_for.split(',')[0].strip()
    else:
        ip = request.META.get('REMOTE_ADDR', '127.0.0.1')
    return ip


def check_review_rate_limit(ip_address, user=None):
    """
    üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤

    –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
    - –ê–Ω–æ–Ω–∏–º–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: 3 –æ—Ç–∑—ã–≤–∞ –≤ —á–∞—Å —Å –æ–¥–Ω–æ–≥–æ IP
    - –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: 5 –æ—Ç–∑—ã–≤–æ–≤ –≤ —á–∞—Å
    """
    if user and user.is_authenticated:
        cache_key = f"review_limit_user_{user.id}"
        limit = 5
    else:
        cache_key = f"review_limit_ip_{ip_address}"
        limit = 3

    current_count = cache.get(cache_key, 0)

    if current_count >= limit:
        return False

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–∞ —á–∞—Å
    cache.set(cache_key, current_count + 1, 3600)
    return True


@cache_page(60 * 15)  # –ö—ç—à –∫–∞—Ç–∞–ª–æ–≥–∞ –Ω–∞ 15 –º–∏–Ω—É—Ç
def products_catalog(request):
    """üõçÔ∏è –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
    search_query = request.GET.get("search", "")
    sort_by = request.GET.get("sort", "-created_at")
    category_filter = request.GET.get("category", "")
    per_page = request.GET.get("per_page", "12")

    # üöÄ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å prefetch
    products = Product.objects.all().select_related("category").prefetch_related("product_images")

    if search_query:
        products = products.filter(
            Q(product_name__icontains=search_query)
            | Q(product_desription__icontains=search_query)
        )

    if category_filter:
        products = products.filter(category__slug=category_filter)

    sort_options = {
        "name": "product_name",
        "-name": "-product_name",
        "price": "price",
        "-price": "-price",
        "newest": "-created_at",
        "oldest": "created_at",
    }
    products = products.order_by(sort_options.get(sort_by, "-created_at"))

    if per_page == "all":
        total_products = products.count()
        if total_products > 500:
            messages.warning(request, f"–ü–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä–≤—ã–µ 500 –∏–∑ {total_products} —Ç–æ–≤–∞—Ä–æ–≤.")
            per_page_num = 500
        else:
            per_page_num = total_products or 1
    else:
        try:
            per_page_num = int(per_page)
            if per_page_num not in [12, 24, 48, 96]:
                per_page_num = 12
        except (ValueError, TypeError):
            per_page_num = 12

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    paginator = Paginator(products, per_page_num)
    page_number = request.GET.get("page")
    page_obj = paginator.get_page(page_number)

    # –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    categories = (
        Category.objects.filter(is_active=True)
        .order_by("display_order", "category_name")
    )

    context = {
        "page_obj": page_obj,
        "products": page_obj.object_list,
        "categories": categories,
        "search_query": search_query,
        "sort_by": sort_by,
        "category_filter": category_filter,
        "per_page": per_page,
        "total_products": paginator.count,
        "current_page": page_obj.number,
        "total_pages": paginator.num_pages,
    }

    return render(request, "product/catalog.html", context)


def products_by_category(request, slug):
    """üìÇ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category = get_object_or_404(Category, slug=slug)

    if not category.is_active:
        messages.warning(request, "–≠—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return redirect("products_catalog")

    sort_by = request.GET.get("sort", "-created_at")
    search_query = request.GET.get("search", "")
    per_page = request.GET.get("per_page", "12")

    products = (
        Product.objects.filter(category=category)
        .select_related("category")
        .prefetch_related("product_images")
    )

    if search_query:
        products = products.filter(
            Q(product_name__icontains=search_query)
            | Q(product_desription__icontains=search_query)
        )

    sort_options = {
        "name": "product_name",
        "-name": "-product_name",
        "price": "price",
        "-price": "-price",
        "newest": "-created_at",
        "oldest": "created_at",
    }
    products = products.order_by(sort_options.get(sort_by, "-created_at"))

    if per_page == "all":
        total_products = products.count()
        if total_products > 500:
            messages.warning(request, f"–ü–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä–≤—ã–µ 500 –∏–∑ {total_products} —Ç–æ–≤–∞—Ä–æ–≤.")
            per_page_num = 500
        else:
            per_page_num = total_products or 1
    else:
        try:
            per_page_num = int(per_page)
            if per_page_num not in [12, 24, 48, 96]:
                per_page_num = 12
        except (ValueError, TypeError):
            per_page_num = 12

    paginator = Paginator(products, per_page_num)
    page_number = request.GET.get("page")
    page_obj = paginator.get_page(page_number)

    categories = (
        Category.objects.filter(is_active=True)
        .order_by("display_order", "category_name")
    )

    context = {
        "category": category,
        "page_obj": page_obj,
        "products": page_obj.object_list,
        "categories": categories,
        "search_query": search_query,
        "sort_by": sort_by,
        "per_page": per_page,
        "total_products": paginator.count,
        "current_page": page_obj.number,
        "total_pages": paginator.num_pages,
        "page_title": category.page_title or category.category_name,
        "meta_title": category.get_seo_title(),
        "meta_description": category.get_seo_description(),
        "has_description": bool(category.description),
        "has_additional_content": bool(category.additional_content),
    }

    return render(request, "product/category.html", context)


@csrf_protect
def get_product(request, slug):
    """
    üõçÔ∏è ‚≠ê –ü–û–õ–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –û–¢–ó–´–í–û–í: –ú–æ–¥–µ—Ä–∞—Ü–∏—è + –ê–Ω–æ–Ω–∏–º–Ω—ã–µ –æ—Ç–∑—ã–≤—ã + –ê–Ω—Ç–∏-—Å–ø–∞–º
    ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω—ã –≤—Å–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ return statements
    """

    product = get_object_or_404(
        Product.objects.select_related('category').prefetch_related('product_images'),
        slug=slug
    )

    # üìù –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞ –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if product.is_boat_product():
        # ================== –õ–û–ì–ò–ö–ê –î–õ–Ø –õ–û–î–û–ö ==================
        carpet_colors = Color.objects.filter(
            color_type='carpet',
            is_available=True
        ).order_by('display_order')

        border_colors = Color.objects.filter(
            color_type='border',
            is_available=True
        ).order_by('display_order')

        initial_carpet_color = carpet_colors.first()
        initial_border_color = border_colors.first()

        sorted_kit_variants = []
        additional_options = []
        podpyatnik_option = None

        selected_kit = None
        updated_price = product.price or 0

        in_cart = False
        if request.user.is_authenticated:
            cart = Cart.objects.filter(user=request.user, is_paid=False).first()
            if cart:
                product_content_type = ContentType.objects.get_for_model(Product)
                in_cart = CartItem.objects.filter(
                    cart=cart,
                    content_type=product_content_type,
                    object_id=product.uid,
                    kit_variant__isnull=True,
                    has_podpyatnik=False
                ).exists()

    else:
        # ================== –õ–û–ì–ò–ö–ê –î–õ–Ø –ê–í–¢–û–ú–û–ë–ò–õ–ï–ô ==================
        sorted_kit_variants = KitVariant.objects.filter(is_option=False).order_by('order')
        additional_options = KitVariant.objects.filter(is_option=True).order_by('order')

        podpyatnik_option = KitVariant.objects.filter(code='podpyatnik', is_option=True).first()
        if not podpyatnik_option:
            podpyatnik_option = type('obj', (object,), {
                'name': '–ü–æ–¥–ø—è—Ç–Ω–∏–∫',
                'price_modifier': 15.00,
                'code': 'podpyatnik'
            })

        carpet_colors = Color.objects.filter(color_type='carpet').order_by('display_order')
        border_colors = Color.objects.filter(color_type='border').order_by('display_order')

        initial_carpet_color = carpet_colors.filter(is_available=True).first() or carpet_colors.first()
        initial_border_color = border_colors.filter(is_available=True).first() or border_colors.first()

        in_cart = False
        if request.user.is_authenticated:
            cart = Cart.objects.filter(user=request.user, is_paid=False).first()
            if cart:
                product_content_type = ContentType.objects.get_for_model(Product)
                in_cart = CartItem.objects.filter(
                    cart=cart,
                    content_type=product_content_type,
                    object_id=product.uid
                ).exists()

        selected_kit, updated_price = None, product.price
        default_kit = sorted_kit_variants.filter(code='salon').first()
        kit_code = request.GET.get('kit') or (default_kit.code if default_kit else None)

        if kit_code:
            selected_kit = kit_code
            updated_price = product.get_product_price_by_kit(kit_code)

    # ================== üîí –ü–û–õ–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –û–¢–ó–´–í–û–í –° –ú–û–î–ï–†–ê–¶–ò–ï–ô ==================

    # üëÅÔ∏è –ü–æ–ª—É—á–∞–µ–º –¢–û–õ–¨–ö–û –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    try:
        reviews = product.reviews.filter(is_approved=True).order_by('-date_added')
        has_reviews = product.reviews.filter(is_approved=True).exists()
    except AttributeError:
        product_content_type = ContentType.objects.get_for_model(Product)
        reviews = ProductReview.objects.filter(
            content_type=product_content_type,
            object_id=product.uid,
            is_approved=True
        ).order_by('-date_added')
        has_reviews = reviews.exists()

    # üìù –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –û–¢–ó–´–í–û–í - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_existing_review = None
    user_has_pending_review = False

    # üìù ‚≠ê –í–°–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –ò–°–ü–û–õ–¨–ó–£–Æ–¢ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–£–Æ –§–û–†–ú–£
    review_form = AnonymousReviewForm(
        request.POST or None,
        user=request.user  # –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º—É
    )

    # üîí ‚≠ê –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–ó–´–í–û–í: –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if request.method == 'POST':
        logger.info("=" * 60)
        logger.info("–ü–û–õ–£–ß–ï–ù POST –ó–ê–ü–†–û–°")
        logger.info(f"–í—Å–µ POST –¥–∞–Ω–Ω—ã–µ: {dict(request.POST)}")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {request.user} (authenticated: {request.user.is_authenticated})")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞
        has_review_submit = 'review_submit' in request.POST
        logger.info(f"–ï—Å—Ç—å –∫–Ω–æ–ø–∫–∞ review_submit: {has_review_submit}")

        if has_review_submit:
            logger.info("‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–ó–´–í–ê –ù–ê–ß–ê–¢–ê")

            # üõ°Ô∏è –ê–ù–¢–ò-–°–ü–ê–ú: –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting
            client_ip = get_client_ip(request)
            logger.info(f"üåê IP –∞–¥—Ä–µ—Å: {client_ip}")

            rate_limit_check = check_review_rate_limit(client_ip, request.user)
            logger.info(f"üõ°Ô∏è Rate limit –ø—Ä–æ–≤–µ—Ä–∫–∞: {'‚úÖ –û–ö' if rate_limit_check else '‚ùå –ë–õ–û–ö–ò–†–û–í–ö–ê'}")

            if not rate_limit_check:
                logger.warning("‚ùå –û–¢–ó–´–í –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù RATE LIMITING")
                if request.user.is_authenticated:
                    messages.error(request,
                                   "‚ö†Ô∏è –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –æ—Ç–∑—ã–≤–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ (–º–∞–∫—Å–∏–º—É–º 5 –æ—Ç–∑—ã–≤–æ–≤ –≤ —á–∞—Å).")
                else:
                    messages.error(request,
                                   "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ —Å –≤–∞—à–µ–≥–æ IP. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ (–º–∞–∫—Å–∏–º—É–º 3 –æ—Ç–∑—ã–≤–∞ –≤ —á–∞—Å).")
                logger.info("üîÑ –†–ï–î–ò–†–ï–ö–¢ –∏–∑-–∑–∞ rate limiting")
                return redirect('get_product', slug=slug)

            # üìù –õ–æ–≥–∏—Ä—É–µ–º —Ç–∏–ø —Ñ–æ—Ä–º—ã
            logger.info(f"üìù –¢–∏–ø —Ñ–æ—Ä–º—ã: UniversalReviewForm (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {'–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' if request.user.is_authenticated else '–∞–Ω–æ–Ω–∏–º–Ω—ã–π'})")
            logger.info(f"üìù –§–æ—Ä–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {review_form is not None}")

            # üìù –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –≤–∞–ª–∏–¥–Ω–∞
            if review_form and review_form.is_valid():
                try:
                    logger.info("üíæ –ù–ê–ß–ò–ù–ê–ï–ú –°–û–•–†–ê–ù–ï–ù–ò–ï –û–¢–ó–´–í–ê...")

                    if user_existing_review:
                        logger.info("‚úèÔ∏è –û–ë–ù–û–í–õ–ï–ù–ò–ï —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ—Ç–∑—ã–≤–∞")
                        logger.info(f"   –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç–∑—ã–≤ UID: {user_existing_review.uid}")

                        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∞
                        user_existing_review.stars = review_form.cleaned_data['stars']
                        user_existing_review.content = review_form.cleaned_data['content']

                        # üìù –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è —Ä–µ—Ü–µ–Ω–∑–µ–Ω—Ç–∞ –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–ª–µ –µ—Å—Ç—å
                        if 'reviewer_name' in review_form.cleaned_data and review_form.cleaned_data.get(
                                'reviewer_name'):
                            user_existing_review.reviewer_name = review_form.cleaned_data['reviewer_name']

                        user_existing_review.is_approved = False  # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è
                        user_existing_review.ip_address = client_ip
                        user_existing_review.user_agent = request.META.get('HTTP_USER_AGENT', '')[:500]

                        logger.info("üíæ –°–û–•–†–ê–ù–Ø–ï–ú –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –û–¢–ó–´–í...")
                        user_existing_review.save()
                        logger.info(f"‚úÖ –û—Ç–∑—ã–≤ –æ–±–Ω–æ–≤–ª–µ–Ω! UID: {user_existing_review.uid}")

                        messages.info(request,
                                      "‚úÖ –í–∞—à –æ—Ç–∑—ã–≤ –æ–±–Ω–æ–≤–ª–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–Ω –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ —Å–∞–π—Ç–µ.")
                        logger.info(
                            f"–û–±–Ω–æ–≤–ª–µ–Ω –æ—Ç–∑—ã–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {request.user.username} –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product.slug}")

                    else:
                        logger.info("‚ûï –°–û–ó–î–ê–ù–ò–ï –Ω–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞")

                        # ‚ûï –°–û–ó–î–ê–ù–ò–ï –Ω–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞ (–∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ)
                        logger.info("üìù –í—ã–∑—ã–≤–∞–µ–º review_form.save(commit=False)...")
                        review = review_form.save(commit=False)
                        logger.info(f"‚úÖ –û–±—ä–µ–∫—Ç –æ—Ç–∑—ã–≤–∞ —Å–æ–∑–¥–∞–Ω –≤ –ø–∞–º—è—Ç–∏: {type(review)}")

                        # üë§ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê: —Ñ–æ—Ä–º–∞ —Å–∞–º–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç user –ø—Ä–∞–≤–∏–ª—å–Ω–æ
                        # review.user —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤ —Ñ–æ—Ä–º–µ
                        if review.user:
                            reviewer_name = review.reviewer_name or review.user.get_full_name() or review.user.username
                            logger.info(f"üë§ –û—Ç–∑—ã–≤ –æ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {reviewer_name}")
                        else:
                            reviewer_name = review.reviewer_name or '–ê–Ω–æ–Ω–∏–º'
                            logger.info(f"üë§ –ê–Ω–æ–Ω–∏–º–Ω—ã–π –æ—Ç–∑—ã–≤ –æ—Ç: {reviewer_name}")

                        # üîó –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑—å —Å —Ç–æ–≤–∞—Ä–æ–º —á–µ—Ä–µ–∑ Generic FK (–¥–ª—è –í–°–ï–• –æ—Ç–∑—ã–≤–æ–≤)
                        product_content_type = ContentType.objects.get_for_model(Product)
                        review.content_type = product_content_type
                        review.object_id = product.uid
                        logger.info(
                            f"üîó Generic FK: content_type_id={product_content_type.id}, object_id={product.uid}")

                        # üõ°Ô∏è –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω—Ç–∏-—Å–ø–∞–º –∑–∞—â–∏—Ç—ã (–¥–ª—è –í–°–ï–• –æ—Ç–∑—ã–≤–æ–≤)
                        review.ip_address = client_ip
                        review.user_agent = request.META.get('HTTP_USER_AGENT', '')[:500]
                        logger.info(f"üõ°Ô∏è –ê–Ω—Ç–∏-—Å–ø–∞–º: IP={client_ip}, UA={review.user_agent[:30]}...")

                        # üîí –°—Ç–∞—Ç—É—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤ —Ñ–æ—Ä–º–µ
                        # (–∞–¥–º–∏–Ω—ã –ø–æ–ª—É—á–∞—é—Ç –∞–≤—Ç–æ–æ–¥–æ–±—Ä–µ–Ω–∏–µ, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±—É—é—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏)
                        logger.info(f"üîí –°—Ç–∞—Ç—É—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏: is_approved={review.is_approved}")

                        # üíæ –°–û–•–†–ê–ù–Ø–ï–ú –í –ë–ê–ó–£!
                        logger.info("üíæ –°–û–•–†–ê–ù–Ø–ï–ú –û–¢–ó–´–í –í –ë–ê–ó–£ –î–ê–ù–ù–´–•...")
                        review.save()
                        logger.info(f"‚úÖ –û–¢–ó–´–í –°–û–•–†–ê–ù–ï–ù! UID: {review.uid}")

                        # üîç –ü–†–û–í–ï–†–Ø–ï–ú —á—Ç–æ –æ—Ç–∑—ã–≤ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤ –±–∞–∑–µ
                        check_review = ProductReview.objects.filter(uid=review.uid).first()
                        if check_review:
                            logger.info(f"‚úÖ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï: –û—Ç–∑—ã–≤ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
                            logger.info(f"   UID: {check_review.uid}")
                            logger.info(f"   User: {check_review.user}")
                            logger.info(f"   Stars: {check_review.stars}")
                            logger.info(f"   Content: {check_review.content[:50]}...")
                            logger.info(f"   Approved: {check_review.is_approved}")
                            logger.info(f"   Date: {check_review.date_added}")
                        else:
                            logger.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –û—Ç–∑—ã–≤ –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!")

                        # üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        if review.user:
                            # –î–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                            if review.is_approved:
                                messages.success(request,
                                                f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –û–Ω –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –Ω–∞ —Å–∞–π—Ç–µ.")
                            else:
                                messages.success(request,
                                                f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –û–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –∏ —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ —Å–∞–π—Ç–µ.")
                            logger.info(f"–°–æ–∑–¥–∞–Ω –æ—Ç–∑—ã–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {review.user.username} –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product.slug}")
                        else:
                            # –î–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                            reviewer_name = review.reviewer_name or '–ì–æ—Å—Ç—å'
                            messages.success(request,
                                           f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤, {reviewer_name}! –û–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –∏ —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ —Å–∞–π—Ç–µ.")
                            logger.info(f"–°–æ–∑–¥–∞–Ω –∞–Ω–æ–Ω–∏–º–Ω—ã–π –æ—Ç–∑—ã–≤ –æ—Ç {reviewer_name} –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product.slug}")

                    logger.info("üîÑ –†–ï–î–ò–†–ï–ö–¢ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                    logger.info("=" * 60)
                    return redirect('get_product', slug=slug)

                except Exception as e:
                    error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞: {str(e)}"
                    logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {error_msg}", exc_info=True)
                    messages.error(request, f"‚ùå {error_msg}")
                    # –ù–ï –¥–µ–ª–∞–µ–º return - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Å –æ—à–∏–±–∫–∞–º–∏
            else:
                # –§–æ—Ä–º–∞ –Ω–µ –≤–∞–ª–∏–¥–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ POST –∑–∞–ø—Ä–æ—Å
                logger.warning("‚ùå –§–æ—Ä–º–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
                logger.warning(f"–û—à–∏–±–∫–∏ —Ñ–æ—Ä–º—ã: {review_form.errors}")
                messages.error(request, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º–µ.")
        else:
            logger.info("POST –∑–∞–ø—Ä–æ—Å –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç review_submit - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Ç–∑—ã–≤–∞")
            logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ POST –∫–ª—é—á–∏: {list(request.POST.keys())}")

        logger.info("=" * 60)
    # –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ POST –æ–±—Ä–∞–±–æ—Ç–∫–∏

    # ================== üîÑ –ü–û–î–ì–û–¢–û–í–ö–ê –ö–û–ù–¢–ï–ö–°–¢–ê (–í–°–ï–ì–î–ê –í–´–ü–û–õ–ù–Ø–ï–¢–°–Ø) ==================

    # üîÑ –ü–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
    similar_products = Product.objects.filter(
        category=product.category
    ).exclude(uid=product.uid).select_related('category').prefetch_related('product_images')[:4]

    # ‚ù§Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö)
    in_wishlist = False
    if request.user.is_authenticated:
        try:
            product_content_type = ContentType.objects.get_for_model(Product)
            in_wishlist = Wishlist.objects.filter(
                user=request.user,
                content_type=product_content_type,
                object_id=product.uid
            ).exists()
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")
            in_wishlist = False

    # üìã –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–±–ª–æ–Ω–∞
    context = {
        'product': product,
        'reviews': reviews,
        'similar_products': similar_products,

        # üìù –¢–∏–ø—ã —Ç–æ–≤–∞—Ä–æ–≤
        'is_boat_product': product.is_boat_product(),
        'is_car_product': product.is_car_product(),

        # üõ†Ô∏è –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏
        'sorted_kit_variants': sorted_kit_variants,
        'additional_options': additional_options,
        'podpyatnik_option': podpyatnik_option,

        # üé® –¶–≤–µ—Ç–∞
        'carpet_colors': carpet_colors,
        'border_colors': border_colors,
        'initial_carpet_color': initial_carpet_color,
        'initial_border_color': initial_border_color,

        # üí∞ –¶–µ–Ω—ã
        'selected_kit': selected_kit,
        'updated_price': updated_price,

        # üõí –°–æ—Å—Ç–æ—è–Ω–∏—è
        'in_cart': in_cart,
        'in_wishlist': in_wishlist,

        # üìù ‚≠ê –°–ò–°–¢–ï–ú–ê –û–¢–ó–´–í–û–í
        'review_form': review_form,
        'user_existing_review': user_existing_review,
        'user_has_pending_review': user_has_pending_review,
        'form_load_time': time.time(),  # –î–ª—è –∞–Ω—Ç–∏-—Å–ø–∞–º –∑–∞—â–∏—Ç—ã
        'has_reviews': has_reviews,
        'rating_percentage': (product.get_rating() / 5) * 100 if has_reviews else 0,

        # üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        'is_anonymous_user': not request.user.is_authenticated,
    }

    return render(request, 'product/product.html', context)




def add_to_cart(request, uid):
    """üõí –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        kit_code = request.POST.get('kit')
        carpet_color_id = request.POST.get('carpet_color')
        border_color_id = request.POST.get('border_color')
        has_podp = request.POST.get('podp') == '1'
        quantity = int(request.POST.get('quantity') or 1)

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        if quantity < 1 or quantity > 50:
            messages.error(request, '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ (1-50).')
            return redirect(request.META.get('HTTP_REFERER', '/'))

        product = get_object_or_404(Product, uid=uid)

        if product.is_boat_product():
            kit_variant = None
            has_podp = False
        else:
            if not kit_code:
                messages.warning(request, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—é!')
                return redirect(request.META.get('HTTP_REFERER'))
            kit_variant = get_object_or_404(KitVariant, code=kit_code)

        carpet_color = None
        if carpet_color_id:
            carpet_color = get_object_or_404(Color, uid=carpet_color_id)
            if not carpet_color.is_available:
                messages.warning(request, f'–¶–≤–µ—Ç –∫–æ–≤—Ä–∏–∫–∞ "{carpet_color.name}" –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.')
                return redirect(request.META.get('HTTP_REFERER'))

        border_color = None
        if border_color_id:
            border_color = get_object_or_404(Color, uid=border_color_id)
            if not border_color.is_available:
                messages.warning(request, f'–¶–≤–µ—Ç –æ–∫–∞–Ω—Ç–æ–≤–∫–∏ "{border_color.name}" –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.')
                return redirect(request.META.get('HTTP_REFERER'))

        # üõí –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        if request.user.is_authenticated:
            cart, created = Cart.objects.get_or_create(
                user=request.user,
                is_paid=False,
                defaults={'session_id': None}
            )
        else:
            session_key = request.session.session_key
            if not session_key:
                request.session.create()
                session_key = request.session.session_key

            cart, created = Cart.objects.get_or_create(
                session_id=session_key,
                user=None,
                is_paid=False
            )

        product_content_type = ContentType.objects.get_for_model(Product)

        existing_item = CartItem.objects.filter(
            cart=cart,
            content_type=product_content_type,
            object_id=product.uid,
            kit_variant=kit_variant,
            carpet_color=carpet_color,
            border_color=border_color,
            has_podpyatnik=has_podp
        ).first()

        if existing_item:
            existing_item.quantity += quantity
            existing_item.save()
            messages.success(request, f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ —É–≤–µ–ª–∏—á–µ–Ω–æ! –í—Å–µ–≥–æ –≤ –∫–æ—Ä–∑–∏–Ω–µ: {existing_item.quantity}')
        else:
            CartItem.objects.create(
                cart=cart,
                content_type=product_content_type,
                object_id=product.uid,
                kit_variant=kit_variant,
                carpet_color=carpet_color,
                border_color=border_color,
                has_podpyatnik=has_podp,
                quantity=quantity
            )
            messages.success(request, '‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!')

        logger.info(
            f"–¢–æ–≤–∞—Ä {product.slug} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {request.user.username if request.user.is_authenticated else 'anonymous'}")

    except ValueError:
        messages.error(request, '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞.')
    except Exception as e:
        messages.error(request, f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É: {str(e)}')
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É: {e}", exc_info=True)

    return redirect('cart')


@login_required
def product_reviews(request):
    """üìù –õ–∏—á–Ω—ã–µ –æ—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    reviews = ProductReview.objects.filter(
        user=request.user
    ).order_by('-date_added').select_related('content_type')

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö
    for review in reviews:
        try:
            if review.content_type.model == 'product':
                product = Product.objects.get(uid=review.object_id)
            elif review.content_type.model == 'boatproduct':
                from boats.models import BoatProduct
                product = BoatProduct.objects.get(uid=review.object_id)
            else:
                product = None
            review._cached_product = product
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è –æ—Ç–∑—ã–≤–∞ {review.uid}: {e}")
            review._cached_product = None

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∑—ã–≤–æ–≤
    paginator = Paginator(reviews, 10)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    return render(request, 'product/all_product_reviews.html', {
        'reviews': page_obj.object_list,
        'page_obj': page_obj
    })


def delete_review(request, slug, review_uid):
    """üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    if not request.user.is_authenticated:
        messages.warning(request, "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤.")
        return redirect('login')

    review = ProductReview.objects.filter(
        uid=review_uid,
        user=request.user
    ).first()

    if not review:
        messages.error(request, "–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return redirect('get_product', slug=slug)

    try:
        if review.content_type.model == 'product':
            product = Product.objects.get(uid=review.object_id)
            if hasattr(product, 'slug') and product.slug != slug:
                messages.error(request, "–û—Ç–∑—ã–≤ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É —Ç–æ–≤–∞—Ä—É.")
                return redirect('get_product', slug=slug)
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –æ—Ç–∑—ã–≤–∞: {e}")

    review.delete()
    messages.success(request, "‚úÖ –í–∞—à –æ—Ç–∑—ã–≤ –±—ã–ª —É–¥–∞–ª–µ–Ω.")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {request.user.username} —É–¥–∞–ª–∏–ª –æ—Ç–∑—ã–≤ {review_uid}")

    return HttpResponseRedirect(request.META.get('HTTP_REFERER', f'/products/{slug}/'))


@login_required
def edit_review(request, review_uid):
    """‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ —á–µ—Ä–µ–∑ AJAX"""
    review = ProductReview.objects.filter(uid=review_uid, user=request.user).first()

    if not review:
        return JsonResponse({"success": False, "error": "–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω"}, status=404)

    if request.method == "POST":
        try:
            stars = int(request.POST.get("stars", 0))
            content = request.POST.get("content", "").strip()

            if not (1 <= stars <= 5):
                return JsonResponse({
                    "success": False,
                    "error": "–û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥"
                }, status=400)

            if len(content) < 10:
                return JsonResponse({
                    "success": False,
                    "error": "–û—Ç–∑—ã–≤ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤"
                }, status=400)

            review.stars = stars
            review.content = content
            review.is_approved = False  # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è
            review.save()

            messages.success(request, "‚úÖ –í–∞—à –æ—Ç–∑—ã–≤ –æ–±–Ω–æ–≤–ª–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {request.user.username} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª –æ—Ç–∑—ã–≤ {review_uid}")

            return JsonResponse({"success": True, "message": "–û—Ç–∑—ã–≤ –æ–±–Ω–æ–≤–ª–µ–Ω"})

        except ValueError:
            return JsonResponse({
                "success": False,
                "error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
            }, status=400)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞: {e}", exc_info=True)
            return JsonResponse({
                "success": False,
                "error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
            }, status=500)

    return JsonResponse({"success": False, "error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å"}, status=400)


# ==================== ‚ù§Ô∏è –§–£–ù–ö–¶–ò–ò –ò–ó–ë–†–ê–ù–ù–û–ì–û ====================

def add_to_wishlist(request, uid):
    """‚ù§Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
    kit_code = request.POST.get('kit') or request.GET.get('kit')
    carpet_color_id = request.POST.get('carpet_color') or request.GET.get('carpet_color')
    border_color_id = request.POST.get('border_color') or request.GET.get('border_color')
    has_podp = (request.POST.get('podp') or request.GET.get('podp')) == '1'

    product = get_object_or_404(Product, uid=uid)

    if not product.is_boat_product() and not kit_code:
        messages.warning(request, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!')
        return redirect(request.META.get('HTTP_REFERER'))

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—é
    kit_variant = None
    if not product.is_boat_product():
        kit_variant = get_object_or_404(KitVariant, code=kit_code)
    else:
        has_podp = False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–≤–µ—Ç–∞
    carpet_color = None
    border_color = None
    if carpet_color_id:
        carpet_color = get_object_or_404(Color, uid=carpet_color_id)
        if not carpet_color.is_available:
            messages.warning(request, f'–¶–≤–µ—Ç –∫–æ–≤—Ä–∏–∫–∞ "{carpet_color.name}" –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.')
            return redirect(request.META.get('HTTP_REFERER'))

    if border_color_id:
        border_color = get_object_or_404(Color, uid=border_color_id)
        if not border_color.is_available:
            messages.warning(request, f'–¶–≤–µ—Ç –æ–∫–∞–Ω—Ç–æ–≤–∫–∏ "{border_color.name}" –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.')
            return redirect(request.META.get('HTTP_REFERER'))

    product_content_type = ContentType.objects.get_for_model(Product)
    wishlist_item = Wishlist.objects.filter(
        user=request.user,
        content_type=product_content_type,
        object_id=product.uid,
        kit_variant=kit_variant
    ).first()

    if wishlist_item:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
        wishlist_item.carpet_color = carpet_color
        wishlist_item.border_color = border_color
        wishlist_item.has_podpyatnik = has_podp
        wishlist_item.save()
        messages.success(request, "‚úÖ –¢–æ–≤–∞—Ä –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω!")
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        Wishlist.objects.create(
            user=request.user,
            content_type=product_content_type,
            object_id=product.uid,
            kit_variant=kit_variant,
            carpet_color=carpet_color,
            border_color=border_color,
            has_podpyatnik=has_podp
        )
        messages.success(request, "‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {request.user.username} –¥–æ–±–∞–≤–∏–ª —Ç–æ–≤–∞—Ä {product.slug} –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
    return redirect(reverse('wishlist'))


def remove_from_wishlist(request, uid):
    """üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    product = get_object_or_404(Product, uid=uid)
    kit_code = request.GET.get('kit')

    product_content_type = ContentType.objects.get_for_model(Product)

    if kit_code:
        kit_variant = get_object_or_404(KitVariant, code=kit_code)
        deleted_count = Wishlist.objects.filter(
            user=request.user,
            content_type=product_content_type,
            object_id=product.uid,
            kit_variant=kit_variant
        ).delete()[0]
    else:
        deleted_count = Wishlist.objects.filter(
            user=request.user,
            content_type=product_content_type,
            object_id=product.uid
        ).delete()[0]

    if deleted_count > 0:
        messages.success(request, "‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {request.user.username} —É–¥–∞–ª–∏–ª —Ç–æ–≤–∞—Ä {product.slug} –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")
    else:
        messages.info(request, "–¢–æ–≤–∞—Ä —É–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º.")

    return redirect(reverse('wishlist'))


def wishlist_view(request):
    """‚ù§Ô∏è –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
    wishlist_items = Wishlist.objects.filter(
        user=request.user
    ).select_related('kit_variant', 'carpet_color', 'border_color').order_by('-created_at')

    return render(request, 'product/wishlist.html', {'wishlist_items': wishlist_items})


@login_required
def move_to_cart(request, uid):
    """üîÑ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    product = get_object_or_404(Product, uid=uid)
    product_content_type = ContentType.objects.get_for_model(Product)

    wishlist = Wishlist.objects.filter(
        user=request.user,
        content_type=product_content_type,
        object_id=product.uid
    ).first()

    if not wishlist:
        messages.error(request, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º.")
        return redirect('wishlist')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ü–≤–µ—Ç–æ–≤
    if wishlist.carpet_color and not wishlist.carpet_color.is_available:
        messages.warning(request, f'–¶–≤–µ—Ç –∫–æ–≤—Ä–∏–∫–∞ "{wishlist.carpet_color.name}" –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.')
        return redirect('wishlist')

    if wishlist.border_color and not wishlist.border_color.is_available:
        messages.warning(request, f'–¶–≤–µ—Ç –æ–∫–∞–Ω—Ç–æ–≤–∫–∏ "{wishlist.border_color.name}" –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.')
        return redirect('wishlist')

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    cart, created = Cart.objects.get_or_create(user=request.user, is_paid=False)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
    cart_item = CartItem.objects.filter(
        cart=cart,
        content_type=product_content_type,
        object_id=product.uid,
        kit_variant=wishlist.kit_variant,
        carpet_color=wishlist.carpet_color,
        border_color=wishlist.border_color,
        has_podpyatnik=wishlist.has_podpyatnik
    ).first()

    if cart_item:
        cart_item.quantity += 1
        cart_item.save()
    else:
        CartItem.objects.create(
            cart=cart,
            content_type=product_content_type,
            object_id=product.uid,
            kit_variant=wishlist.kit_variant,
            carpet_color=wishlist.carpet_color,
            border_color=wishlist.border_color,
            has_podpyatnik=wishlist.has_podpyatnik
        )

    # –£–¥–∞–ª—è–µ–º –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    wishlist.delete()

    messages.success(request, "‚úÖ –¢–æ–≤–∞—Ä –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {request.user.username} –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª —Ç–æ–≤–∞—Ä {product.slug} –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –≤ –∫–æ—Ä–∑–∏–Ω—É")

    return redirect('cart')


# ==================== üë®‚Äçüíº –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ú–û–î–ï–†–ê–¶–ò–ò ==================

@staff_member_required
@require_POST
def moderate_review(request, review_uid, action):
    """
    üë®‚Äçüíº –ú–æ–¥–µ—Ä–∞—Ü–∏—è –æ—Ç–∑—ã–≤–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏

    –ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ–¥–æ–±—Ä—è—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω—è—Ç—å –æ—Ç–∑—ã–≤—ã
    —á–µ—Ä–µ–∑ AJAX-–∑–∞–ø—Ä–æ—Å—ã —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    """
    try:
        review = ProductReview.objects.filter(uid=review_uid).first()

        if not review:
            return JsonResponse({
                'success': False,
                'error': '–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }, status=404)

        if action == 'approve':
            review.is_approved = True
            review.moderated_by = request.user if hasattr(review, 'moderated_by') else None
            review.moderated_at = timezone.now() if hasattr(review, 'moderated_at') else None
            review.save()

            logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {request.user.username} –æ–¥–æ–±—Ä–∏–ª –æ—Ç–∑—ã–≤ {review_uid}")

            return JsonResponse({
                'success': True,
                'message': f'–û—Ç–∑—ã–≤ –æ—Ç {review.get_reviewer_name()} –æ–¥–æ–±—Ä–µ–Ω',
                'new_status': 'approved'
            })

        elif action == 'reject':
            # üóëÔ∏è –û—Ç–∫–ª–æ–Ω—è–µ–º –æ—Ç–∑—ã–≤ (—É–¥–∞–ª—è–µ–º)
            reviewer_name = review.get_reviewer_name()
            review.delete()

            logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {request.user.username} –æ—Ç–∫–ª–æ–Ω–∏–ª –æ—Ç–∑—ã–≤ {review_uid}")

            return JsonResponse({
                'success': True,
                'message': f'–û—Ç–∑—ã–≤ –æ—Ç {reviewer_name} –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏ —É–¥–∞–ª–µ–Ω',
                'new_status': 'rejected'
            })

        else:
            return JsonResponse({
                'success': False,
                'error': f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}'
            }, status=400)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–∞ {review_uid}: {e}", exc_info=True)
        return JsonResponse({
            'success': False,
            'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {str(e)}'
        }, status=500)


@staff_member_required
def pending_reviews(request):
    """
    üë®‚Äçüíº –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –æ—Ç–∑—ã–≤–∞–º–∏, –æ–∂–∏–¥–∞—é—â–∏–º–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏

    –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–¥–æ–±—Ä–µ–Ω–∏—è
    """
    # üìã –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
    pending_reviews = ProductReview.objects.filter(
        is_approved=False
    ).order_by('-date_added').select_related('user', 'content_type')

    # üîç –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö –∫ –æ—Ç–∑—ã–≤–∞–º
    for review in pending_reviews:
        try:
            if review.content_type.model == 'product':
                product = Product.objects.get(uid=review.object_id)
            elif review.content_type.model == 'boatproduct':
                from boats.models import BoatProduct
                product = BoatProduct.objects.get(uid=review.object_id)
            else:
                product = None
            review._cached_product = product
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è –æ—Ç–∑—ã–≤–∞ {review.uid}: {e}")
            review._cached_product = None

    # üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = {
        'total_pending': pending_reviews.count(),
        'today_pending': pending_reviews.filter(
            date_added__date=timezone.now().date()
        ).count(),
        'total_approved': ProductReview.objects.filter(is_approved=True).count(),
        'total_reviews': ProductReview.objects.count(),
    }

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∑—ã–≤–æ–≤
    paginator = Paginator(pending_reviews, 20)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    context = {
        'pending_reviews': page_obj.object_list,
        'page_obj': page_obj,
        'stats': stats,
    }

    return render(request, 'admin/moderate_reviews.html', context)


@staff_member_required
@require_POST
def bulk_moderate_reviews(request):
    """
    üë®‚Äçüíº –ú–∞—Å—Å–æ–≤–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è –æ—Ç–∑—ã–≤–æ–≤

    –ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ–¥–æ–±—Ä–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å
    –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–∑—ã–≤–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    """
    try:
        data = json.loads(request.body)
        review_uids = data.get('review_uids', [])
        action = data.get('action')  # 'approve' or 'reject'

        if not review_uids or not action:
            return JsonResponse({
                'success': False,
                'error': '–ù–µ —É–∫–∞–∑–∞–Ω—ã –æ—Ç–∑—ã–≤—ã –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ'
            }, status=400)

        if len(review_uids) > 100:
            return JsonResponse({
                'success': False,
                'error': '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–º–∞–∫—Å–∏–º—É–º 100)'
            }, status=400)

        reviews = ProductReview.objects.filter(uid__in=review_uids)

        if not reviews.exists():
            return JsonResponse({
                'success': False,
                'error': '–û—Ç–∑—ã–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
            }, status=404)

        processed_count = 0

        if action == 'approve':
            # ‚úÖ –û–¥–æ–±—Ä—è–µ–º –æ—Ç–∑—ã–≤—ã
            update_fields = {'is_approved': True}
            if hasattr(ProductReview, 'moderated_by'):
                update_fields['moderated_by'] = request.user
            if hasattr(ProductReview, 'moderated_at'):
                update_fields['moderated_at'] = timezone.now()

            updated = reviews.update(**update_fields)
            processed_count = updated
            message = f'–û–¥–æ–±—Ä–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: {processed_count}'

            logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {request.user.username} –æ–¥–æ–±—Ä–∏–ª {processed_count} –æ—Ç–∑—ã–≤–æ–≤ –º–∞—Å—Å–æ–≤–æ")

        elif action == 'reject':
            # üóëÔ∏è –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
            processed_count = reviews.count()
            reviews.delete()
            message = f'–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: {processed_count}'

            logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {request.user.username} –æ—Ç–∫–ª–æ–Ω–∏–ª {processed_count} –æ—Ç–∑—ã–≤–æ–≤ –º–∞—Å—Å–æ–≤–æ")

        else:
            return JsonResponse({
                'success': False,
                'error': f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}'
            }, status=400)

        return JsonResponse({
            'success': True,
            'message': message,
            'processed_count': processed_count
        })

    except json.JSONDecodeError:
        return JsonResponse({
            'success': False,
            'error': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ JSON –¥–∞–Ω–Ω—ã–µ'
        }, status=400)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}", exc_info=True)
        return JsonResponse({
            'success': False,
            'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}'
        }, status=500)


# ==================== üëçüëé –§–£–ù–ö–¶–ò–ò –õ–ê–ô–ö–û–í –ò –î–ò–ó–õ–ê–ô–ö–û–í ==================

def toggle_like(request, review_uid):
    """üëç –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–∞–π–∫–æ–≤ (AJAX)"""
    if not request.user.is_authenticated:
        return JsonResponse({'success': False, 'error': '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'}, status=401)

    review = get_object_or_404(ProductReview, uid=review_uid)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–∑—ã–≤ –æ–¥–æ–±—Ä–µ–Ω (–Ω–µ–ª—å–∑—è –ª–∞–π–∫–∞—Ç—å –Ω–µ–æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ)
    if not review.is_approved:
        return JsonResponse({'success': False, 'error': '–û—Ç–∑—ã–≤ –µ—â–µ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω'}, status=403)

    if request.user in review.likes.all():
        review.likes.remove(request.user)
        action = 'removed'
    else:
        review.likes.add(request.user)
        review.dislikes.remove(request.user)  # –£–±–∏—Ä–∞–µ–º –¥–∏–∑–ª–∞–π–∫ –µ—Å–ª–∏ –±—ã–ª
        action = 'added'

    return JsonResponse({
        'success': True,
        'action': action,
        'likes': review.like_count(),
        'dislikes': review.dislike_count()
    })


def toggle_dislike(request, review_uid):
    """üëé –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–∏–∑–ª–∞–π–∫–æ–≤ (AJAX)"""
    if not request.user.is_authenticated:
        return JsonResponse({'success': False, 'error': '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'}, status=401)

    review = get_object_or_404(ProductReview, uid=review_uid)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–∑—ã–≤ –æ–¥–æ–±—Ä–µ–Ω
    if not review.is_approved:
        return JsonResponse({'success': False, 'error': '–û—Ç–∑—ã–≤ –µ—â–µ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω'}, status=403)

    if request.user in review.dislikes.all():
        review.dislikes.remove(request.user)
        action = 'removed'
    else:
        review.dislikes.add(request.user)
        review.likes.remove(request.user)  # –£–±–∏—Ä–∞–µ–º –ª–∞–π–∫ –µ—Å–ª–∏ –±—ã–ª
        action = 'added'

    return JsonResponse({
        'success': True,
        'action': action,
        'likes': review.like_count(),
        'dislikes': review.dislike_count()
    })

# ==================== –ê–õ–ò–ê–°–´ –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –° URLS ====================

def like_review(request, review_uid):
    """üëç –ê–ª–∏–∞—Å –¥–ª—è toggle_like (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å URLs)"""
    return toggle_like(request, review_uid)

def dislike_review(request, review_uid):
    """üëé –ê–ª–∏–∞—Å –¥–ª—è toggle_dislike (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å URLs)"""
    return toggle_dislike(request, review_uid)


def moderate_review(request, review_uid, action):
    """üë®‚Äçüíº AJAX –º–æ–¥–µ—Ä–∞—Ü–∏—è –æ—Ç–∑—ã–≤–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if not request.user.is_authenticated:
        return JsonResponse({'success': False, 'error': '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'}, status=401)

    if not (request.user.is_staff or request.user.is_superuser):
        return JsonResponse({'success': False, 'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞'}, status=403)

    review = get_object_or_404(ProductReview, uid=review_uid)

    try:
        if action == 'approve':
            review.is_approved = True
            review.is_suspicious = False  # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏
            review.save()
            message = f"–û—Ç–∑—ã–≤ –æ—Ç {review.get_author_name()} –æ–¥–æ–±—Ä–µ–Ω"
        elif action == 'reject':
            review.delete()
            message = f"–û—Ç–∑—ã–≤ –æ—Ç {review.get_author_name()} —É–¥–∞–ª–µ–Ω"
        else:
            return JsonResponse({'success': False, 'error': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ'}, status=400)

        logger.info(f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {request.user.username}: {message}")
        return JsonResponse({'success': True, 'message': message})

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–∞ {review_uid}: {str(e)}")
        return JsonResponse({'success': False, 'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–∞'}, status=500)


# ==================== üö® –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ==================

@staff_member_required
def reviews_statistics(request):
    """üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    from django.db.models import Count, Avg
    from datetime import datetime, timedelta

    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_reviews = ProductReview.objects.count()
    approved_reviews = ProductReview.objects.filter(is_approved=True).count()
    pending_reviews = ProductReview.objects.filter(is_approved=False).count()

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
    today = timezone.now().date()
    week_ago = today - timedelta(days=7)
    month_ago = today - timedelta(days=30)

    today_reviews = ProductReview.objects.filter(date_added__date=today).count()
    week_reviews = ProductReview.objects.filter(date_added__date__gte=week_ago).count()
    month_reviews = ProductReview.objects.filter(date_added__date__gte=month_ago).count()

    # –°—Ä–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏
    avg_rating = ProductReview.objects.filter(is_approved=True).aggregate(
        avg_rating=Avg('stars')
    )['avg_rating'] or 0

    # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Ç–∑—ã–≤–æ–≤
    top_reviewers = ProductReview.objects.filter(
        is_approved=True,
        user__isnull=False
    ).values(
        'user__username', 'user__first_name', 'user__last_name'
    ).annotate(
        review_count=Count('id')
    ).order_by('-review_count')[:10]

    context = {
        'total_reviews': total_reviews,
        'approved_reviews': approved_reviews,
        'pending_reviews': pending_reviews,
        'today_reviews': today_reviews,
        'week_reviews': week_reviews,
        'month_reviews': month_reviews,
        'avg_rating': round(avg_rating, 2),
        'approval_rate': round((approved_reviews / total_reviews * 100) if total_reviews > 0 else 0, 1),
        'top_reviewers': top_reviewers,
    }

    return render(request, 'admin/reviews_statistics.html', context)





# üîß –û–°–ù–û–í–ù–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø –í –≠–¢–û–ú –§–ê–ô–õ–ï:
#
# ‚≠ê –û–ë–™–ï–î–ò–ù–ï–ù–û: –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ + –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
# üõ°Ô∏è –î–û–ë–ê–í–õ–ï–ù–û: Rate limiting, –∞–Ω—Ç–∏-—Å–ø–∞–º –∑–∞—â–∏—Ç–∞, IP —Ç—Ä–µ–∫–∏–Ω–≥
# üë®‚Äçüíº –†–ê–°–®–ò–†–ï–ù–û: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
# üöÄ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: –ó–∞–ø—Ä–æ—Å—ã —Å select_related, –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø–∞–≥–∏–Ω–∞—Ü–∏—è
# üìä –î–û–ë–ê–í–õ–ï–ù–û: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
# üîí –£–õ–£–ß–®–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫, –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
# üìù –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏ –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# üéØ –°–û–í–ú–ï–°–¢–ò–ú–û: –° —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –∏ Generic FK
#
# üéØ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:
# - –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
# - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Å–ø–∞–º–∞
# - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–∏ –∏ —É–ª—É—á—à–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
# - –ú–∞—Å—Å–æ–≤–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
# - Rate limiting –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π
# - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
# - –ü–æ–ª–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º
# - –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø—Ä–æ–¥–∞–∫—à–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é