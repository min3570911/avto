# üìÅ products/views.py
# üîí –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–æ–≤
# ‚≠ê –î–û–ë–ê–í–õ–ï–ù–û: –§—É–Ω–∫—Ü–∏–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ + –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–∏

from django.shortcuts import render, redirect, get_object_or_404
from django.http import HttpResponseRedirect, JsonResponse
from django.contrib import messages
from django.urls import reverse
from django.contrib.auth.decorators import login_required
from django.core.paginator import Paginator
from django.db.models import Q
from django.contrib.contenttypes.models import ContentType
from django.views.decorators.http import require_POST
from django.contrib.admin.views.decorators import staff_member_required
from django.utils import timezone
import json

# üõçÔ∏è –ú–æ–¥–µ–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤
from products.models import (
    Product,
    KitVariant,
    Color,
    Category,
)

# ü§ù –ò–º–ø–æ—Ä—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –∏–∑ common
from common.models import ProductReview, Wishlist

# üë§ –ú–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–æ—Ä–∑–∏–Ω—ã
from accounts.models import Cart, CartItem

# üìù –§–æ—Ä–º—ã
from .forms import ReviewForm


def products_catalog(request):
    """üõçÔ∏è –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
    search_query = request.GET.get("search", "")
    sort_by = request.GET.get("sort", "-created_at")
    category_filter = request.GET.get("category", "")
    per_page = request.GET.get("per_page", "12")

    products = Product.objects.all().select_related("category").prefetch_related("product_images")

    if search_query:
        products = products.filter(
            Q(product_name__icontains=search_query)
            | Q(product_desription__icontains=search_query)
        )

    if category_filter:
        products = products.filter(category__slug=category_filter)

    sort_options = {
        "name": "product_name",
        "-name": "-product_name",
        "price": "price",
        "-price": "-price",
        "newest": "-created_at",
        "oldest": "created_at",
    }
    products = products.order_by(sort_options.get(sort_by, "-created_at"))

    if per_page == "all":
        total_products = products.count()
        if total_products > 500:
            messages.warning(request, f"–ü–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä–≤—ã–µ 500 –∏–∑ {total_products} —Ç–æ–≤–∞—Ä–æ–≤.")
            per_page_num = 500
        else:
            per_page_num = total_products or 1
    else:
        try:
            per_page_num = int(per_page)
            if per_page_num not in [12, 24, 48, 96]:
                per_page_num = 12
        except (ValueError, TypeError):
            per_page_num = 12

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    paginator = Paginator(products, per_page_num)
    page_number = request.GET.get("page")
    page_obj = paginator.get_page(page_number)

    # –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories = (
        Category.objects.filter(is_active=True)
        .order_by("display_order", "category_name")
    )

    context = {
        "page_obj": page_obj,
        "products": page_obj.object_list,
        "categories": categories,
        "search_query": search_query,
        "sort_by": sort_by,
        "category_filter": category_filter,
        "per_page": per_page,
        "total_products": paginator.count,
        "current_page": page_obj.number,
        "total_pages": paginator.num_pages,
    }

    return render(request, "product/catalog.html", context)


def products_by_category(request, slug):
    """üìÇ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category = get_object_or_404(Category, slug=slug)

    if not category.is_active:
        messages.warning(request, "–≠—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return redirect("products_catalog")

    sort_by = request.GET.get("sort", "-created_at")
    search_query = request.GET.get("search", "")
    per_page = request.GET.get("per_page", "12")

    products = (
        Product.objects.filter(category=category)
        .select_related("category")
        .prefetch_related("product_images")
    )

    if search_query:
        products = products.filter(
            Q(product_name__icontains=search_query)
            | Q(product_desription__icontains=search_query)
        )

    sort_options = {
        "name": "product_name",
        "-name": "-product_name",
        "price": "price",
        "-price": "-price",
        "newest": "-created_at",
        "oldest": "created_at",
    }
    products = products.order_by(sort_options.get(sort_by, "-created_at"))

    if per_page == "all":
        total_products = products.count()
        if total_products > 500:
            messages.warning(request, f"–ü–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä–≤—ã–µ 500 –∏–∑ {total_products} —Ç–æ–≤–∞—Ä–æ–≤.")
            per_page_num = 500
        else:
            per_page_num = total_products or 1
    else:
        try:
            per_page_num = int(per_page)
            if per_page_num not in [12, 24, 48, 96]:
                per_page_num = 12
        except (ValueError, TypeError):
            per_page_num = 12

    paginator = Paginator(products, per_page_num)
    page_number = request.GET.get("page")
    page_obj = paginator.get_page(page_number)

    categories = (
        Category.objects.filter(is_active=True)
        .order_by("display_order", "category_name")
    )

    context = {
        "category": category,
        "page_obj": page_obj,
        "products": page_obj.object_list,
        "categories": categories,
        "search_query": search_query,
        "sort_by": sort_by,
        "per_page": per_page,
        "total_products": paginator.count,
        "current_page": page_obj.number,
        "total_pages": paginator.num_pages,
        "page_title": category.page_title or category.category_name,
        "meta_title": category.get_seo_title(),
        "meta_description": category.get_seo_description(),
        "has_description": bool(category.description),
        "has_additional_content": bool(category.additional_content),
    }

    return render(request, "product/category.html", context)


def get_product(request, slug):
    """
    üõçÔ∏è –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–æ–≤–∞—Ä–∞ —Å –ø–æ–ª–Ω–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π –æ—Ç–∑—ã–≤–æ–≤

    ‚≠ê –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–∏
    üîí –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–æ–≤
    üëÅÔ∏è –ü–æ–∫–∞–∑ —Ç–æ–ª—å–∫–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    """

    product = get_object_or_404(Product, slug=slug)

    # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞
    if product.is_boat_product():
        # ================== –õ–û–ì–ò–ö–ê –î–õ–Ø –õ–û–î–û–ö ==================
        carpet_colors = Color.objects.filter(
            color_type='carpet',
            is_available=True
        ).order_by('display_order')

        border_colors = Color.objects.filter(
            color_type='border',
            is_available=True
        ).order_by('display_order')

        initial_carpet_color = carpet_colors.first()
        initial_border_color = border_colors.first()

        sorted_kit_variants = []
        additional_options = []
        podpyatnik_option = None

        selected_kit = None
        updated_price = product.price or 0

        in_cart = False
        if request.user.is_authenticated:
            cart = Cart.objects.filter(user=request.user, is_paid=False).first()
            if cart:
                product_content_type = ContentType.objects.get_for_model(Product)
                in_cart = CartItem.objects.filter(
                    cart=cart,
                    content_type=product_content_type,
                    object_id=product.uid,
                    kit_variant__isnull=True,
                    has_podpyatnik=False
                ).exists()

    else:
        # ================== –õ–û–ì–ò–ö–ê –î–õ–Ø –ê–í–¢–û–ú–û–ë–ò–õ–ï–ô ==================
        sorted_kit_variants = KitVariant.objects.filter(is_option=False).order_by('order')
        additional_options = KitVariant.objects.filter(is_option=True).order_by('order')

        podpyatnik_option = KitVariant.objects.filter(code='podpyatnik', is_option=True).first()
        if not podpyatnik_option:
            podpyatnik_option = type('obj', (object,), {
                'name': '–ü–æ–¥–ø—è—Ç–Ω–∏–∫',
                'price_modifier': 15.00,
                'code': 'podpyatnik'
            })

        carpet_colors = Color.objects.filter(color_type='carpet').order_by('display_order')
        border_colors = Color.objects.filter(color_type='border').order_by('display_order')

        initial_carpet_color = carpet_colors.filter(is_available=True).first() or carpet_colors.first()
        initial_border_color = border_colors.filter(is_available=True).first() or border_colors.first()

        in_cart = False
        if request.user.is_authenticated:
            cart = Cart.objects.filter(user=request.user, is_paid=False).first()
            if cart:
                product_content_type = ContentType.objects.get_for_model(Product)
                in_cart = CartItem.objects.filter(
                    cart=cart,
                    content_type=product_content_type,
                    object_id=product.uid
                ).exists()

        selected_kit, updated_price = None, product.price
        default_kit = sorted_kit_variants.filter(code='salon').first()
        kit_code = request.GET.get('kit') or (default_kit.code if default_kit else None)

        if kit_code:
            selected_kit = kit_code
            updated_price = product.get_product_price_by_kit(kit_code)

    # ================== üîí –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –û–¢–ó–´–í–û–í –° –ú–û–î–ï–†–ê–¶–ò–ï–ô ==================

    # üëÅÔ∏è –ü–æ–ª—É—á–∞–µ–º –¢–û–õ–¨–ö–û –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    try:
        reviews = product.reviews.filter(is_approved=True).order_by('-date_added')
        has_reviews = product.reviews.filter(is_approved=True).exists()
    except AttributeError:
        product_content_type = ContentType.objects.get_for_model(Product)
        reviews = ProductReview.objects.filter(
            content_type=product_content_type,
            object_id=product.uid,
            is_approved=True
        ).order_by('-date_added')
        has_reviews = reviews.exists()

    # üìù –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏)
    user_existing_review = None
    if request.user.is_authenticated:
        try:
            product_content_type = ContentType.objects.get_for_model(Product)
            user_existing_review = ProductReview.objects.filter(
                content_type=product_content_type,
                object_id=product.uid,
                user=request.user
            ).first()
        except:
            user_existing_review = None

    rating_percentage = (product.get_rating() / 5) * 100 if has_reviews else 0
    review_form = ReviewForm(request.POST or None, instance=user_existing_review)

    # üîí –û–ë–†–ê–ë–û–¢–ö–ê POST-–∑–∞–ø—Ä–æ—Å–∞ —Å –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π
    if request.method == 'POST' and request.user.is_authenticated:
        if review_form.is_valid():
            try:
                if user_existing_review:
                    # ‚úèÔ∏è –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç–∑—ã–≤
                    user_existing_review.stars = review_form.cleaned_data['stars']
                    user_existing_review.content = review_form.cleaned_data['content']
                    user_existing_review.is_approved = False  # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è
                    user_existing_review.save()
                    messages.info(request,
                                  "‚úÖ –í–∞—à –æ—Ç–∑—ã–≤ –æ–±–Ω–æ–≤–ª–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. "
                                  "–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–Ω –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ —Å–∞–π—Ç–µ.")
                else:
                    # ‚ûï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤
                    review = review_form.save(commit=False)
                    review.user = request.user

                    # üîó –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑—å —á–µ—Ä–µ–∑ Generic FK
                    product_content_type = ContentType.objects.get_for_model(Product)
                    review.content_type = product_content_type
                    review.object_id = product.uid

                    # üîí –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ —Ç—Ä–µ–±—É–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏
                    review.is_approved = False
                    review.save()

                    messages.success(request,
                                     "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –û–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –∏ —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ —Å–∞–π—Ç–µ.")

                return redirect('get_product', slug=slug)

            except Exception as e:
                messages.error(request, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞: {str(e)}")
        else:
            messages.error(request, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º–µ.")

    # üîç –ü–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã
    similar_products = Product.objects.filter(
        category=product.category
    ).exclude(uid=product.uid).select_related('category').prefetch_related('product_images')[:4]

    # ‚ù§Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
    in_wishlist = False
    if request.user.is_authenticated:
        try:
            product_content_type = ContentType.objects.get_for_model(Product)
            in_wishlist = Wishlist.objects.filter(
                user=request.user,
                content_type=product_content_type,
                object_id=product.uid
            ).exists()
        except:
            in_wishlist = False

    # üìã –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–±–ª–æ–Ω–∞
    context = {
        'product': product,
        'reviews': reviews,
        'similar_products': similar_products,

        # üîç –¢–∏–ø—ã —Ç–æ–≤–∞—Ä–æ–≤
        'is_boat_product': product.is_boat_product(),
        'is_car_product': product.is_car_product(),

        # üõ†Ô∏è –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏
        'sorted_kit_variants': sorted_kit_variants,
        'additional_options': additional_options,
        'podpyatnik_option': podpyatnik_option,

        # üé® –¶–≤–µ—Ç–∞
        'carpet_colors': carpet_colors,
        'border_colors': border_colors,
        'initial_carpet_color': initial_carpet_color,
        'initial_border_color': initial_border_color,

        # üí∞ –¶–µ–Ω—ã
        'selected_kit': selected_kit,
        'updated_price': updated_price,

        # üõí –°–æ—Å—Ç–æ—è–Ω–∏—è
        'in_cart': in_cart,
        'in_wishlist': in_wishlist,

        # üìù –û—Ç–∑—ã–≤—ã –∏ —Ñ–æ—Ä–º—ã
        'review_form': review_form,
        'rating_percentage': rating_percentage,
        'user_existing_review': user_existing_review,
        'user_review_pending': user_existing_review and not user_existing_review.is_approved if user_existing_review else False,
    }

    return render(request, 'product/product.html', context)


def add_to_cart(request, uid):
    """üõí –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É —Å Generic FK"""
    try:
        kit_code = request.POST.get('kit')
        carpet_color_id = request.POST.get('carpet_color')
        border_color_id = request.POST.get('border_color')
        has_podp = request.POST.get('podp') == '1'
        quantity = int(request.POST.get('quantity') or 1)

        product = get_object_or_404(Product, uid=uid)

        if product.is_boat_product():
            kit_variant = None
            has_podp = False
        else:
            if not kit_code:
                messages.warning(request, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—é!')
                return redirect(request.META.get('HTTP_REFERER'))
            kit_variant = get_object_or_404(KitVariant, code=kit_code)

        carpet_color = None
        if carpet_color_id:
            carpet_color = get_object_or_404(Color, uid=carpet_color_id)
            if not carpet_color.is_available:
                messages.warning(request, f'–¶–≤–µ—Ç –∫–æ–≤—Ä–∏–∫–∞ "{carpet_color.name}" –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.')
                return redirect(request.META.get('HTTP_REFERER'))

        border_color = None
        if border_color_id:
            border_color = get_object_or_404(Color, uid=border_color_id)
            if not border_color.is_available:
                messages.warning(request, f'–¶–≤–µ—Ç –æ–∫–∞–Ω—Ç–æ–≤–∫–∏ "{border_color.name}" –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.')
                return redirect(request.META.get('HTTP_REFERER'))

        # üõí –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        if request.user.is_authenticated:
            cart, created = Cart.objects.get_or_create(
                user=request.user,
                is_paid=False,
                defaults={'session_id': None}
            )
        else:
            session_key = request.session.session_key
            if not session_key:
                request.session.create()
                session_key = request.session.session_key

            cart, created = Cart.objects.get_or_create(
                session_id=session_key,
                user=None,
                is_paid=False
            )

        product_content_type = ContentType.objects.get_for_model(Product)

        existing_item = CartItem.objects.filter(
            cart=cart,
            content_type=product_content_type,
            object_id=product.uid,
            kit_variant=kit_variant,
            carpet_color=carpet_color,
            border_color=border_color,
            has_podpyatnik=has_podp
        ).first()

        if existing_item:
            existing_item.quantity += quantity
            existing_item.save()
            messages.success(request, f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ —É–≤–µ–ª–∏—á–µ–Ω–æ! –í—Å–µ–≥–æ –≤ –∫–æ—Ä–∑–∏–Ω–µ: {existing_item.quantity}')
        else:
            CartItem.objects.create(
                cart=cart,
                content_type=product_content_type,
                object_id=product.uid,
                kit_variant=kit_variant,
                carpet_color=carpet_color,
                border_color=border_color,
                has_podpyatnik=has_podp,
                quantity=quantity
            )
            messages.success(request, '‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!')

    except Exception as e:
        messages.error(request, f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É: {str(e)}')

    return redirect('cart')


@login_required
def product_reviews(request):
    """üìù –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–∫–ª—é—á–∞—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏)"""
    reviews = ProductReview.objects.filter(
        user=request.user
    ).order_by('-date_added')

    for review in reviews:
        try:
            if review.content_type.model == 'product':
                product = Product.objects.get(uid=review.object_id)
            elif review.content_type.model == 'boatproduct':
                from boats.models import BoatProduct
                product = BoatProduct.objects.get(uid=review.object_id)
            else:
                product = None
            review._cached_product = product
        except:
            review._cached_product = None

    return render(request, 'product/all_product_reviews.html', {'reviews': reviews})


def delete_review(request, slug, review_uid):
    """üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞"""
    if not request.user.is_authenticated:
        messages.warning(request, "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤.")
        return redirect('login')

    review = ProductReview.objects.filter(
        uid=review_uid,
        user=request.user
    ).first()

    if not review:
        messages.error(request, "–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return redirect('get_product', slug=slug)

    try:
        if review.content_type.model == 'product':
            product = Product.objects.get(uid=review.object_id)
            if hasattr(product, 'slug') and product.slug != slug:
                messages.error(request, "–û—Ç–∑—ã–≤ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É —Ç–æ–≤–∞—Ä—É.")
                return redirect('get_product', slug=slug)
    except:
        pass

    review.delete()
    messages.success(request, "‚úÖ –í–∞—à –æ—Ç–∑—ã–≤ –±—ã–ª —É–¥–∞–ª–µ–Ω.")
    return HttpResponseRedirect(request.META.get('HTTP_REFERER', f'/products/{slug}/'))


@login_required
def edit_review(request, review_uid):
    """‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    review = ProductReview.objects.filter(uid=review_uid, user=request.user).first()

    if not review:
        return JsonResponse({"detail": "–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω"}, status=404)

    if request.method == "POST":
        try:
            stars = request.POST.get("stars")
            content = request.POST.get("content")

            if stars and content:
                review.stars = int(stars)
                review.content = content
                review.is_approved = False  # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è
                review.save()
                messages.success(request, "‚úÖ –í–∞—à –æ—Ç–∑—ã–≤ –æ–±–Ω–æ–≤–ª–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
            else:
                return JsonResponse({"detail": "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è"}, status=400)
        except (ValueError, TypeError):
            return JsonResponse({"detail": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"}, status=400)

    return JsonResponse({"detail": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å"}, status=400)


def like_review(request, review_uid):
    """üëç –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∞–π–∫–∞ –æ—Ç–∑—ã–≤–∞"""
    review = ProductReview.objects.filter(uid=review_uid).first()

    if not review:
        return JsonResponse({'error': '–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω'}, status=404)

    if request.user in review.likes.all():
        review.likes.remove(request.user)
    else:
        review.likes.add(request.user)
        review.dislikes.remove(request.user)

    return JsonResponse({
        'likes': review.like_count(),
        'dislikes': review.dislike_count()
    })


def dislike_review(request, review_uid):
    """üëé –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∑–ª–∞–π–∫–∞ –æ—Ç–∑—ã–≤–∞"""
    review = ProductReview.objects.filter(uid=review_uid).first()

    if not review:
        return JsonResponse({'error': '–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω'}, status=404)

    if request.user in review.dislikes.all():
        review.dislikes.remove(request.user)
    else:
        review.dislikes.add(request.user)
        review.likes.remove(request.user)

    return JsonResponse({
        'likes': review.like_count(),
        'dislikes': review.dislike_count()
    })


@login_required
def add_to_wishlist(request, uid):
    """‚ù§Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
    kit_code = request.POST.get('kit')
    carpet_color_id = request.POST.get('carpet_color')
    border_color_id = request.POST.get('border_color')
    has_podp = request.POST.get('podp') == '1'

    if not kit_code:
        kit_code = request.GET.get('kit')
    if not carpet_color_id:
        carpet_color_id = request.GET.get('carpet_color')
    if not border_color_id:
        border_color_id = request.GET.get('border_color')
    if not has_podp:
        has_podp = request.GET.get('podp') == '1'

    product = get_object_or_404(Product, uid=uid)

    if not product.is_boat_product() and not kit_code:
        messages.warning(request, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!')
        return redirect(request.META.get('HTTP_REFERER'))

    if product.is_boat_product():
        kit_variant = None
        has_podp = False
    else:
        kit_variant = get_object_or_404(KitVariant, code=kit_code)

    carpet_color = None
    border_color = None
    if carpet_color_id:
        carpet_color = get_object_or_404(Color, uid=carpet_color_id)
    if border_color_id:
        border_color = get_object_or_404(Color, uid=border_color_id)

    if carpet_color and not carpet_color.is_available:
        messages.warning(request, f'–¶–≤–µ—Ç –∫–æ–≤—Ä–∏–∫–∞ "{carpet_color.name}" –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.')
        return redirect(request.META.get('HTTP_REFERER'))

    if border_color and not border_color.is_available:
        messages.warning(request, f'–¶–≤–µ—Ç –æ–∫–∞–Ω—Ç–æ–≤–∫–∏ "{border_color.name}" –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.')
        return redirect(request.META.get('HTTP_REFERER'))

    product_content_type = ContentType.objects.get_for_model(Product)
    wishlist_item = Wishlist.objects.filter(
        user=request.user,
        content_type=product_content_type,
        object_id=product.uid,
        kit_variant=kit_variant
    ).first()

    if wishlist_item:
        wishlist_item.carpet_color = carpet_color
        wishlist_item.border_color = border_color
        wishlist_item.has_podpyatnik = has_podp
        wishlist_item.save()
        messages.success(request, "‚úÖ –¢–æ–≤–∞—Ä –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω!")
    else:
        Wishlist.objects.create(
            user=request.user,
            content_type=product_content_type,
            object_id=product.uid,
            kit_variant=kit_variant,
            carpet_color=carpet_color,
            border_color=border_color,
            has_podpyatnik=has_podp
        )
        messages.success(request, "‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")

    return redirect(reverse('wishlist'))


@login_required
def remove_from_wishlist(request, uid):
    """üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    product = get_object_or_404(Product, uid=uid)
    kit_code = request.GET.get('kit')

    product_content_type = ContentType.objects.get_for_model(Product)

    if kit_code:
        kit_variant = get_object_or_404(KitVariant, code=kit_code)
        Wishlist.objects.filter(
            user=request.user,
            content_type=product_content_type,
            object_id=product.uid,
            kit_variant=kit_variant
        ).delete()
    else:
        Wishlist.objects.filter(
            user=request.user,
            content_type=product_content_type,
            object_id=product.uid
        ).delete()

    messages.success(request, "‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!")
    return redirect(reverse('wishlist'))


@login_required
def wishlist_view(request):
    """‚ù§Ô∏è –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
    wishlist_items = Wishlist.objects.filter(user=request.user)
    return render(request, 'product/wishlist.html', {'wishlist_items': wishlist_items})


@login_required
def move_to_cart(request, uid):
    """üîÑ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    product = get_object_or_404(Product, uid=uid)
    product_content_type = ContentType.objects.get_for_model(Product)

    wishlist = Wishlist.objects.filter(
        user=request.user,
        content_type=product_content_type,
        object_id=product.uid
    ).first()

    if not wishlist:
        messages.error(request, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º.")
        return redirect('wishlist')

    kit_variant = wishlist.kit_variant
    carpet_color = wishlist.carpet_color
    border_color = wishlist.border_color
    has_podpyatnik = wishlist.has_podpyatnik

    if carpet_color and not carpet_color.is_available:
        messages.warning(request, f'–¶–≤–µ—Ç –∫–æ–≤—Ä–∏–∫–∞ "{carpet_color.name}" –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.')
        return redirect('wishlist')

    if border_color and not border_color.is_available:
        messages.warning(request, f'–¶–≤–µ—Ç –æ–∫–∞–Ω—Ç–æ–≤–∫–∏ "{border_color.name}" –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.')
        return redirect('wishlist')

    wishlist.delete()

    cart, created = Cart.objects.get_or_create(user=request.user, is_paid=False)

    cart_item = CartItem.objects.filter(
        cart=cart,
        content_type=product_content_type,
        object_id=product.uid,
        kit_variant=kit_variant,
        carpet_color=carpet_color,
        border_color=border_color,
        has_podpyatnik=has_podpyatnik
    ).first()

    if cart_item:
        cart_item.quantity += 1
        cart_item.save()
    else:
        CartItem.objects.create(
            cart=cart,
            content_type=product_content_type,
            object_id=product.uid,
            kit_variant=kit_variant,
            carpet_color=carpet_color,
            border_color=border_color,
            has_podpyatnik=has_podpyatnik
        )

    messages.success(request, "‚úÖ –¢–æ–≤–∞—Ä –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
    return redirect('cart')


# ==================== üîí –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –ú–û–î–ï–†–ê–¶–ò–ò –î–õ–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–í ====================

@staff_member_required
@require_POST
def moderate_review(request, review_uid, action):
    """
    üë®‚Äçüíº –ú–æ–¥–µ—Ä–∞—Ü–∏—è –æ—Ç–∑—ã–≤–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏

    –ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ–¥–æ–±—Ä—è—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω—è—Ç—å –æ—Ç–∑—ã–≤—ã
    —á–µ—Ä–µ–∑ AJAX-–∑–∞–ø—Ä–æ—Å—ã —Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞
    """
    try:
        review = ProductReview.objects.filter(uid=review_uid).first()

        if not review:
            return JsonResponse({
                'success': False,
                'error': '–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }, status=404)

        if action == 'approve':
            review.is_approved = True
            review.save()

            return JsonResponse({
                'success': True,
                'message': f'–û—Ç–∑—ã–≤ –æ—Ç {review.user.get_full_name()} –æ–¥–æ–±—Ä–µ–Ω',
                'new_status': 'approved'
            })

        elif action == 'reject':
            # üóëÔ∏è –û—Ç–∫–ª–æ–Ω—è–µ–º –æ—Ç–∑—ã–≤ (—É–¥–∞–ª—è–µ–º)
            user_name = review.user.get_full_name()
            review.delete()

            return JsonResponse({
                'success': True,
                'message': f'–û—Ç–∑—ã–≤ –æ—Ç {user_name} –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏ —É–¥–∞–ª–µ–Ω',
                'new_status': 'rejected'
            })

        else:
            return JsonResponse({
                'success': False,
                'error': f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}'
            }, status=400)

    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {str(e)}'
        }, status=500)


@staff_member_required
def pending_reviews(request):
    """
    üë®‚Äçüíº –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –æ—Ç–∑—ã–≤–∞–º–∏, –æ–∂–∏–¥–∞—é—â–∏–º–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏

    –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–¥–æ–±—Ä–µ–Ω–∏—è
    """
    # üìã –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
    pending_reviews = ProductReview.objects.filter(
        is_approved=False
    ).order_by('-date_added').select_related('user', 'content_type')

    # üîç –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö –∫ –æ—Ç–∑—ã–≤–∞–º
    for review in pending_reviews:
        try:
            if review.content_type.model == 'product':
                product = Product.objects.get(uid=review.object_id)
            elif review.content_type.model == 'boatproduct':
                from boats.models import BoatProduct
                product = BoatProduct.objects.get(uid=review.object_id)
            else:
                product = None
            review._cached_product = product
        except:
            review._cached_product = None

    # üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = {
        'total_pending': pending_reviews.count(),
        'today_pending': pending_reviews.filter(
            date_added__date=timezone.now().date()
        ).count() if 'timezone' in globals() else 0,
        'total_approved': ProductReview.objects.filter(is_approved=True).count(),
    }

    context = {
        'pending_reviews': pending_reviews,
        'stats': stats,
    }

    return render(request, 'admin/moderate_reviews.html', context)


@staff_member_required
@require_POST
def bulk_moderate_reviews(request):
    """
    üë®‚Äçüíº –ú–∞—Å—Å–æ–≤–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è –æ—Ç–∑—ã–≤–æ–≤

    –ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ–¥–æ–±—Ä–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å
    –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–∑—ã–≤–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    """
    try:
        data = json.loads(request.body)
        review_uids = data.get('review_uids', [])
        action = data.get('action')  # 'approve' or 'reject'

        if not review_uids or not action:
            return JsonResponse({
                'success': False,
                'error': '–ù–µ —É–∫–∞–∑–∞–Ω—ã –æ—Ç–∑—ã–≤—ã –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ'
            }, status=400)

        reviews = ProductReview.objects.filter(uid__in=review_uids)

        if not reviews.exists():
            return JsonResponse({
                'success': False,
                'error': '–û—Ç–∑—ã–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
            }, status=404)

        processed_count = 0

        if action == 'approve':
            # ‚úÖ –û–¥–æ–±—Ä—è–µ–º –æ—Ç–∑—ã–≤—ã
            updated = reviews.update(is_approved=True)
            processed_count = updated
            message = f'–û–¥–æ–±—Ä–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: {processed_count}'

        elif action == 'reject':
            # üóëÔ∏è –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
            processed_count = reviews.count()
            reviews.delete()
            message = f'–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: {processed_count}'

        else:
            return JsonResponse({
                'success': False,
                'error': f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}'
            }, status=400)

        return JsonResponse({
            'success': True,
            'message': message,
            'processed_count': processed_count
        })

    except json.JSONDecodeError:
        return JsonResponse({
            'success': False,
            'error': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ JSON –¥–∞–Ω–Ω—ã–µ'
        }, status=400)
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}'
        }, status=500)


# üîß –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –£–õ–£–ß–®–ï–ù–ù–û–ô –ù–ê–í–ò–ì–ê–¶–ò–ò
def toggle_like(request, review_uid):
    """üëç –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–∞–π–∫–æ–≤ (AJAX)"""
    if not request.user.is_authenticated:
        return JsonResponse({'error': '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'}, status=401)

    review = get_object_or_404(ProductReview, uid=review_uid)

    if request.user in review.likes.all():
        review.likes.remove(request.user)
        action = 'removed'
    else:
        review.likes.add(request.user)
        review.dislikes.remove(request.user)  # –£–±–∏—Ä–∞–µ–º –¥–∏–∑–ª–∞–π–∫ –µ—Å–ª–∏ –±—ã–ª
        action = 'added'

    return JsonResponse({
        'success': True,
        'action': action,
        'likes': review.like_count(),
        'dislikes': review.dislike_count()
    })


def toggle_dislike(request, review_uid):
    """üëé –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–∏–∑–ª–∞–π–∫–æ–≤ (AJAX)"""
    if not request.user.is_authenticated:
        return JsonResponse({'error': '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'}, status=401)

    review = get_object_or_404(ProductReview, uid=review_uid)

    if request.user in review.dislikes.all():
        review.dislikes.remove(request.user)
        action = 'removed'
    else:
        review.dislikes.add(request.user)
        review.likes.remove(request.user)  # –£–±–∏—Ä–∞–µ–º –ª–∞–π–∫ –µ—Å–ª–∏ –±—ã–ª
        action = 'added'

    return JsonResponse({
        'success': True,
        'action': action,
        'likes': review.like_count(),
        'dislikes': review.dislike_count()
    })

# üîß –û–°–ù–û–í–ù–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø –í –≠–¢–û–ú –§–ê–ô–õ–ï:
#
# ‚≠ê –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–µ–∑–¥–æ—á–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ö
# üîí –î–û–ë–ê–í–õ–ï–ù–û: –°–∏—Å—Ç–µ–º–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
# üë®‚Äçüíº –î–û–ë–ê–í–õ–ï–ù–û: moderate_review, pending_reviews, bulk_moderate_reviews
# üéØ –£–õ–£–ß–®–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
# üìù –°–û–•–†–ê–ù–ï–ù–û: –í—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ä–∑–∏–Ω—ã, –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
# üîó –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å Generic FK –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤
#
# üéØ –†–ï–ó–£–õ–¨–¢–ê–¢:
# - –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–æ–≤
# - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
# - –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–µ—Ä–µ–∑ AJAX
# - –ú–∞—Å—Å–æ–≤–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è –æ—Ç–∑—ã–≤–æ–≤
# - –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º