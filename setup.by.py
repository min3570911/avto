#!/usr/bin/env python3
# üìÅ fix_django_countries.py
# üîß –ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ ModuleNotFoundError: No module named 'django_countries'

import os
import subprocess
import shutil


def print_step(step, description):
    """üìù –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —à–∞–≥–∞"""
    print(f"\n{step} {description}")
    print("-" * 50)


def backup_file(file_path):
    """üíæ –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞"""
    if os.path.exists(file_path):
        backup_path = f"{file_path}.backup_django_countries"
        shutil.copy2(file_path, backup_path)
        print(f"üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
        return True
    return False


def run_command(command, description):
    """üîß –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É"""
    print(f"üîß {description}...")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} - –£—Å–ø–µ—à–Ω–æ")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - –û—à–∏–±–∫–∞: {e}")
        return False


def main():
    """üöÄ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""

    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–®–ò–ë–ö–ò django_countries")
    print("=" * 60)
    print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞: ModuleNotFoundError: No module named 'django_countries'")
    print("‚úÖ –†–µ—à–µ–Ω–∏–µ: –ó–∞–º–µ–Ω—è–µ–º django-countries –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è")

    # 1Ô∏è‚É£ –£–¥–∞–ª–µ–Ω–∏–µ django-countries
    print_step("1Ô∏è‚É£", "–£–¥–∞–ª–µ–Ω–∏–µ django-countries")
    run_command("pip uninstall django-countries -y", "–£–¥–∞–ª–µ–Ω–∏–µ django-countries")

    # 2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
    print_step("2Ô∏è‚É£", "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π")
    files_to_backup = [
        'accounts/forms.py',
        'home/models.py',
        'home/admin.py',
        'requirements.txt'
    ]

    for file_path in files_to_backup:
        backup_file(file_path)

    # 3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ settings.py
    print_step("3Ô∏è‚É£", "–ü—Ä–æ–≤–µ—Ä–∫–∞ settings.py")

    settings_path = None
    possible_settings = ['settings.py', 'ecomm/settings.py', 'config/settings.py']

    for path in possible_settings:
        if os.path.exists(path):
            settings_path = path
            break

    if settings_path:
        print(f"üìÅ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫: {settings_path}")

        with open(settings_path, 'r', encoding='utf-8') as f:
            content = f.read()

        if 'django_countries' in content:
            print("‚ö†Ô∏è –í settings.py –Ω–∞–π–¥–µ–Ω—ã —Å—Å—ã–ª–∫–∏ –Ω–∞ django_countries!")
            print("üìù –£–¥–∞–ª–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ INSTALLED_APPS:")
            print("   - 'django_countries',")

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            new_content = content.replace("'django_countries',", "")
            new_content = new_content.replace('"django_countries",', "")

            backup_file(settings_path)

            with open(settings_path, 'w', encoding='utf-8') as f:
                f.write(new_content)

            print("‚úÖ django_countries —É–¥–∞–ª–µ–Ω –∏–∑ INSTALLED_APPS")
        else:
            print("‚úÖ –í settings.py –Ω–µ—Ç —Å—Å—ã–ª–æ–∫ –Ω–∞ django_countries")
    else:
        print("‚ùå –§–∞–π–ª settings.py –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # 4Ô∏è‚É£ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    print_step("4Ô∏è‚É£", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ requirements.txt")

    if os.path.exists('requirements.txt'):
        with open('requirements.txt', 'r', encoding='utf-8') as f:
            lines = f.readlines()

        # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å django-countries
        new_lines = [line for line in lines if 'django-countries' not in line.lower()]

        with open('requirements.txt', 'w', encoding='utf-8') as f:
            f.writelines(new_lines)

        print("‚úÖ django-countries —É–¥–∞–ª–µ–Ω –∏–∑ requirements.txt")

    # 5Ô∏è‚É£ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
    print_step("5Ô∏è‚É£", "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π")

    if run_command("python manage.py makemigrations", "–°–æ–∑–¥–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π"):
        run_command("python manage.py migrate", "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π")

    # 6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    print_step("6Ô∏è‚É£", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")

    if run_command("python manage.py check", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞"):
        print("‚úÖ –ü—Ä–æ–µ–∫—Ç –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É Django")

    # 7Ô∏è‚É£ –§–∏–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    print_step("7Ô∏è‚É£", "–§–∏–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")

    print("\nüéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print("=" * 40)

    print("\nüìã –ß–¢–û –ë–´–õ–û –°–î–ï–õ–ê–ù–û:")
    print("‚úÖ –£–¥–∞–ª–µ–Ω –ø–∞–∫–µ—Ç django-countries")
    print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω settings.py")
    print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω requirements.txt")
    print("‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω—ã –º–∏–≥—Ä–∞—Ü–∏–∏")

    print("\nüîß –ß–¢–û –ù–£–ñ–ù–û –°–î–ï–õ–ê–¢–¨ –î–ê–õ–¨–®–ï:")
    print("1Ô∏è‚É£ –ó–∞–º–µ–Ω–∏—Ç–µ —Ñ–∞–π–ª—ã –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏:")
    print("   üìÅ accounts/forms.py")
    print("   üìÅ home/models.py")
    print("   üìÅ home/admin.py")
    print("")
    print("2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –ø—Ä–æ–µ–∫—Ç–∞:")
    print("   python manage.py runserver")
    print("")
    print("3Ô∏è‚É£ –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –æ—à–∏–±–∫–∏, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã –Ω–∞ –∏–º–ø–æ—Ä—Ç—ã:")
    print("   grep -r 'django_countries' .")
    print("   grep -r 'CountryField' .")

    print("\nüìù –ò–ó–ú–ï–ù–ï–ù–ò–Ø –í –ú–û–î–ï–õ–Ø–•:")
    print("üîÑ CountryField ‚Üí CharField")
    print("üîÑ –í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω ‚Üí –ü—Ä–æ—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ")
    print("üîÑ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: '–ë–µ–ª–∞—Ä—É—Å—å'")

    print("\nüí° –ï–°–õ–ò –ù–£–ñ–ù–´ –°–¢–†–ê–ù–´:")
    print("–î–æ–±–∞–≤—å—Ç–µ –≤ –º–æ–¥–µ–ª—å choices:")
    print("COUNTRIES = [")
    print("    ('BY', '–ë–µ–ª–∞—Ä—É—Å—å'),")
    print("    ('RU', '–†–æ—Å—Å–∏—è'),")
    print("    ('UA', '–£–∫—Ä–∞–∏–Ω–∞'),")
    print("]")
    print("country = models.CharField(max_length=2, choices=COUNTRIES, default='BY')")


if __name__ == "__main__":
    main()